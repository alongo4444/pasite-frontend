[{"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\index.js":"1","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\reportWebVitals.js":"2","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\App.js":"3","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\NavBarC.jsx":"4","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\MainPage.jsx":"5","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\ResultsPage.jsx":"6","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\SearchPage.jsx":"7","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\PhiloTreeC.jsx":"8","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\phylotreeFolder\\phylotree.jsx":"9","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\phylotreeFolder\\branch.jsx":"10","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\phylotreeFolder\\text_width.jsx":"11","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\BrowsePage.jsx":"12","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\DownloadPage.jsx":"13","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\StrainForm.jsx":"14","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\AutocompleteC.jsx":"15"},{"size":729,"mtime":1609705152706,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":630,"mtime":1610011374355,"results":"19","hashOfConfig":"17"},{"size":2339,"mtime":1616084090917,"results":"20","hashOfConfig":"17"},{"size":15662,"mtime":1616156142533,"results":"21","hashOfConfig":"17"},{"size":6926,"mtime":1616156084252,"results":"22","hashOfConfig":"17"},{"size":8143,"mtime":1616098611291,"results":"23","hashOfConfig":"17"},{"size":6833,"mtime":1609619261201,"results":"24","hashOfConfig":"17"},{"size":7668,"mtime":1609619261202,"results":"25","hashOfConfig":"17"},{"size":2520,"mtime":1609619261201,"results":"26","hashOfConfig":"17"},{"size":168,"mtime":1609619261202,"results":"27","hashOfConfig":"17"},{"size":6506,"mtime":1616156183140,"results":"28","hashOfConfig":"17"},{"size":1731,"mtime":1616156142512,"results":"29","hashOfConfig":"17"},{"size":10441,"mtime":1616098268390,"results":"30","hashOfConfig":"17"},{"size":4218,"mtime":1616156210044,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"9k8bk4",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\index.js",[],["70","71"],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\App.js",["72"],"import NavBarC from \"./components/NavBarC\";\r\nimport './App.css';\r\nimport title from './assets/images/title.png';\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport 'react-minimal-side-navigation/lib/ReactMinimalSideNavigation.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <img className=\"title\" src={title}/>\r\n                <div >\r\n                    <Router>\r\n                        <NavBarC />\r\n                    </Router>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\nexport default App;\r\n","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\NavBarC.jsx",[],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\MainPage.jsx",["73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92"],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\ResultsPage.jsx",["93","94","95","96","97"],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\SearchPage.jsx",["98","99","100"],"import React, {useState} from \"react\";\r\nimport '../styles/SearchPage.css';\r\nimport {Form, Col, Row, Button, OverlayTrigger, Tooltip} from \"react-bootstrap\";\r\nimport searchlogo from '../assets/images/research.png'\r\nimport {faQuestion} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Link} from 'react-router-dom';\r\nimport AutocompleteC from \"../components/AutocompleteC\";\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\nexport default function SearchPage() {\r\n    const [rpp, setRpp] = React.useState(10);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const [selectedA, setSelectedA] = React.useState(false);\r\n    const loading = open && options.length === 0;\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n        (async () => {\r\n            const response = await fetch('http://127.0.0.1:8801/api/v1/strains');\r\n            await sleep(1e3); // For demo purposes.\r\n            const countries = await response.json();\r\n            if (active) {\r\n                setOptions(countries.filter(x=> x.name != null))\r\n            }\r\n\r\n        })();\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    },[loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n\r\n    const getSelected = (selected) => {\r\n        setSelectedA(selected)\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n            <FadeIn>\r\n                <Form>\r\n                    <Form.Group as={Row}>\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}></p>\r\n                        </Form.Label>\r\n                        <Col sm=\"4\">\r\n                            <div className=\"imgr_wr\">\r\n                                <img style={{display: \"inline-block\"}} className=\"imgr\" src={searchlogo}/>\r\n                            </div>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"selectStrain\">\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}>Select single/multiple strain/s:</p>\r\n                        </Form.Label>\r\n\r\n                        <Col sm=\"4\">\r\n                            <AutocompleteC multipleChoice={true} true parentCallback={getSelected} apiUrl=\"http://127.0.0.1:8801/api/v1/strains\" labelText=\"Select single/multiple strain/s:\"/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"displaySettings\">\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}></p>\r\n                        </Form.Label>\r\n\r\n                        <>\r\n                            {['top'].map((placement) => (\r\n                                <OverlayTrigger\r\n                                    key={placement}\r\n                                    placement={placement}\r\n                                    overlay={\r\n                                        <Tooltip id={`tooltip-${placement}`}>\r\n                                            Tooltip on <strong>{placement}</strong>.\r\n                                        </Tooltip>\r\n                                    }\r\n                                >\r\n                                    <p style={{fontSize: \"11px\"}}><FontAwesomeIcon icon={faQuestion}/></p>\r\n                                </OverlayTrigger>\r\n                            ))}\r\n                        </>\r\n\r\n\r\n                        <Col xs=\"5\">\r\n                            <Form.Check\r\n                                label=\"Display the distribution across the tree\"\r\n                            />\r\n                        </Col>\r\n\r\n\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}></p>\r\n                        </Form.Label>\r\n\r\n                        <>\r\n                            {['top'].map((placement) => (\r\n                                <OverlayTrigger\r\n                                    key={placement}\r\n                                    placement={placement}\r\n                                    overlay={\r\n                                        <Tooltip id={`tooltip-${placement}`}>\r\n                                            Tooltip on <strong>{placement}</strong>.\r\n                                        </Tooltip>\r\n                                    }\r\n                                >\r\n                                    <p style={{fontSize: \"11px\"}}><FontAwesomeIcon icon={faQuestion}/></p>\r\n                                </OverlayTrigger>\r\n                            ))}\r\n                        </>\r\n                        <Col xs=\"5\">\r\n                            <Form.Check\r\n                                label=\"Display the distribution of the system on the genome\"\r\n                            />\r\n                        </Col>\r\n\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}></p>\r\n                        </Form.Label>\r\n\r\n                        <>\r\n                            {['top'].map((placement) => (\r\n                                <OverlayTrigger\r\n                                    key={placement}\r\n                                    placement={placement}\r\n                                    overlay={\r\n                                        <Tooltip id={`tooltip-${placement}`}>\r\n                                            Tooltip on <strong>{placement}</strong>.\r\n                                        </Tooltip>\r\n                                    }\r\n                                >\r\n                                    <p style={{fontSize: \"11px\"}}><FontAwesomeIcon icon={faQuestion}/></p>\r\n                                </OverlayTrigger>\r\n                            ))}\r\n                        </>\r\n                        <Col xs=\"5\">\r\n                        <span>\r\n                        <Form.Check\r\n                            label=\"Display a ranked list of the clusters that correlate based on their presence/absence\"\r\n                        />\r\n                        </span>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"numResults\">\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}>Number of results in page:</p>\r\n                        </Form.Label>\r\n                        <Col xs=\"auto\">\r\n                            <Form.Control className=\"mb-1\" as=\"select\" value={rpp}\r\n                                          onChange={e => setRpp(e.target.value)}>\r\n                                <option>10</option>\r\n                                <option>25</option>\r\n                                <option>30</option>\r\n                                <option>50</option>\r\n                            </Form.Control>\r\n                        </Col>\r\n\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Link to={{\r\n                            pathname: '/results',\r\n                            state: {\r\n                                myArrayVariableName: selectedA, // send the selected items as a parameter to the result page\r\n                                rpp: rpp //send the number of results per page as a parameter to the result page\r\n                            }\r\n                        }}><Button>Search</Button></Link>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\PhiloTreeC.jsx",["101","102","103"],"import React, { Component } from \"react\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\nimport RBButton from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faArrowLeft, faArrowUp, faArrowDown, faArrowRight,\r\n    faSortAmountUp, faAlignRight, faAlignLeft\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport '../styles/PhiloTreeC.css';\r\n\r\nimport Phylotree from \"./phylotreeFolder/phylotree.jsx\";\r\n\r\nimport \"../styles/phylotree.css\";\r\n\r\n\r\nfunction Button(props) {\r\n    return (<OverlayTrigger\r\n        placement=\"top\"\r\n        overlay={<Tooltip>\r\n            {props.title}\r\n        </Tooltip>}\r\n    >\r\n        <RBButton\r\n            variant=\"secondary\"\r\n            {...props}\r\n        >\r\n            {props.children}\r\n        </RBButton>\r\n    </OverlayTrigger>);\r\n}\r\n\r\nfunction HorizontalExpansionButton(props) {\r\n    return (<Button\r\n        style={{ fontSize: 10 }}\r\n        title=\"Expand horizontally\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faArrowLeft} />\r\n        <FontAwesomeIcon key={2} icon={faArrowRight} />\r\n    </Button>);\r\n}\r\n\r\nfunction HorizontalCompressionButton(props) {\r\n    return (<Button\r\n        style={{ fontSize: 10 }}\r\n        title=\"Compress horizontally\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faArrowRight} />\r\n        <FontAwesomeIcon key={2} icon={faArrowLeft} />\r\n    </Button>);\r\n}\r\n\r\nfunction VerticalExpansionButton(props) {\r\n    return (<Button\r\n        style={{fontSize: 10, display: \"flex\", flexDirection: \"column\"}}\r\n        title=\"Expand vertically\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faArrowUp} />\r\n        <FontAwesomeIcon key={2} icon={faArrowDown} />\r\n    </Button>);\r\n}\r\n\r\nfunction VerticalCompressionButton(props) {\r\n    return (<Button\r\n        style={{fontSize: 10, display: \"flex\", flexDirection: \"column\"}}\r\n        title=\"Compress vertically\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faArrowDown} />\r\n        <FontAwesomeIcon key={2} icon={faArrowUp} />\r\n    </Button>);\r\n}\r\n\r\n\r\nfunction AscendingSortButton(props) {\r\n    return (<Button\r\n        title=\"Sort in ascending order\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faSortAmountUp} flip=\"vertical\"/>\r\n    </Button>);\r\n}\r\n\r\n\r\nfunction DescendingSortButton(props) {\r\n    return (<Button\r\n        title=\"Sort in descending order\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faSortAmountUp}/>\r\n    </Button>);\r\n}\r\n\r\n\r\nfunction AlignTipsRightButton(props) {\r\n    return (<Button\r\n        title=\"Align tips to right\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faAlignRight}/>\r\n    </Button>);\r\n}\r\n\r\n\r\nfunction AlignTipsLeftButton(props) {\r\n    return (<Button\r\n        title=\"Align tips to left\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faAlignLeft}/>\r\n    </Button>);\r\n}\r\n\r\n\r\nclass PhiloTreeC extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tree: null,\r\n            width: 500,\r\n            height: 500,\r\n            alignTips: \"right\",\r\n            sort: null,\r\n            internal: false\r\n        };\r\n    }\r\n    componentDidMount() {\r\n\r\n    }\r\n    toggleDimension(dimension, direction) {\r\n\r\n        if(this.state[dimension] > 550 && direction == \"expand\"){\r\n            return;\r\n        }\r\n        else if(this.state[dimension] < 430 &&  direction != \"expand\"){\r\n            return;\r\n        }\r\n            const new_dimension = this.state[dimension] +\r\n            (direction == \"expand\" ? 20 : -20),\r\n            new_state = {};\r\n        new_state[dimension] = new_dimension;\r\n        this.setState(new_state);\r\n    }\r\n    handleSort(direction) {\r\n        this.setState({sort: direction});\r\n    }\r\n    alignTips(direction) {\r\n        this.setState({alignTips: direction});\r\n    }\r\n    render() {\r\n        const { padding } = this.props;\r\n        const { width, height } = this.state;\r\n        return (<div style={{textAlign: \"center\"}}>\r\n            <h3 className=\"title_tree\">{this.props.title}</h3>\r\n            <div style={{display: \"flex\", justifyContent: \"space-around\"}}>\r\n                <ButtonGroup>\r\n                    <HorizontalExpansionButton\r\n                        onClick={()=>this.toggleDimension(\"width\", \"expand\")} style={{ backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                    <HorizontalCompressionButton\r\n                        onClick={()=>this.toggleDimension(\"width\", \"compress\")} style={{backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                    <VerticalExpansionButton\r\n                        onClick={()=>this.toggleDimension(\"height\", \"expand\")} style={{backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                    <VerticalCompressionButton\r\n                        onClick={()=>this.toggleDimension(\"height\", \"compress\")} style={{backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                    <AscendingSortButton\r\n                        onClick={()=>this.handleSort(\"ascending\")} style={{backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                    <DescendingSortButton\r\n                        onClick={()=>this.handleSort(\"descending\")} style={{backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                    <AlignTipsLeftButton\r\n                        onClick={()=>this.alignTips(\"left\")} style={{backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                    <AlignTipsRightButton\r\n                        onClick={()=>this.alignTips(\"right\")} style={{backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                </ButtonGroup>\r\n                {/*<div>*/}\r\n                {/*    <input*/}\r\n                {/*        type='checkbox'*/}\r\n                {/*        onChange={()=>this.setState({internal: !this.state.internal})}*/}\r\n                {/*    />*/}\r\n                {/*    {this.state.internal ? 'Hide' : 'Show' } internal labels*/}\r\n                {/*</div>*/}\r\n            </div>\r\n            <svg width={width} height={height}>\r\n                <Phylotree\r\n                    width={width-2*padding}\r\n                    height={height-2*padding}\r\n                    transform={`translate(${padding}, ${padding})`}\r\n                    newick= {this.props.newick}\r\n                    alignTips={this.state.alignTips}\r\n                    sort={this.state.sort}\r\n                    internalNodeLabels={this.state.internal}\r\n                    includeBLAxis\r\n                />\r\n            </svg>\r\n        </div>);\r\n    }\r\n}\r\n\r\nPhiloTreeC.defaultProps = {\r\n    padding: 10\r\n};\r\n\r\n\r\nexport default PhiloTreeC;\r\n","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\phylotreeFolder\\phylotree.jsx",["104","105","106","107"],"import React, { useState } from \"react\";\r\nimport { phylotree } from \"phylotree\";\r\nimport { scaleLinear, scaleOrdinal } from \"d3-scale\";\r\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\r\nimport _ from \"underscore\";\r\nimport { AxisTop } from \"d3-react-axis\";\r\nimport { max } from \"d3-array\";\r\n\r\nimport Branch from \"./branch.jsx\";\r\nimport text_width from \"./text_width\";\r\n\r\n\r\nfunction x_branch_lengths(node, accessor) {\r\n    if (!node.parent) return 0;\r\n    const bl = accessor(node);\r\n    return  bl + node.parent.data.abstract_x;\r\n}\r\n\r\nfunction x_no_branch_lengths(node) {\r\n    return node.parent ? node.parent.data.abstract_x + 1 : 0;\r\n}\r\n\r\nfunction default_accessor(node){\r\n    return +node.data.attribute;\r\n}\r\n\r\nfunction sort_nodes (tree, direction) {\r\n    tree.traverse_and_compute (function (n) {\r\n        var d = 1;\r\n        if (n.children && n.children.length) {\r\n            d += max (n.children, function (d) { return d[\"count_depth\"];});\r\n        }\r\n        n[\"count_depth\"] = d;\r\n    });\r\n    const asc = direction == \"ascending\";\r\n    tree.resort_children (function (a,b) {\r\n        return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\r\n    });\r\n}\r\n\r\nfunction placenodes(tree, perform_internal_layout, accessor, sort) {\r\n    accessor = accessor || default_accessor;\r\n    if(sort) {\r\n        sort_nodes(tree, sort);\r\n    }\r\n    var current_leaf_height = -1,\r\n        unique_id = 0;\r\n    tree.max_x = 0;\r\n    const has_branch_lengths = Boolean(accessor(tree.get_tips()[0])),\r\n        x_branch_length = has_branch_lengths ? x_branch_lengths : x_no_branch_lengths;\r\n    function node_layout(node) {\r\n        if(!node.unique_id) {\r\n            unique_id = node.unique_id = unique_id + 1;\r\n        }\r\n        node.data.abstract_x = x_branch_length(node, accessor);\r\n        tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\n        if(node.children) {\r\n            node.data.abstract_y = node.children.map(node_layout)\r\n                .reduce( (a,b) => a + b, 0) / node.children.length;\r\n        } else {\r\n            current_leaf_height = node.data.abstract_y = current_leaf_height+1;\r\n        }\r\n        return node.data.abstract_y;\r\n    }\r\n\r\n    function internal_node_layout(node) {\r\n        unique_id = node.unique_id = unique_id + 1;\r\n        node.data.abstract_x = x_branch_length(node, accessor);\r\n        tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\n        if(!tree.is_leafnode(node)) {\r\n            node.children.forEach(internal_node_layout);\r\n        }\r\n        if(!node.data.abstract_y && node.data.name != \"root\") {\r\n            current_leaf_height = node.data.abstract_y = current_leaf_height+1;\r\n            tree.node_order.push(node.data.name);\r\n        }\r\n        if(node.parent && !node.parent.data.abstract_y && node.data.name != \"root\") {\r\n            if(node.parent.data.name != \"root\") {\r\n                current_leaf_height = node.parent.data.abstract_y = current_leaf_height+1;\r\n                tree.node_order.push(node.parent.data.name);\r\n            }\r\n        }\r\n        tree.max_y = Math.max(tree.max_y, current_leaf_height);\r\n    }\r\n\r\n    if(perform_internal_layout) {\r\n        tree.max_y = 0;\r\n        tree.node_order = [];\r\n        internal_node_layout(tree.nodes);\r\n        const root = tree.get_node_by_name(\"root\");\r\n        root.data.abstract_y = root.children.map(child => child.data.abstract_y)\r\n            .reduce((a,b)=>a+b, 0) / root.children.length;\r\n    } else {\r\n        node_layout(tree.nodes);\r\n        tree.max_y = current_leaf_height;\r\n    }\r\n}\r\n\r\n\r\nfunction getColorScale(tree, highlightBranches) {\r\n    if(!highlightBranches) return null;\r\n    if(typeof highlightBranches === \"boolean\") {\r\n        return tree.parsed_tags && highlightBranches ?\r\n            scaleOrdinal().domain(tree.parsed_tags).range(schemeCategory10) :\r\n            null;\r\n    }\r\n    const pairs = _.pairs(highlightBranches);\r\n    return scaleOrdinal()\r\n        .domain(pairs.map(p => p[0]))\r\n        .range(pairs.map(p => p[1]));\r\n}\r\n\r\n\r\nfunction Phylotree(props) {\r\n    const [tooltip, setTooltip] = useState(false);\r\n    const { width, height, maxLabelWidth } = props;\r\n    var{ tree, newick } = props;\r\n    if (!tree && !newick) {\r\n        return <g />;\r\n    } else if(!tree) {\r\n        tree = new phylotree(newick);\r\n    }\r\n    if(!props.skipPlacement) {\r\n        placenodes(tree, props.internalNodeLabels, props.accessor, props.sort);\r\n    }\r\n\r\n    function attachTextWidth(node) {\r\n        node.data.text_width = text_width(node.data.name, 14, maxLabelWidth);\r\n        if(node.children) node.children.forEach(attachTextWidth);\r\n    }\r\n    attachTextWidth(tree.nodes);\r\n    const sorted_tips = tree.get_tips().sort((a,b) => (\r\n        b.data.abstract_x - a.data.abstract_x\r\n    ));\r\n    var rightmost;\r\n    if (!props.showLabels) rightmost = width;\r\n    else {\r\n        for(let i=0; i < sorted_tips.length; i++) {\r\n            let tip = sorted_tips[i];\r\n            rightmost = width - tip.data.text_width;\r\n            let scale = rightmost / tip.data.abstract_x;\r\n            let none_cross = sorted_tips.map(tip => {\r\n                const tip_x = tip.data.abstract_x * scale,\r\n                    text_x = width - tip.data.text_width,\r\n                    this_doesnt_cross = Math.floor(tip_x) < Math.ceil(text_x);\r\n                return this_doesnt_cross;\r\n            }).every(x => x);\r\n            if(none_cross) break;\r\n        }\r\n    }\r\n    const x_scale = scaleLinear()\r\n            .domain([0, tree.max_x])\r\n            .range([0, rightmost]),\r\n        y_scale = scaleLinear()\r\n            .domain([0, tree.max_y])\r\n            .range([props.includeBLAxis ? 60 : 0, height]),\r\n        color_scale = getColorScale(tree, props.highlightBranches);\r\n    return (<g transform={props.transform}>\r\n        {props.includeBLAxis ? <g>\r\n            <text\r\n                x={x_scale(tree.max_x/2)}\r\n                y={10}\r\n                alignmentBaseline='middle'\r\n                textAnchor='middle'\r\n                fontFamily='Courier'\r\n            >\r\n                Substitutions per site\r\n            </text>\r\n            <AxisTop\r\n                transform={`translate(0, 40)`}\r\n                scale={x_scale}\r\n            />\r\n        </g> : null }\r\n        {tree.links.map(link => {\r\n            const source_id = link.source.unique_id,\r\n                target_id = link.target.unique_id,\r\n                key = source_id + \",\" + target_id,\r\n                show_label = props.internalNodeLabels ||\r\n                    (props.showLabels && tree.is_leafnode(link.target));\r\n            return (<Branch\r\n                key={key}\r\n                xScale={x_scale}\r\n                yScale={y_scale}\r\n                colorScale={color_scale}\r\n                link={link}\r\n                showLabel={show_label}\r\n                maxLabelWidth={maxLabelWidth}\r\n                width={width}\r\n                alignTips={props.alignTips}\r\n                branchStyler={props.branchStyler}\r\n                labelStyler={props.labelStyler}\r\n                tooltip={props.tooltip}\r\n                setTooltip={setTooltip}\r\n            />);\r\n        }) }\r\n        { tooltip ? <props.tooltip\r\n            width={props.width}\r\n            height={props.height}\r\n            {...tooltip}\r\n        /> : null }\r\n    </g>);\r\n}\r\n\r\nPhylotree.defaultProps = {\r\n    width: 500,\r\n    height: 500,\r\n    showLabels: true,\r\n    skipPlacement: false,\r\n    maxLabelWidth: 20,\r\n    alignTips: \"right\",\r\n    accessor: default_accessor,\r\n    branchStyler: null,\r\n    labelStyler: null,\r\n    tooltip: null,\r\n    sort: null,\r\n    includeBLAxis: false\r\n};\r\n\r\nexport default Phylotree;\r\nexport {\r\n    placenodes\r\n};","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\phylotreeFolder\\branch.jsx",["108"],"import React from \"react\";\r\n\r\nimport { line } from \"d3-shape\";\r\n\r\n\r\nfunction Branch(props) {\r\n\r\n    const { xScale, yScale, colorScale, showLabel, setTooltip } = props,\r\n        { source, target } = props.link,\r\n        source_x = xScale(source.data.abstract_x),\r\n        source_y = yScale(source.data.abstract_y),\r\n        target_x = xScale(target.data.abstract_x),\r\n        target_y = yScale(target.data.abstract_y),\r\n        tracer_x2 = props.alignTips == \"right\" ?\r\n            props.width - (target.data.text_width || 0) :\r\n            target_x,\r\n        data = [\r\n            [source_x, source_y],\r\n            [source_x, target_y],\r\n            [target_x, target_y]\r\n        ],\r\n        branch_line = line()\r\n            .x(d=>d[0])\r\n            .y(d=>d[1]),\r\n        computed_branch_styles = props.branchStyler ?\r\n            props.branchStyler(target.data) :\r\n            target.data.annotation && colorScale ? {\r\n                stroke: colorScale(target.data.annotation)\r\n            } : {},\r\n        all_branch_styles = Object.assign(\r\n            {}, props.branchStyle, computed_branch_styles\r\n        ),\r\n        label_style = target.data.name && props.labelStyler ?\r\n            props.labelStyler(target.data) :\r\n            {} ;\r\n    return (<g className=\"node\"\r\n    >\r\n        <path\r\n            className=\"rp-branch\"\r\n            fill=\"none\"\r\n            d={branch_line(data)}\r\n            {...all_branch_styles}\r\n            onMouseMove={props.tooltip ? e => {\r\n                setTooltip({\r\n                    x: e.nativeEvent.offsetX,\r\n                    y: e.nativeEvent.offsetY,\r\n                    data: target.data\r\n                });\r\n            } : undefined}\r\n            onMouseOut={props.tooltip ? e => {\r\n                setTooltip(false);\r\n            } : undefined}\r\n        />\r\n        {showLabel ? <line\r\n            x1={target_x}\r\n            x2={tracer_x2}\r\n            y1={target_y}\r\n            y2={target_y}\r\n            className=\"rp-branch-tracer\"\r\n        /> : null}\r\n        {showLabel ? <text\r\n            x={tracer_x2 + 5}\r\n            y={target_y}\r\n            textAnchor=\"start\"\r\n            alignmentBaseline=\"middle\"\r\n            {...Object.assign({}, props.labelStyle, label_style)}\r\n            className=\"rp-label\"\r\n        >{target.data.name.slice(0, props.maxLabelWidth)}</text> : null}\r\n    </g>);\r\n}\r\n\r\nBranch.defaultProps = {\r\n    branchStyle: {\r\n        strokeWidth: 2,\r\n        stroke: \"grey\"\r\n    },\r\n    labelStyle: {\r\n    }\r\n}\r\n\r\nexport default Branch;","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\phylotreeFolder\\text_width.jsx",[],["109","110"],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\BrowsePage.jsx",["111"],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\DownloadPage.jsx",["112","113","114"],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\StrainForm.jsx",["115","116","117","118","119","120","121","122"],"import React, { Component } from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport '../styles/StrainForm.css';\r\nimport axios from \"axios\";\r\nimport {Form, Col, Row, Button, Modal} from \"react-bootstrap\";\r\nimport AutocompleteC from \"../components/AutocompleteC\";\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\nexport default function SearchPage() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n    const [checkedAll, setCheckedAll] = React.useState(false);\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    const [selectedA, setSelectedA] = React.useState(false);\r\n    const [checked, setChecked] = React.useState({\r\n        locus_tag: true,\r\n        attributes_x: true,\r\n        chromosome_y: true,\r\n        genomic_accession_y: true,\r\n        start_y: true,\r\n        end_y: true,\r\n        strand_y: true,\r\n        product_accession_y: true,\r\n        nonredundant_refseq_y: true,\r\n        name_y: true,\r\n        symbol_y: true,\r\n        geneid_y: true,\r\n        product_length_y: true,\r\n        protein_sequence: true,\r\n        dna_sequence: true,\r\n    });\r\n\r\n    /* ################################################ */\r\n    /* #### TOGGLES checK STATE BASED ON inputName #### */\r\n    /* ################################################ */\r\n\r\n    const toggleCheck = (inputName) => {\r\n        setChecked((prevState) => {\r\n            const newState = { ...prevState };\r\n            newState[inputName] = !prevState[inputName];\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    /* ###################################################### */\r\n    /* #### CHECKS OR UNCHECKS ALL FROM SELECT ALL CLICK #### */\r\n    /* ###################################################### */\r\n\r\n    const selectAll = (value) => {\r\n        setCheckedAll(value);\r\n        setChecked((prevState) => {\r\n            const newState = { ...prevState };\r\n            for (const inputName in newState) {\r\n                newState[inputName] = value;\r\n            }\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    /* ############################################# */\r\n    /* #### EFFECT TO CONTROL CHECKED_ALL STATE #### */\r\n    /* ############################################# */\r\n\r\n    // IF YOU CHECK BOTH INDIVIDUALLY. IT WILL ACTIVATE THE checkedAll STATE\r\n    // IF YOU UNCHECK ANY INDIVIDUALLY. IT WILL DE-ACTIVATE THE checkAll STATE\r\n\r\n    React.useEffect(() => {\r\n        let allChecked = true;\r\n        for (const inputName in checked) {\r\n            if (checked[inputName] === false) {\r\n                allChecked = false;\r\n            }\r\n        }\r\n        if (allChecked) {\r\n            setCheckedAll(true);\r\n        } else {\r\n            setCheckedAll(false);\r\n        }\r\n    }, [checked]);\r\n\r\n    /* ########################## */\r\n    /* #### RETURN STATEMENT #### */\r\n    /* ########################## */\r\n\r\n\r\n\r\n\r\n    function getData() {\r\n\r\n        let selectedC = [];\r\n\r\n        for (let key in checked) {\r\n            // check if the property/key is defined in the object itself, not in parent\r\n            if(checked[key] == true)\r\n                selectedC.push(key)\r\n        }\r\n\r\n        let selectedAS=[];\r\n        if(Array.isArray(selectedA)) {\r\n            for (let key in selectedA) {\r\n                selectedAS.push(selectedA[key]['key'])\r\n            }\r\n        }else{\r\n            selectedAS.push(selectedA['key']);\r\n        }\r\n\r\n        if(selectedC.length == 0){\r\n            setModalShow(true)\r\n            return;\r\n        }\r\n\r\n\r\n        console.log(selectedAS)\r\n        // console.log(selectedC)\r\n\r\n\r\n\r\n\r\n\r\n        const FileDownload = require('js-file-download');\r\n\r\n        const Qs = require('qs')\r\n\r\n        let params = { selectedC: selectedC, selectedAS: selectedAS }\r\n\r\n        let myAxios = axios.create({\r\n            paramsSerializer: params => Qs.stringify(params, {arrayFormat: 'repeat'})\r\n        })\r\n        myAxios.get('http://127.0.0.1:8801/api/v1/download_genes',{params})\r\n            .then((res) => {\r\n                FileDownload(res.data, 'report.csv');\r\n            }); // URL : https://path/to/api?foo=5&foo=2\r\n\r\n\r\n    }\r\n\r\n\r\n    function MyVerticallyCenteredModal(props) {\r\n        return (\r\n            <Modal\r\n                {...props}\r\n                size=\"sm\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Missing Information\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Select a field</h4>\r\n                    <p>\r\n                        Please select at least one of the fields from the list.\r\n                    </p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide}>Ok</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    const getSelected = (selected) => {\r\n        setSelectedA(selected)\r\n    }\r\n\r\n    return (\r\n            <div >\r\n                <FadeIn>\r\n                        <MyVerticallyCenteredModal\r\n                            show={modalShow}\r\n                            onHide={() => setModalShow(false)}\r\n                        />\r\n                    <Form>\r\n                        <Form.Group as={Row}>\r\n                            <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                                <p style={{textAlign: \"right\"}}></p>\r\n                            </Form.Label>\r\n                        </Form.Group>\r\n\r\n                        <AutocompleteC multipleChoice={true} true parentCallback={getSelected} apiUrl=\"http://127.0.0.1:8801/api/v1/strains\" labelText=\"Select single/multiple strain/s:\" />\r\n\r\n                        <div className=\"chkbxs\">\r\n                        <div>\r\n                            <label for=\"all\" className=\"lbl\">All</label>\r\n                            <input\r\n                                id=\"all\"\r\n                                type=\"checkbox\"\r\n                                onChange={(event) => selectAll(event.target.checked)}\r\n                                checked={checkedAll}\r\n                            />\r\n                        </div>\r\n\r\n                            <label for=\"1\" className=\"lbl\">locus_tag</label>\r\n                            <input id='1' type=\"checkbox\" name=\"locus_tag\" onChange={() => toggleCheck(\"locus_tag\")} checked={checked[\"locus_tag\"]}/>\r\n                            <label for='2' className=\"lbl\">attributes_x</label>\r\n                            <input id='2' type=\"checkbox\" name=\"attributes_x\" onChange={() => toggleCheck(\"attributes_x\")} checked={checked[\"attributes_x\"]}/>\r\n                            <label for='3' className=\"lbl\">chromosome_y</label>\r\n                            <input id='3' type=\"checkbox\" name=\"chromosome_y\" onChange={() => toggleCheck(\"chromosome_y\")} checked={checked[\"chromosome_y\"]}/>\r\n                            <label htmlFor='4' className=\"lbl\">genomic_accession_y</label>\r\n                            <input id='4' type=\"checkbox\" name=\"genomic_accession_y\" onChange={() => toggleCheck(\"genomic_accession_y\")} checked={checked[\"genomic_accession_y\"]}/>\r\n                            <label htmlFor='5' className=\"lbl\">start_y</label>\r\n                            <input id='5' type=\"checkbox\" name=\"start_y\" onChange={() => toggleCheck(\"start_y\")} checked={checked[\"start_y\"]}/>\r\n                            <label htmlFor='6' className=\"lbl\">end_y</label>\r\n                            <input id='6' type=\"checkbox\" name=\"end_y\" onChange={() => toggleCheck(\"end_y\")} checked={checked[\"end_y\"]}/>\r\n                            <label htmlFor='7' className=\"lbl\">strand_y</label>\r\n                            <input id='7' type=\"checkbox\" name=\"strand_y\" onChange={() => toggleCheck(\"strand_y\")} checked={checked[\"strand_y\"]}/>\r\n                            <label htmlFor='8' className=\"lbl\">product_accession_y</label>\r\n                            <input id='8' type=\"checkbox\" name=\"product_accession_y\" onChange={() => toggleCheck(\"product_accession_y\")} checked={checked[\"product_accession_y\"]}/>\r\n                            <label htmlFor='9' className=\"lbl\">nonredundant_refseq_y</label>\r\n                            <input id='9' type=\"checkbox\" name=\"nonredundant_refseq_y\" onChange={() => toggleCheck(\"nonredundant_refseq_y\")} checked={checked[\"nonredundant_refseq_y\"]}/>\r\n                            <label htmlFor='10' className=\"lbl\">name_y</label>\r\n                            <input id='10' type=\"checkbox\" name=\"name_y\" onChange={() => toggleCheck(\"name_y\")} checked={checked[\"name_y\"]}/>\r\n                            <label htmlFor='11' className=\"lbl\">symbol_y</label>\r\n                            <input id='11' type=\"checkbox\" name=\"symbol_y\" onChange={() => toggleCheck(\"symbol_y\")} checked={checked[\"symbol_y\"]}/>\r\n                            <label htmlFor='12' className=\"lbl\">geneid_y</label>\r\n                            <input id='12' type=\"checkbox\" name=\"geneid_y\" onChange={() => toggleCheck(\"geneid_y\")} checked={checked[\"geneid_y\"]}/>\r\n                            <label htmlFor='13' className=\"lbl\"> product_length_y</label>\r\n                            <input id='13' type=\"checkbox\" name=\"product_length_y\" onChange={() => toggleCheck(\"product_length_y\")} checked={checked[\"product_length_y\"]}/>\r\n                            <label htmlFor='14' className=\"lbl\"> protein_sequence</label>\r\n                            <input id='14' type=\"checkbox\" name=\"protein_sequence\" onChange={() => toggleCheck(\"protein_sequence\")} checked={checked[\"protein_sequence\"]}/>\r\n                            <label htmlFor='15' className=\"lbl\"> dna_sequence</label>\r\n                            <input id='15' type=\"checkbox\" name=\"dna_sequence\" onChange={() => toggleCheck(\"dna_sequence\")} checked={checked[\"dna_sequence\"]}/>\r\n                        </div>\r\n\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <Button onClick={getData}>Download</Button>\r\n                        </div>\r\n                    </Form>\r\n                </FadeIn>\r\n            </div>\r\n        )\r\n    }","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\AutocompleteC.jsx",["123"],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":11,"column":17,"nodeType":"130","endLine":11,"endColumn":53},{"ruleId":"131","severity":1,"message":"132","line":2,"column":9,"nodeType":"133","messageId":"134","endLine":2,"endColumn":13},{"ruleId":"131","severity":1,"message":"135","line":2,"column":15,"nodeType":"133","messageId":"134","endLine":2,"endColumn":19},{"ruleId":"131","severity":1,"message":"136","line":2,"column":21,"nodeType":"133","messageId":"134","endLine":2,"endColumn":30},{"ruleId":"131","severity":1,"message":"137","line":2,"column":32,"nodeType":"133","messageId":"134","endLine":2,"endColumn":35},{"ruleId":"131","severity":1,"message":"138","line":2,"column":37,"nodeType":"133","messageId":"134","endLine":2,"endColumn":40},{"ruleId":"131","severity":1,"message":"139","line":3,"column":9,"nodeType":"133","messageId":"134","endLine":3,"endColumn":13},{"ruleId":"131","severity":1,"message":"140","line":3,"column":15,"nodeType":"133","messageId":"134","endLine":3,"endColumn":19},{"ruleId":"131","severity":1,"message":"141","line":4,"column":8,"nodeType":"133","messageId":"134","endLine":4,"endColumn":14},{"ruleId":"131","severity":1,"message":"142","line":6,"column":8,"nodeType":"133","messageId":"134","endLine":6,"endColumn":18},{"ruleId":"131","severity":1,"message":"143","line":7,"column":8,"nodeType":"133","messageId":"134","endLine":7,"endColumn":14},{"ruleId":"131","severity":1,"message":"144","line":8,"column":8,"nodeType":"133","messageId":"134","endLine":8,"endColumn":14},{"ruleId":"131","severity":1,"message":"145","line":9,"column":8,"nodeType":"133","messageId":"134","endLine":9,"endColumn":14},{"ruleId":"131","severity":1,"message":"146","line":13,"column":9,"nodeType":"133","messageId":"134","endLine":13,"endColumn":14},{"ruleId":"131","severity":1,"message":"147","line":13,"column":16,"nodeType":"133","messageId":"134","endLine":13,"endColumn":22},{"ruleId":"131","severity":1,"message":"148","line":14,"column":9,"nodeType":"133","messageId":"134","endLine":14,"endColumn":24},{"ruleId":"131","severity":1,"message":"149","line":15,"column":8,"nodeType":"133","messageId":"134","endLine":15,"endColumn":21},{"ruleId":"131","severity":1,"message":"150","line":17,"column":8,"nodeType":"133","messageId":"134","endLine":17,"endColumn":18},{"ruleId":"131","severity":1,"message":"151","line":18,"column":8,"nodeType":"133","messageId":"134","endLine":18,"endColumn":23},{"ruleId":"131","severity":1,"message":"152","line":19,"column":8,"nodeType":"133","messageId":"134","endLine":19,"endColumn":13},{"ruleId":"131","severity":1,"message":"153","line":20,"column":8,"nodeType":"133","messageId":"134","endLine":20,"endColumn":27},{"ruleId":"131","severity":1,"message":"154","line":8,"column":27,"nodeType":"133","messageId":"134","endLine":8,"endColumn":40},{"ruleId":"131","severity":1,"message":"155","line":27,"column":15,"nodeType":"133","messageId":"134","endLine":27,"endColumn":21},{"ruleId":"156","severity":1,"message":"157","line":144,"column":18,"nodeType":"158","messageId":"159","endLine":144,"endColumn":20},{"ruleId":"156","severity":1,"message":"157","line":146,"column":23,"nodeType":"158","messageId":"159","endLine":146,"endColumn":25},{"ruleId":"156","severity":1,"message":"157","line":148,"column":25,"nodeType":"158","messageId":"159","endLine":148,"endColumn":27},{"ruleId":"131","severity":1,"message":"160","line":1,"column":16,"nodeType":"133","messageId":"134","endLine":1,"endColumn":24},{"ruleId":"131","severity":1,"message":"161","line":19,"column":18,"nodeType":"133","messageId":"134","endLine":19,"endColumn":25},{"ruleId":"128","severity":1,"message":"129","line":67,"column":33,"nodeType":"130","endLine":67,"endColumn":107},{"ruleId":"156","severity":1,"message":"157","line":136,"column":53,"nodeType":"158","messageId":"159","endLine":136,"endColumn":55},{"ruleId":"156","severity":1,"message":"162","line":139,"column":59,"nodeType":"158","messageId":"159","endLine":139,"endColumn":61},{"ruleId":"156","severity":1,"message":"157","line":143,"column":24,"nodeType":"158","messageId":"159","endLine":143,"endColumn":26},{"ruleId":"156","severity":1,"message":"157","line":35,"column":27,"nodeType":"158","messageId":"159","endLine":35,"endColumn":29},{"ruleId":"156","severity":1,"message":"162","line":73,"column":52,"nodeType":"158","messageId":"159","endLine":73,"endColumn":54},{"ruleId":"156","severity":1,"message":"162","line":77,"column":74,"nodeType":"158","messageId":"159","endLine":77,"endColumn":76},{"ruleId":"156","severity":1,"message":"162","line":78,"column":38,"nodeType":"158","messageId":"159","endLine":78,"endColumn":40},{"ruleId":"156","severity":1,"message":"157","line":14,"column":37,"nodeType":"158","messageId":"159","endLine":14,"endColumn":39},{"ruleId":"124","replacedBy":"163"},{"ruleId":"126","replacedBy":"164"},{"ruleId":"128","severity":1,"message":"129","line":119,"column":45,"nodeType":"130","endLine":120,"endColumn":75},{"ruleId":"131","severity":1,"message":"160","line":1,"column":16,"nodeType":"133","messageId":"134","endLine":1,"endColumn":24},{"ruleId":"131","severity":1,"message":"165","line":3,"column":9,"nodeType":"133","messageId":"134","endLine":3,"endColumn":13},{"ruleId":"131","severity":1,"message":"152","line":4,"column":8,"nodeType":"133","messageId":"134","endLine":4,"endColumn":13},{"ruleId":"131","severity":1,"message":"166","line":1,"column":17,"nodeType":"133","messageId":"134","endLine":1,"endColumn":26},{"ruleId":"131","severity":1,"message":"138","line":5,"column":15,"nodeType":"133","messageId":"134","endLine":5,"endColumn":18},{"ruleId":"131","severity":1,"message":"167","line":7,"column":10,"nodeType":"133","messageId":"134","endLine":7,"endColumn":15},{"ruleId":"131","severity":1,"message":"161","line":14,"column":18,"nodeType":"133","messageId":"134","endLine":14,"endColumn":25},{"ruleId":"131","severity":1,"message":"168","line":15,"column":21,"nodeType":"133","messageId":"134","endLine":15,"endColumn":31},{"ruleId":"131","severity":1,"message":"169","line":16,"column":11,"nodeType":"133","messageId":"134","endLine":16,"endColumn":18},{"ruleId":"156","severity":1,"message":"157","line":99,"column":29,"nodeType":"158","messageId":"159","endLine":99,"endColumn":31},{"ruleId":"156","severity":1,"message":"157","line":112,"column":29,"nodeType":"158","messageId":"159","endLine":112,"endColumn":31},{"ruleId":"170","severity":1,"message":"171","line":46,"column":7,"nodeType":"172","endLine":46,"endColumn":16,"suggestions":"173"},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'Fade' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Bell' is defined but never used.","'Book' is defined but never used.","'styles' is defined but never used.","'PhiloTreeC' is defined but never used.","'slide1' is defined but never used.","'slide2' is defined but never used.","'slide3' is defined but never used.","'faDna' is defined but never used.","'faAtom' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'AwesomeSlider' is defined but never used.","'CoreStyles' is defined but never used.","'AnimationStyles' is defined but never used.","'axios' is defined but never used.","'AwesomeSliderStyles' is defined but never used.","'faShieldVirus' is defined but never used.","'params' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'setOpen' is assigned a value but never used.","Expected '!==' and instead saw '!='.",["174"],["175"],"'Form' is defined but never used.","'Component' is defined but never used.","'sleep' is defined but never used.","'setOptions' is assigned a value but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'apiUrl'. Either include it or remove the dependency array.","ArrayExpression",["176"],"no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},"Update the dependencies array to be: [apiUrl, loading]",{"range":"179","text":"180"},[1775,1784],"[apiUrl, loading]"]