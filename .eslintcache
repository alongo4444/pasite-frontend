[{"/home/alongolo/IdeaProjects/pasite-frontend/src/index.js":"1","/home/alongolo/IdeaProjects/pasite-frontend/src/App.js":"2","/home/alongolo/IdeaProjects/pasite-frontend/src/reportWebVitals.js":"3","/home/alongolo/IdeaProjects/pasite-frontend/src/components/NavBarC.jsx":"4","/home/alongolo/IdeaProjects/pasite-frontend/src/pages/SearchPage.jsx":"5","/home/alongolo/IdeaProjects/pasite-frontend/src/pages/ResultsPage.jsx":"6","/home/alongolo/IdeaProjects/pasite-frontend/src/pages/MainPage.jsx":"7","/home/alongolo/IdeaProjects/pasite-frontend/src/components/PhiloTreeC.jsx":"8","/home/alongolo/IdeaProjects/pasite-frontend/src/components/phylotreeFolder/phylotree.jsx":"9","/home/alongolo/IdeaProjects/pasite-frontend/src/components/phylotreeFolder/branch.jsx":"10","/home/alongolo/IdeaProjects/pasite-frontend/src/components/phylotreeFolder/text_width.jsx":"11"},{"size":547,"mtime":1609575609125,"results":"12","hashOfConfig":"13"},{"size":535,"mtime":1609575609124,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1609575609126,"results":"15","hashOfConfig":"13"},{"size":2173,"mtime":1609575609124,"results":"16","hashOfConfig":"13"},{"size":9333,"mtime":1609595730132,"results":"17","hashOfConfig":"13"},{"size":1850,"mtime":1609588413555,"results":"18","hashOfConfig":"13"},{"size":10403,"mtime":1609575609126,"results":"19","hashOfConfig":"13"},{"size":6618,"mtime":1609575609124,"results":"20","hashOfConfig":"13"},{"size":7447,"mtime":1609575609125,"results":"21","hashOfConfig":"13"},{"size":2440,"mtime":1609575609125,"results":"22","hashOfConfig":"13"},{"size":163,"mtime":1609575609125,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"gsrg0m",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"/home/alongolo/IdeaProjects/pasite-frontend/src/index.js",[],["54","55"],"/home/alongolo/IdeaProjects/pasite-frontend/src/App.js",["56"],"import NavBarC from \"./components/NavBarC\";\nimport './App.css';\nimport title from './assets/images/title.png';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img className=\"title\" src={title}/>\n                <div >\n                    <Router>\n                        <NavBarC />\n                    </Router>\n                </div>\n            </header>\n        </div>\n    );\n}\nexport default App;\n","/home/alongolo/IdeaProjects/pasite-frontend/src/reportWebVitals.js",[],"/home/alongolo/IdeaProjects/pasite-frontend/src/components/NavBarC.jsx",[],"/home/alongolo/IdeaProjects/pasite-frontend/src/pages/SearchPage.jsx",["57","58","59"],"import React, {useState} from \"react\";\nimport '../styles/SearchPage.css';\nimport {Form, Col, Row, Button, OverlayTrigger, Tooltip} from \"react-bootstrap\";\nimport searchlogo from '../assets/images/research.png'\nimport {faQuestion} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport FadeIn from \"react-fade-in\";\nimport {Link} from 'react-router-dom';\nimport * as ReactDOM from 'react-dom';\nimport {MultiSelect} from '@progress/kendo-react-dropdowns';\nimport {filterBy} from '@progress/kendo-data-query';\nimport axios from \"axios\";\n\nconst CULTURE_SHIPS = [\n        {text: \"Grapes 🍇\", id: \"grapes\"},\n        {text: \"Mango 🥭\", id: \"mango\"},\n        {text: \"Strawberry 🍓\", id: \"strawberry\", disabled: true},\n        {text: \"Watermelon 🍉\", id: \"watermelon\"},\n        {text: \"Pear 🍐\", id: \"pear\"},\n        {text: \"Apple 🍎\", id: \"apple\"},\n        {text: \"Tangerine 🍊\", id: \"tangerine\"},\n        {text: \"Pineapple 🍍\", id: \"pineapple\"},\n        {text: \"Peach 🍑\", id: \"peach\"}\n]\n\nclass SearchPage extends React.Component {\n\n    state = {\n        data: CULTURE_SHIPS.slice(),\n        result_table: [],\n        value: []\n    };\n\n    handleChange = (event) => {\n        this.setState({\n            value: event.target.value\n        });\n    }\n\n    filterChange = (event) => {\n        this.setState({\n            data: filterBy(CULTURE_SHIPS.slice(), event.filter)\n        });\n    }\n\n    async getResults(){\n            axios\n                .get(\"http://127.0.0.1:8801/api/v1/genes\", { crossdomain: true })\n                .then((res) => {\n                    this.setState({result_table: res.data});\n                    console.log(this.state.result_table);\n                });\n    }\n\n    render() {\n        return (\n\n\n            <div className=\"search-form\">\n                <FadeIn>\n                    <Form>\n                        <Form.Group as={Row}>\n                            <Form.Label className=\"wrapper\" column sm=\"4\">\n                                <p style={{textAlign: \"right\"}}></p>\n                            </Form.Label>\n                            <Col sm=\"4\">\n                                <div className=\"imgr_wr\">\n                                    <img className=\"imgr\" src={searchlogo}/>\n                                </div>\n                            </Col>\n                        </Form.Group>\n\n                        <Form.Group as={Row} controlId=\"selectStrain\">\n                            <Form.Label className=\"wrapper\" column sm=\"4\">\n                                <p style={{textAlign: \"right\"}}>Select single/multiple strain/s:</p>\n                            </Form.Label>\n\n                            <Col sm=\"4\">\n                                <MultiSelect\n                                    data={this.state.data}\n                                    onChange={this.handleChange}\n                                    value={this.state.value}\n                                    textField=\"text\"\n                                    dataItemKey=\"id\"\n                                    filterable={true}\n                                    onFilterChange={this.filterChange}\n                                />\n                            </Col>\n                        </Form.Group>\n\n                        <Form.Group as={Row} controlId=\"displaySettings\">\n                            <Form.Label className=\"wrapper\" column sm=\"4\">\n                                <p style={{textAlign: \"right\"}}></p>\n                            </Form.Label>\n\n                            <>\n                                {['top'].map((placement) => (\n                                    <OverlayTrigger\n                                        key={placement}\n                                        placement={placement}\n                                        overlay={\n                                            <Tooltip id={`tooltip-${placement}`}>\n                                                Tooltip on <strong>{placement}</strong>.\n                                            </Tooltip>\n                                        }\n                                    >\n                                        <p style={{fontSize: \"11px\"}}><FontAwesomeIcon icon={faQuestion}/></p>\n                                    </OverlayTrigger>\n                                ))}\n                            </>\n\n\n                            <Col xs=\"5\">\n                                <Form.Check\n                                    label=\"Display the distribution across the tree\"\n                                />\n                            </Col>\n\n\n                            <Form.Label className=\"wrapper\" column sm=\"4\">\n                                <p style={{textAlign: \"right\"}}></p>\n                            </Form.Label>\n\n                            <>\n                                {['top'].map((placement) => (\n                                    <OverlayTrigger\n                                        key={placement}\n                                        placement={placement}\n                                        overlay={\n                                            <Tooltip id={`tooltip-${placement}`}>\n                                                Tooltip on <strong>{placement}</strong>.\n                                            </Tooltip>\n                                        }\n                                    >\n                                        <p style={{fontSize: \"11px\"}}><FontAwesomeIcon icon={faQuestion}/></p>\n                                    </OverlayTrigger>\n                                ))}\n                            </>\n                            <Col xs=\"5\">\n                                <Form.Check\n                                    label=\"Display the distribution of the system on the genome\"\n                                />\n                            </Col>\n\n                            <Form.Label className=\"wrapper\" column sm=\"4\">\n                                <p style={{textAlign: \"right\"}}></p>\n                            </Form.Label>\n\n                            <>\n                                {['top'].map((placement) => (\n                                    <OverlayTrigger\n                                        key={placement}\n                                        placement={placement}\n                                        overlay={\n                                            <Tooltip id={`tooltip-${placement}`}>\n                                                Tooltip on <strong>{placement}</strong>.\n                                            </Tooltip>\n                                        }\n                                    >\n                                        <p style={{fontSize: \"11px\"}}><FontAwesomeIcon icon={faQuestion}/></p>\n                                    </OverlayTrigger>\n                                ))}\n                            </>\n                            <Col xs=\"5\">\n                        <span>\n                        <Form.Check\n                            label=\"Display a ranked list of the clusters that correlate based on their presence/absence\"\n                        />\n                        </span>\n                            </Col>\n                        </Form.Group>\n\n                        <Form.Group as={Row} controlId=\"numResults\">\n                            <Form.Label className=\"wrapper\" column sm=\"4\">\n                                <p style={{textAlign: \"right\"}}>Number of results in page:</p>\n                            </Form.Label>\n                            <Col xs=\"auto\">\n                                <Form.Control className=\"mb-1\" as=\"select\">\n                                    <option>1</option>\n                                    <option>2</option>\n                                    <option>3</option>\n                                    <option>4</option>\n                                    <option>5</option>\n                                </Form.Control>\n                            </Col>\n\n                        </Form.Group>\n\n                        <div style={{textAlign: \"center\"}}>\n                            <Link onClick={this.getResults} to={{\n                                pathname: '/results',\n                                state: {myArrayVariableName: this.state.value} // send the selected items as a parameter to the result page\n                            }}><Button>Search</Button></Link>\n                        </div>\n                    </Form>\n                </FadeIn>\n            </div>\n        );\n    }\n}\n\n//\n// const SearchPage: React.FC = () => {\n//     const options = [\n//         {label: \"Grapes 🍇\", value: \"grapes\"},\n//         {label: \"Mango 🥭\", value: \"mango\"},\n//         {label: \"Strawberry 🍓\", value: \"strawberry\", disabled: true},\n//         {label: \"Watermelon 🍉\", value: \"watermelon\"},\n//         {label: \"Pear 🍐\", value: \"pear\"},\n//         {label: \"Apple 🍎\", value: \"apple\"},\n//         {label: \"Tangerine 🍊\", value: \"tangerine\"},\n//         {label: \"Pineapple 🍍\", value: \"pineapple\"},\n//         {label: \"Peach 🍑\", value: \"peach\"},\n//     ];\n//\n//     const [selected, setSelected] = useState([]);\n// };\n\nexport default SearchPage;","/home/alongolo/IdeaProjects/pasite-frontend/src/pages/ResultsPage.jsx",[],"/home/alongolo/IdeaProjects/pasite-frontend/src/pages/MainPage.jsx",["60","61"],"import React, {Component} from \"react\";\nimport {Card, Fade, Container, Row, Col, Carousel} from \"react-bootstrap\";\nimport {Bell, Book} from 'react-bootstrap-icons';\nimport '../styles/MainPage.css';\nimport FadeIn from 'react-fade-in';\nimport PhiloTreeC from \"../components/PhiloTreeC\"\nimport slide1 from \"../assets/images/slide1.jpg\"\nimport slide2 from \"../assets/images/slide2.jpg\"\nimport slide3 from \"../assets/images/slide3.jpg\"\nimport { faDna,faAtom } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass MainPage extends Component {\n\n\n    // componentDidMount() {\n    //     this.origcol = this.card.current.style.backgroundColor;\n    //     this.card.current.addEventListener('mouseenter', this.changeBackground_e)\n    //     this.card.current.addEventListener('mouseleave', this.changeBackground_l)\n    // }\n\n\n    render() {\n\n        return (\n            <div>\n                <FadeIn>\n                <Container style={{maxHeight: \"1080px\"}} fluid>\n                    <Row xs={1}  >\n                        <Col md={3}>\n                            <Row>\n                            <Card style={{height:\"365px\", textAlign: 'left'}}>\n                            <Card.Header><Bell/> News</Card.Header>\n                            <Card.Body>\n                                <Card.Text>\n                                    With supporting text below as a natural lead-in to additional content.\n                                </Card.Text>\n                            </Card.Body>\n                        </Card>\n                            </Row>\n                            <Row>\n                            <Card style={{height:\"365px\", textAlign: 'left'}}>\n                                <Card.Header><Book/> Cite Us</Card.Header>\n                                <Card.Body >\n                                    <Card.Text>\n                                        With supporting text below as a natural lead-in to additional content.\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                            </Row>\n                            </Col>\n\n                        <Col md={5} >\n                            <h3 className=\"desc\"> <FontAwesomeIcon icon={faDna} />  Welcome to Pseudomonas Aeruginosite</h3>\n                            <Card body className=\"main_c\">\n                                <p>Pseudomonas Aeruginosa is a commonly studied pathogen in the biological research community. Its field of research is considered as a study attraction for its diverse metabolic capacity and the danger it imposes on infections in cystic fibrosis patients. Many strains of this bacteria (~5000 strains) have different genes (~6000 genes for each strain), accompanied by a growing variety of distinct defense systems, which delegates them with persistent antimicrobial-resistance attributes and unique characteristics.\n                                    Due to this heavy amount of information gathered throughout the years by many laboratory tests and studies, the need for a cross-referenced information arose. Today there are many databases which portrait the plenty and diverse bacteria species and genes, but most of them provide services and tools for a broad diversity of bacterias and loses the advantage of specializing in defense systems in Pseudomonas Aeruginosa species. Besides, the available databases lack well-suited visualization and statistical tools for defense systems in P. Aeruginosa species and do not allow potential characteristics analysis between them and their immune systems.\n                                    This project binds data collected by biologists and existing databases into an accessible and user-friendly web-platform, which will help researchers to map between the significant amount of information on the divergent P. Aeruginosa gene's attributes and the different known defense systems. The platform will provide information retrieval tools, statistical information analysis, and visualization implementations to better understand the data involved. Also, the application will provide supplementary information and conclusions by using different machine learning, AI, and algorithms to find the connection and resemblance between the distinct defense systems and their correlation with plain genome attributes and characteristics. Also, the platform will deal with queries (by allowing simple and advanced search methods) and will retrieve data accordingly to the user's request. The goal of this project is to supply the researchers and scientists community with a web interface to consume, map, and visualize the rather complex information on P. Aeruginosa defense systems. The project will provide tools to find the similarities between P. Aeruginosa defense systems, and ultimately serve as a tool to cover the gap between the abundant amount of research information and the organized biological data in that specific field.\n                                </p>\n                                <h6 style={{textAlign: 'center'}}><FontAwesomeIcon icon={faAtom} /> <FontAwesomeIcon icon={faAtom} /> <FontAwesomeIcon icon={faAtom} />  </h6>\n                                <p>Our system objective is to map between the significant amount of information on the Pseudomonas Aeruginosa's gene's attributes and the different known defense systems (For further information regarding the subject can be found in literature survey documentation). It will aim to provide tools to the community of biologists who desire to extract divergent data about the bacteria, such as statistical information analysis, visualization realizations and information retrieval tools that will assist them in comprehending the abundant data concerning the subject. The system will also offer further information and conclusions by utilizing machine learning methods to connect between the different defense systems and their genome attributes and features. Ultimately, the system will cover the gap between the copious and constantly growing research information and the organized biological data in that given field.</p>\n                            </Card>\n                        </Col>\n\n                        <Col md={4}>\n                            <div style={{textAlign: \"right\"}}>\n                            {/*<PhiloTreeC  title={\"React PhyloTree Test\"} newick={\"(((EELA:0.150276,CONGERA:0.213019):0.230956,(EELB:0.263487,CONGERB:0.202633):0.246917):0.094785,((CAVEFISH:0.451027,(GOLDFISH:0.340495,ZEBRAFISH:0.390163):0.220565):0.067778,((((((NSAM:0.008113,NARG:0.014065):0.052991,SPUN:0.061003,(SMIC:0.027806,SDIA:0.015298,SXAN:0.046873):0.046977):0.009822,(NAUR:0.081298,(SSPI:0.023876,STIE:0.013652):0.058179):0.091775):0.073346,(MVIO:0.012271,MBER:0.039798):0.178835):0.147992,((BFNKILLIFISH:0.317455,(ONIL:0.029217,XCAU:0.084388):0.201166):0.055908,THORNYHEAD:0.252481):0.061905):0.157214,LAMPFISH:0.717196,((SCABBARDA:0.189684,SCABBARDB:0.362015):0.282263,((VIPERFISH:0.318217,BLACKDRAGON:0.109912):0.123642,LOOSEJAW:0.397100):0.287152):0.140663):0.206729):0.222485,(COELACANTH:0.558103,((CLAWEDFROG:0.441842,SALAMANDER:0.299607):0.135307,((CHAMELEON:0.771665,((PIGEON:0.150909,CHICKEN:0.172733):0.082163,ZEBRAFINCH:0.099172):0.272338):0.014055,((BOVINE:0.167569,DOLPHIN:0.157450):0.104783,ELEPHANT:0.166557):0.367205):0.050892):0.114731):0.295021)\"}/>*/}\n                                <Carousel >\n                                    <Carousel.Item >\n                                        <img style={{ borderRadius: \"15px\"}}\n                                            className=\"d-block w-100\"\n                                            src={slide1}\n                                            alt=\"First slide\"\n                                        />\n                                        <Carousel.Caption>\n                                            <div className=\"slidecaption\">\n                                                <h3 className=\"xbootstrap\">Browse</h3>\n                                                <p className=\"xbootstrap\">Different species of the Pseudomonas Aeruginosa bacteria</p>\n                                            </div>\n                                        </Carousel.Caption>\n                                    </Carousel.Item>\n                                    <Carousel.Item>\n                                        <img style={{ borderRadius: \"15px\"}}\n                                            className=\"d-block w-100\"\n                                            src={slide2}\n                                            alt=\"Third slide\"\n                                        />\n\n                                        <Carousel.Caption>\n                                            <div className=\"slidecaption\">\n                                                <h3 className=\"xbootstrap\">Discover</h3>\n                                                <p className=\"xbootstrap\">Connections between species and their connections to the defense systems</p>\n                                            </div>\n                                        </Carousel.Caption>\n                                    </Carousel.Item>\n                                    <Carousel.Item>\n                                        <img style={{ borderRadius: \"15px\"}}\n                                            className=\"d-block w-100\"\n                                            src={slide3}\n                                            alt=\"Third slide\"\n                                        />\n\n                                        <Carousel.Caption>\n                                            <div className=\"slidecaption\">\n                                                <h3 className=\"xbootstrap\">Analyze</h3>\n                                                <p className=\"xbootstrap\">New information about different genes</p>\n                                            </div>\n                                        </Carousel.Caption>\n                                    </Carousel.Item>\n                                </Carousel>\n                            </div>\n                        </Col>\n\n                    </Row>\n                </Container>\n                </FadeIn>\n            </div>\n        );\n    }\n}\n\nexport default MainPage;\n","/home/alongolo/IdeaProjects/pasite-frontend/src/components/PhiloTreeC.jsx",["62","63","64"],"import React, { Component } from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport RBButton from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faArrowLeft, faArrowUp, faArrowDown, faArrowRight,\n    faSortAmountUp, faAlignRight, faAlignLeft\n} from \"@fortawesome/free-solid-svg-icons\";\nimport '../styles/PhiloTreeC.css';\n\nimport Phylotree from \"./phylotreeFolder/phylotree.jsx\";\n\nimport \"../styles/phylotree.css\";\n\n\nfunction Button(props) {\n    return (<OverlayTrigger\n        placement=\"top\"\n        overlay={<Tooltip>\n            {props.title}\n        </Tooltip>}\n    >\n        <RBButton\n            variant=\"secondary\"\n            {...props}\n        >\n            {props.children}\n        </RBButton>\n    </OverlayTrigger>);\n}\n\nfunction HorizontalExpansionButton(props) {\n    return (<Button\n        style={{ fontSize: 10 }}\n        title=\"Expand horizontally\"\n        {...props}\n    >\n        <FontAwesomeIcon key={1} icon={faArrowLeft} />\n        <FontAwesomeIcon key={2} icon={faArrowRight} />\n    </Button>);\n}\n\nfunction HorizontalCompressionButton(props) {\n    return (<Button\n        style={{ fontSize: 10 }}\n        title=\"Compress horizontally\"\n        {...props}\n    >\n        <FontAwesomeIcon key={1} icon={faArrowRight} />\n        <FontAwesomeIcon key={2} icon={faArrowLeft} />\n    </Button>);\n}\n\nfunction VerticalExpansionButton(props) {\n    return (<Button\n        style={{fontSize: 10, display: \"flex\", flexDirection: \"column\"}}\n        title=\"Expand vertically\"\n        {...props}\n    >\n        <FontAwesomeIcon key={1} icon={faArrowUp} />\n        <FontAwesomeIcon key={2} icon={faArrowDown} />\n    </Button>);\n}\n\nfunction VerticalCompressionButton(props) {\n    return (<Button\n        style={{fontSize: 10, display: \"flex\", flexDirection: \"column\"}}\n        title=\"Compress vertically\"\n        {...props}\n    >\n        <FontAwesomeIcon key={1} icon={faArrowDown} />\n        <FontAwesomeIcon key={2} icon={faArrowUp} />\n    </Button>);\n}\n\n\nfunction AscendingSortButton(props) {\n    return (<Button\n        title=\"Sort in ascending order\"\n        {...props}\n    >\n        <FontAwesomeIcon key={1} icon={faSortAmountUp} flip=\"vertical\"/>\n    </Button>);\n}\n\n\nfunction DescendingSortButton(props) {\n    return (<Button\n        title=\"Sort in descending order\"\n        {...props}\n    >\n        <FontAwesomeIcon key={1} icon={faSortAmountUp}/>\n    </Button>);\n}\n\n\nfunction AlignTipsRightButton(props) {\n    return (<Button\n        title=\"Align tips to right\"\n        {...props}\n    >\n        <FontAwesomeIcon key={1} icon={faAlignRight}/>\n    </Button>);\n}\n\n\nfunction AlignTipsLeftButton(props) {\n    return (<Button\n        title=\"Align tips to left\"\n        {...props}\n    >\n        <FontAwesomeIcon key={1} icon={faAlignLeft}/>\n    </Button>);\n}\n\n\nclass PhiloTreeC extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tree: null,\n            width: 500,\n            height: 500,\n            alignTips: \"right\",\n            sort: null,\n            internal: false\n        };\n    }\n    componentDidMount() {\n\n    }\n    toggleDimension(dimension, direction) {\n\n        if(this.state[dimension] > 550 && direction == \"expand\"){\n            return;\n        }\n        else if(this.state[dimension] < 430 &&  direction != \"expand\"){\n            return;\n        }\n            const new_dimension = this.state[dimension] +\n            (direction == \"expand\" ? 20 : -20),\n            new_state = {};\n        new_state[dimension] = new_dimension;\n        this.setState(new_state);\n    }\n    handleSort(direction) {\n        this.setState({sort: direction});\n    }\n    alignTips(direction) {\n        this.setState({alignTips: direction});\n    }\n    render() {\n        const { padding } = this.props;\n        const { width, height } = this.state;\n        return (<div style={{textAlign: \"center\"}}>\n            <h3 className=\"title_tree\">{this.props.title}</h3>\n            <div style={{display: \"flex\", justifyContent: \"space-around\"}}>\n                <ButtonGroup>\n                    <HorizontalExpansionButton\n                        onClick={()=>this.toggleDimension(\"width\", \"expand\")} style={{ backgroundColor: \"#6A5ACD\"}}\n                    />\n                    <HorizontalCompressionButton\n                        onClick={()=>this.toggleDimension(\"width\", \"compress\")} style={{backgroundColor: \"#6A5ACD\"}}\n                    />\n                    <VerticalExpansionButton\n                        onClick={()=>this.toggleDimension(\"height\", \"expand\")} style={{backgroundColor: \"#6A5ACD\"}}\n                    />\n                    <VerticalCompressionButton\n                        onClick={()=>this.toggleDimension(\"height\", \"compress\")} style={{backgroundColor: \"#6A5ACD\"}}\n                    />\n                    <AscendingSortButton\n                        onClick={()=>this.handleSort(\"ascending\")} style={{backgroundColor: \"#6A5ACD\"}}\n                    />\n                    <DescendingSortButton\n                        onClick={()=>this.handleSort(\"descending\")} style={{backgroundColor: \"#6A5ACD\"}}\n                    />\n                    <AlignTipsLeftButton\n                        onClick={()=>this.alignTips(\"left\")} style={{backgroundColor: \"#6A5ACD\"}}\n                    />\n                    <AlignTipsRightButton\n                        onClick={()=>this.alignTips(\"right\")} style={{backgroundColor: \"#6A5ACD\"}}\n                    />\n                </ButtonGroup>\n                {/*<div>*/}\n                {/*    <input*/}\n                {/*        type='checkbox'*/}\n                {/*        onChange={()=>this.setState({internal: !this.state.internal})}*/}\n                {/*    />*/}\n                {/*    {this.state.internal ? 'Hide' : 'Show' } internal labels*/}\n                {/*</div>*/}\n            </div>\n            <svg width={width} height={height}>\n                <Phylotree\n                    width={width-2*padding}\n                    height={height-2*padding}\n                    transform={`translate(${padding}, ${padding})`}\n                    newick= {this.props.newick}\n                    alignTips={this.state.alignTips}\n                    sort={this.state.sort}\n                    internalNodeLabels={this.state.internal}\n                    includeBLAxis\n                />\n            </svg>\n        </div>);\n    }\n}\n\nPhiloTreeC.defaultProps = {\n    padding: 10\n};\n\n\nexport default PhiloTreeC;\n","/home/alongolo/IdeaProjects/pasite-frontend/src/components/phylotreeFolder/phylotree.jsx",["65","66","67","68"],"import React, { useState } from \"react\";\nimport { phylotree } from \"phylotree\";\nimport { scaleLinear, scaleOrdinal } from \"d3-scale\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport _ from \"underscore\";\nimport { AxisTop } from \"d3-react-axis\";\nimport { max } from \"d3-array\";\n\nimport Branch from \"./branch.jsx\";\nimport text_width from \"./text_width\";\n\n\nfunction x_branch_lengths(node, accessor) {\n    if (!node.parent) return 0;\n    const bl = accessor(node);\n    return  bl + node.parent.data.abstract_x;\n}\n\nfunction x_no_branch_lengths(node) {\n    return node.parent ? node.parent.data.abstract_x + 1 : 0;\n}\n\nfunction default_accessor(node){\n    return +node.data.attribute;\n}\n\nfunction sort_nodes (tree, direction) {\n    tree.traverse_and_compute (function (n) {\n        var d = 1;\n        if (n.children && n.children.length) {\n            d += max (n.children, function (d) { return d[\"count_depth\"];});\n        }\n        n[\"count_depth\"] = d;\n    });\n    const asc = direction == \"ascending\";\n    tree.resort_children (function (a,b) {\n        return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\n    });\n}\n\nfunction placenodes(tree, perform_internal_layout, accessor, sort) {\n    accessor = accessor || default_accessor;\n    if(sort) {\n        sort_nodes(tree, sort);\n    }\n    var current_leaf_height = -1,\n        unique_id = 0;\n    tree.max_x = 0;\n    const has_branch_lengths = Boolean(accessor(tree.get_tips()[0])),\n        x_branch_length = has_branch_lengths ? x_branch_lengths : x_no_branch_lengths;\n    function node_layout(node) {\n        if(!node.unique_id) {\n            unique_id = node.unique_id = unique_id + 1;\n        }\n        node.data.abstract_x = x_branch_length(node, accessor);\n        tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\n        if(node.children) {\n            node.data.abstract_y = node.children.map(node_layout)\n                .reduce( (a,b) => a + b, 0) / node.children.length;\n        } else {\n            current_leaf_height = node.data.abstract_y = current_leaf_height+1;\n        }\n        return node.data.abstract_y;\n    }\n\n    function internal_node_layout(node) {\n        unique_id = node.unique_id = unique_id + 1;\n        node.data.abstract_x = x_branch_length(node, accessor);\n        tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\n        if(!tree.is_leafnode(node)) {\n            node.children.forEach(internal_node_layout);\n        }\n        if(!node.data.abstract_y && node.data.name != \"root\") {\n            current_leaf_height = node.data.abstract_y = current_leaf_height+1;\n            tree.node_order.push(node.data.name);\n        }\n        if(node.parent && !node.parent.data.abstract_y && node.data.name != \"root\") {\n            if(node.parent.data.name != \"root\") {\n                current_leaf_height = node.parent.data.abstract_y = current_leaf_height+1;\n                tree.node_order.push(node.parent.data.name);\n            }\n        }\n        tree.max_y = Math.max(tree.max_y, current_leaf_height);\n    }\n\n    if(perform_internal_layout) {\n        tree.max_y = 0;\n        tree.node_order = [];\n        internal_node_layout(tree.nodes);\n        const root = tree.get_node_by_name(\"root\");\n        root.data.abstract_y = root.children.map(child => child.data.abstract_y)\n            .reduce((a,b)=>a+b, 0) / root.children.length;\n    } else {\n        node_layout(tree.nodes);\n        tree.max_y = current_leaf_height;\n    }\n}\n\n\nfunction getColorScale(tree, highlightBranches) {\n    if(!highlightBranches) return null;\n    if(typeof highlightBranches === \"boolean\") {\n        return tree.parsed_tags && highlightBranches ?\n            scaleOrdinal().domain(tree.parsed_tags).range(schemeCategory10) :\n            null;\n    }\n    const pairs = _.pairs(highlightBranches);\n    return scaleOrdinal()\n        .domain(pairs.map(p => p[0]))\n        .range(pairs.map(p => p[1]));\n}\n\n\nfunction Phylotree(props) {\n    const [tooltip, setTooltip] = useState(false);\n    const { width, height, maxLabelWidth } = props;\n    var{ tree, newick } = props;\n    if (!tree && !newick) {\n        return <g />;\n    } else if(!tree) {\n        tree = new phylotree(newick);\n    }\n    if(!props.skipPlacement) {\n        placenodes(tree, props.internalNodeLabels, props.accessor, props.sort);\n    }\n\n    function attachTextWidth(node) {\n        node.data.text_width = text_width(node.data.name, 14, maxLabelWidth);\n        if(node.children) node.children.forEach(attachTextWidth);\n    }\n    attachTextWidth(tree.nodes);\n    const sorted_tips = tree.get_tips().sort((a,b) => (\n        b.data.abstract_x - a.data.abstract_x\n    ));\n    var rightmost;\n    if (!props.showLabels) rightmost = width;\n    else {\n        for(let i=0; i < sorted_tips.length; i++) {\n            let tip = sorted_tips[i];\n            rightmost = width - tip.data.text_width;\n            let scale = rightmost / tip.data.abstract_x;\n            let none_cross = sorted_tips.map(tip => {\n                const tip_x = tip.data.abstract_x * scale,\n                    text_x = width - tip.data.text_width,\n                    this_doesnt_cross = Math.floor(tip_x) < Math.ceil(text_x);\n                return this_doesnt_cross;\n            }).every(x => x);\n            if(none_cross) break;\n        }\n    }\n    const x_scale = scaleLinear()\n            .domain([0, tree.max_x])\n            .range([0, rightmost]),\n        y_scale = scaleLinear()\n            .domain([0, tree.max_y])\n            .range([props.includeBLAxis ? 60 : 0, height]),\n        color_scale = getColorScale(tree, props.highlightBranches);\n    return (<g transform={props.transform}>\n        {props.includeBLAxis ? <g>\n            <text\n                x={x_scale(tree.max_x/2)}\n                y={10}\n                alignmentBaseline='middle'\n                textAnchor='middle'\n                fontFamily='Courier'\n            >\n                Substitutions per site\n            </text>\n            <AxisTop\n                transform={`translate(0, 40)`}\n                scale={x_scale}\n            />\n        </g> : null }\n        {tree.links.map(link => {\n            const source_id = link.source.unique_id,\n                target_id = link.target.unique_id,\n                key = source_id + \",\" + target_id,\n                show_label = props.internalNodeLabels ||\n                    (props.showLabels && tree.is_leafnode(link.target));\n            return (<Branch\n                key={key}\n                xScale={x_scale}\n                yScale={y_scale}\n                colorScale={color_scale}\n                link={link}\n                showLabel={show_label}\n                maxLabelWidth={maxLabelWidth}\n                width={width}\n                alignTips={props.alignTips}\n                branchStyler={props.branchStyler}\n                labelStyler={props.labelStyler}\n                tooltip={props.tooltip}\n                setTooltip={setTooltip}\n            />);\n        }) }\n        { tooltip ? <props.tooltip\n            width={props.width}\n            height={props.height}\n            {...tooltip}\n        /> : null }\n    </g>);\n}\n\nPhylotree.defaultProps = {\n    width: 500,\n    height: 500,\n    showLabels: true,\n    skipPlacement: false,\n    maxLabelWidth: 20,\n    alignTips: \"right\",\n    accessor: default_accessor,\n    branchStyler: null,\n    labelStyler: null,\n    tooltip: null,\n    sort: null,\n    includeBLAxis: false\n};\n\nexport default Phylotree;\nexport {\n    placenodes\n};","/home/alongolo/IdeaProjects/pasite-frontend/src/components/phylotreeFolder/branch.jsx",["69"],"import React from \"react\";\n\nimport { line } from \"d3-shape\";\n\n\nfunction Branch(props) {\n\n    const { xScale, yScale, colorScale, showLabel, setTooltip } = props,\n        { source, target } = props.link,\n        source_x = xScale(source.data.abstract_x),\n        source_y = yScale(source.data.abstract_y),\n        target_x = xScale(target.data.abstract_x),\n        target_y = yScale(target.data.abstract_y),\n        tracer_x2 = props.alignTips == \"right\" ?\n            props.width - (target.data.text_width || 0) :\n            target_x,\n        data = [\n            [source_x, source_y],\n            [source_x, target_y],\n            [target_x, target_y]\n        ],\n        branch_line = line()\n            .x(d=>d[0])\n            .y(d=>d[1]),\n        computed_branch_styles = props.branchStyler ?\n            props.branchStyler(target.data) :\n            target.data.annotation && colorScale ? {\n                stroke: colorScale(target.data.annotation)\n            } : {},\n        all_branch_styles = Object.assign(\n            {}, props.branchStyle, computed_branch_styles\n        ),\n        label_style = target.data.name && props.labelStyler ?\n            props.labelStyler(target.data) :\n            {} ;\n    return (<g className=\"node\"\n    >\n        <path\n            className=\"rp-branch\"\n            fill=\"none\"\n            d={branch_line(data)}\n            {...all_branch_styles}\n            onMouseMove={props.tooltip ? e => {\n                setTooltip({\n                    x: e.nativeEvent.offsetX,\n                    y: e.nativeEvent.offsetY,\n                    data: target.data\n                });\n            } : undefined}\n            onMouseOut={props.tooltip ? e => {\n                setTooltip(false);\n            } : undefined}\n        />\n        {showLabel ? <line\n            x1={target_x}\n            x2={tracer_x2}\n            y1={target_y}\n            y2={target_y}\n            className=\"rp-branch-tracer\"\n        /> : null}\n        {showLabel ? <text\n            x={tracer_x2 + 5}\n            y={target_y}\n            textAnchor=\"start\"\n            alignmentBaseline=\"middle\"\n            {...Object.assign({}, props.labelStyle, label_style)}\n            className=\"rp-label\"\n        >{target.data.name.slice(0, props.maxLabelWidth)}</text> : null}\n    </g>);\n}\n\nBranch.defaultProps = {\n    branchStyle: {\n        strokeWidth: 2,\n        stroke: \"grey\"\n    },\n    labelStyle: {\n    }\n}\n\nexport default Branch;","/home/alongolo/IdeaProjects/pasite-frontend/src/components/phylotreeFolder/text_width.jsx",[],["70","71"],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":11,"column":17,"nodeType":"78","endLine":11,"endColumn":53},{"ruleId":"79","severity":1,"message":"80","line":1,"column":16,"nodeType":"81","messageId":"82","endLine":1,"endColumn":24},{"ruleId":"79","severity":1,"message":"83","line":9,"column":13,"nodeType":"81","messageId":"82","endLine":9,"endColumn":21},{"ruleId":"76","severity":1,"message":"77","line":68,"column":37,"nodeType":"78","endLine":68,"endColumn":77},{"ruleId":"79","severity":1,"message":"84","line":2,"column":15,"nodeType":"81","messageId":"82","endLine":2,"endColumn":19},{"ruleId":"79","severity":1,"message":"85","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":18},{"ruleId":"86","severity":1,"message":"87","line":136,"column":53,"nodeType":"88","messageId":"89","endLine":136,"endColumn":55},{"ruleId":"86","severity":1,"message":"90","line":139,"column":59,"nodeType":"88","messageId":"89","endLine":139,"endColumn":61},{"ruleId":"86","severity":1,"message":"87","line":143,"column":24,"nodeType":"88","messageId":"89","endLine":143,"endColumn":26},{"ruleId":"86","severity":1,"message":"87","line":35,"column":27,"nodeType":"88","messageId":"89","endLine":35,"endColumn":29},{"ruleId":"86","severity":1,"message":"90","line":73,"column":52,"nodeType":"88","messageId":"89","endLine":73,"endColumn":54},{"ruleId":"86","severity":1,"message":"90","line":77,"column":74,"nodeType":"88","messageId":"89","endLine":77,"endColumn":76},{"ruleId":"86","severity":1,"message":"90","line":78,"column":38,"nodeType":"88","messageId":"89","endLine":78,"endColumn":40},{"ruleId":"86","severity":1,"message":"87","line":14,"column":37,"nodeType":"88","messageId":"89","endLine":14,"endColumn":39},{"ruleId":"72","replacedBy":"91"},{"ruleId":"74","replacedBy":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'Fade' is defined but never used.","'PhiloTreeC' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",["93"],["94"],"no-global-assign","no-unsafe-negation"]