[{"C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\index.js":"1","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\reportWebVitals.js":"2","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\App.js":"3","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\NavBarC.jsx":"4","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\pages\\SearchPage.jsx":"5","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\pages\\BrowsePage.jsx":"6","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\pages\\ResultsPage.jsx":"7","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\pages\\MainPage.jsx":"8","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\pages\\DownloadPage.jsx":"9","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\PhiloTreeC.jsx":"10","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\phylotreeFolder\\phylotree.jsx":"11","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\phylotreeFolder\\branch.jsx":"12","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\phylotreeFolder\\text_width.jsx":"13","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\StrainForm.jsx":"14","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\pages\\StrainCircosResultsPage.jsx":"15","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\pages\\StrainCircosPage.jsx":"16","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\AutocompleteC.jsx":"17","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\CircosStrain.jsx":"18","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\utilities\\colors.js":"19","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\GenesByDefenseForm.jsx":"20","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\DefenseSystemStrain.jsx":"21","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\Drawer.jsx":"22","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\AutocompleteCluster.jsx":"23","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\Cluster.jsx":"24","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\GenesByClusterC.jsx":"25","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\ErrorModalC.jsx":"26","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\TextOrFileUpload.jsx":"27"},{"size":731,"mtime":1616627329383,"results":"28","hashOfConfig":"29"},{"size":375,"mtime":1615311457232,"results":"30","hashOfConfig":"29"},{"size":649,"mtime":1616627329374,"results":"31","hashOfConfig":"29"},{"size":2825,"mtime":1616268438403,"results":"32","hashOfConfig":"29"},{"size":8102,"mtime":1616755578378,"results":"33","hashOfConfig":"29"},{"size":14305,"mtime":1617013662111,"results":"34","hashOfConfig":"29"},{"size":6926,"mtime":1616755578376,"results":"35","hashOfConfig":"29"},{"size":15662,"mtime":1616268438408,"results":"36","hashOfConfig":"29"},{"size":1895,"mtime":1617016855711,"results":"37","hashOfConfig":"29"},{"size":6833,"mtime":1615311457220,"results":"38","hashOfConfig":"29"},{"size":7668,"mtime":1615311457223,"results":"39","hashOfConfig":"29"},{"size":2520,"mtime":1615311457221,"results":"40","hashOfConfig":"29"},{"size":168,"mtime":1615311457224,"results":"41","hashOfConfig":"29"},{"size":11526,"mtime":1617016855707,"results":"42","hashOfConfig":"29"},{"size":580,"mtime":1617016855713,"results":"43","hashOfConfig":"29"},{"size":5351,"mtime":1616755578381,"results":"44","hashOfConfig":"29"},{"size":5055,"mtime":1617016855697,"results":"45","hashOfConfig":"29"},{"size":407,"mtime":1616755578366,"results":"46","hashOfConfig":"29"},{"size":1005,"mtime":1616627329403,"results":"47","hashOfConfig":"29"},{"size":11895,"mtime":1617016855705,"results":"48","hashOfConfig":"29"},{"size":5927,"mtime":1617016855699,"results":"49","hashOfConfig":"29"},{"size":5236,"mtime":1617021745035,"results":"50","hashOfConfig":"29"},{"size":3938,"mtime":1616840733965,"results":"51","hashOfConfig":"29"},{"size":9394,"mtime":1617013662062,"results":"52","hashOfConfig":"29"},{"size":1153,"mtime":1617016855702,"results":"53","hashOfConfig":"29"},{"size":1185,"mtime":1617016855701,"results":"54","hashOfConfig":"29"},{"size":3136,"mtime":1617016855709,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1awyk09",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"58"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"58"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"58"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"58"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"133"},"C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\index.js",[],["134","135"],"C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\App.js",["136"],"import NavBarC from \"./components/NavBarC\";\r\nimport './App.css';\r\nimport title from './assets/images/title.png';\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport 'react-minimal-side-navigation/lib/ReactMinimalSideNavigation.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <img className=\"title\" src={title}/>\r\n                <div className=\"mainDiv\">\r\n                    <Router>\r\n                        <NavBarC />\r\n                    </Router>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\nexport default App;\r\n","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\NavBarC.jsx",[],"C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\pages\\SearchPage.jsx",["137","138","139"],"import React, {useState} from \"react\";\r\nimport '../styles/SearchPage.css';\r\nimport {Form, Col, Row, Button, OverlayTrigger, Tooltip} from \"react-bootstrap\";\r\nimport searchlogo from '../assets/images/research.png'\r\nimport {faQuestion} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Link} from 'react-router-dom';\r\nimport AutocompleteC from \"../components/AutocompleteC\";\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\nexport default function SearchPage() {\r\n    const [rpp, setRpp] = React.useState(10);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const [selectedA, setSelectedA] = React.useState(false);\r\n    const loading = open && options.length === 0;\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n        (async () => {\r\n            const response = await fetch('http://127.0.0.1:8800/api/v1/strains');\r\n            await sleep(1e3); // For demo purposes.\r\n            const countries = await response.json();\r\n            if (active) {\r\n                setOptions(countries.filter(x=> x.name != null))\r\n            }\r\n\r\n        })();\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    },[loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n\r\n    const getSelected = (selected) => {\r\n        setSelectedA(selected)\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n            <FadeIn>\r\n                <Form>\r\n                    <Form.Group as={Row}>\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}></p>\r\n                        </Form.Label>\r\n                        <Col sm=\"4\">\r\n                            <div className=\"imgr_wr\">\r\n                                <img style={{display: \"inline-block\"}} className=\"imgr\" src={searchlogo}/>\r\n                            </div>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"selectStrain\">\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}>{\"Select single/multiple strain/s:\"}</p>\r\n                        </Form.Label>\r\n\r\n                        <Col sm=\"4\">\r\n                            <AutocompleteC multipleChoice={true} true parentCallback={getSelected} apiUrl=\"http://127.0.0.1:8800/api/v1/strains\"/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"displaySettings\">\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}></p>\r\n                        </Form.Label>\r\n\r\n                        <>\r\n                            {['top'].map((placement) => (\r\n                                <OverlayTrigger\r\n                                    key={placement}\r\n                                    placement={placement}\r\n                                    overlay={\r\n                                        <Tooltip id={`tooltip-${placement}`}>\r\n                                            Tooltip on <strong>{placement}</strong>.\r\n                                        </Tooltip>\r\n                                    }\r\n                                >\r\n                                    <p style={{fontSize: \"11px\"}}><FontAwesomeIcon icon={faQuestion}/></p>\r\n                                </OverlayTrigger>\r\n                            ))}\r\n                        </>\r\n\r\n\r\n                        <Col xs=\"5\">\r\n                            <Form.Check\r\n                                label=\"Display the distribution across the tree\"\r\n                            />\r\n                        </Col>\r\n\r\n\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}></p>\r\n                        </Form.Label>\r\n\r\n                        <>\r\n                            {['top'].map((placement) => (\r\n                                <OverlayTrigger\r\n                                    key={placement}\r\n                                    placement={placement}\r\n                                    overlay={\r\n                                        <Tooltip id={`tooltip-${placement}`}>\r\n                                            Tooltip on <strong>{placement}</strong>.\r\n                                        </Tooltip>\r\n                                    }\r\n                                >\r\n                                    <p style={{fontSize: \"11px\"}}><FontAwesomeIcon icon={faQuestion}/></p>\r\n                                </OverlayTrigger>\r\n                            ))}\r\n                        </>\r\n                        <Col xs=\"5\">\r\n                            <Form.Check\r\n                                label=\"Display the distribution of the system on the genome\"\r\n                            />\r\n                        </Col>\r\n\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}></p>\r\n                        </Form.Label>\r\n\r\n                        <>\r\n                            {['top'].map((placement) => (\r\n                                <OverlayTrigger\r\n                                    key={placement}\r\n                                    placement={placement}\r\n                                    overlay={\r\n                                        <Tooltip id={`tooltip-${placement}`}>\r\n                                            Tooltip on <strong>{placement}</strong>.\r\n                                        </Tooltip>\r\n                                    }\r\n                                >\r\n                                    <p style={{fontSize: \"11px\"}}><FontAwesomeIcon icon={faQuestion}/></p>\r\n                                </OverlayTrigger>\r\n                            ))}\r\n                        </>\r\n                        <Col xs=\"5\">\r\n                        <span>\r\n                        <Form.Check\r\n                            label=\"Display a ranked list of the clusters that correlate based on their presence/absence\"\r\n                        />\r\n                        </span>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"numResults\">\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}>Number of results in page:</p>\r\n                        </Form.Label>\r\n                        <Col xs=\"auto\">\r\n                            <Form.Control className=\"mb-1\" as=\"select\" value={rpp}\r\n                                          onChange={e => setRpp(e.target.value)}>\r\n                                <option>10</option>\r\n                                <option>25</option>\r\n                                <option>30</option>\r\n                                <option>50</option>\r\n                            </Form.Control>\r\n                        </Col>\r\n\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Link to={{\r\n                            pathname: '/results',\r\n                            state: {\r\n                                myArrayVariableName: selectedA, // send the selected items as a parameter to the result page\r\n                                rpp: rpp //send the number of results per page as a parameter to the result page\r\n                            }\r\n                        }}><Button>Search</Button></Link>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\pages\\BrowsePage.jsx",["140","141","142","143","144","145","146","147","148","149","150","151"],"import React, {Component, useEffect, useState} from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport axios from \"axios\";\r\nimport {TransformWrapper, TransformComponent} from \"react-zoom-pan-pinch\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {ArrowsFullscreen, ZoomIn, ZoomOut} from \"react-bootstrap-icons\";\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport Form from 'react-bootstrap/Form';\r\nimport '../styles/BrowsePage.css';\r\nimport chroma from 'chroma-js';\r\nimport {colourOptions} from '../utilities/colors';\r\nimport Select from 'react-select';\r\nimport Button from 'react-bootstrap/Button';\r\nimport '../assets/fonts/YesevaOne-Regular.ttf';\r\nimport Switch from \"react-switch\";\r\nimport AutocompleteC from \"../components/AutocompleteC\";\r\nimport MiniDrawer from \"../components/Drawer\";\r\nimport Cluster from \"../components/Cluster\";\r\n\r\nvar qs = require('qs');\r\n\r\nclass BrowsePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.cluster = React.createRef();\r\n        this.state = {\r\n            source: [],\r\n            loaded: false,\r\n            textbox: true,\r\n            textOrFile: 'Text Box',\r\n            selectedOption: [],\r\n            selectedFile: {},\r\n            selectedStrains: [],\r\n            isOpen: false,\r\n            generateType: \"defense\"\r\n        }\r\n    };\r\n\r\n    /*\r\n    load empty phylogenetic tree as default tree\r\n     */\r\n    componentDidMount() {\r\n        axios\r\n            .get(\r\n                \"http://127.0.0.1:8800/api/v1/strains/phyloTree\",\r\n                {responseType: 'arraybuffer'},\r\n            )\r\n            .then(response => {\r\n                const base64 = btoa(\r\n                    new Uint8Array(response.data).reduce(\r\n                        (data, byte) => data + String.fromCharCode(byte),\r\n                        '',\r\n                    ),\r\n                );\r\n                this.setState({source: \"data:;base64,\" + base64});\r\n                this.setState({loaded: true})\r\n            });\r\n    }\r\n\r\n    /*\r\n    compute a new tree when the user click the button \"generate tree\"\r\n    similar to the orginial function, this time - with query params.\r\n     */\r\n    computeTree = () => {\r\n        this.setState({source: []});\r\n        this.setState({loaded: false});\r\n        let systems = []\r\n        if (this.state.generateType == \"cluster\") {\r\n            console.log(\"cluster\")\r\n            return this.cluster.current.getTree(this.state.selectedFile,this.state.selectedStrains).then(response => {\r\n                const base64 = btoa(\r\n                    new Uint8Array(response.data).reduce(\r\n                        (data, byte) => data + String.fromCharCode(byte),\r\n                        '',\r\n                    ),\r\n                );\r\n                this.setState({source: \"data:;base64,\" + base64});\r\n                this.setState({loaded: true})\r\n                this.setState({selectedFile: {}})\r\n                this.setState({selectedOption: []})\r\n            }).catch((err) => console.log(err)\r\n            );\r\n\r\n        } else {\r\n            return axios\r\n                .get(\r\n                    \"http://127.0.0.1:8800/api/v1/strains/phyloTree\", {\r\n                        params: {\r\n                            systems: this.state.selectedOption.map((option) => option.label),\r\n                            subtree: this.state.selectedFile.length > 0 ? this.state.selectedFile : this.state.selectedStrains\r\n                        },\r\n                        paramsSerializer: function (params) {\r\n                            return qs.stringify(params, {arrayFormat: 'repeat'})\r\n                        },\r\n                        responseType: 'arraybuffer',\r\n                    }\r\n                )\r\n                .then(response => {\r\n                    const base64 = btoa(\r\n                        new Uint8Array(response.data).reduce(\r\n                            (data, byte) => data + String.fromCharCode(byte),\r\n                            '',\r\n                        ),\r\n                    );\r\n                    this.setState({source: \"data:;base64,\" + base64});\r\n                    this.setState({loaded: true})\r\n                    this.setState({selectedFile: {}})\r\n                    this.setState({selectedOption: []})\r\n                }).catch((err) => console.log(err)\r\n                );\r\n        }\r\n    };\r\n\r\n    /*\r\n    handle file upload and load each line to array of\r\n     integers (aka strain indexes for subtree) for subtree generating\r\n     using selectedFile state.\r\n     */\r\n    onFileChange = e => {\r\n\r\n        // Update the state\r\n        if (e.target.files.length > 0) {\r\n            e.preventDefault()\r\n            const reader = new FileReader()\r\n            console.log(e)\r\n            reader.onload = async (e) => {\r\n                const text = (e.target.result);\r\n                this.setState({selectedFile: text.split(/\\r?\\n/)});\r\n                e.target.value = null;\r\n            };\r\n            reader.readAsText(e.target.files[0])\r\n        }\r\n\r\n    };\r\n\r\n    /*\r\n    handle the values inserted to autocomplete component and\r\n    saves them in variable of subtree selectedStrains\r\n     */\r\n\r\n    handleTextBox = selected => {\r\n\r\n        // Update the state\r\n        if (selected.length > 0) {\r\n            let array = [];\r\n            Object.keys(selected).map((key, index) => (\r\n                array.push(selected[key]['index'])\r\n            ))\r\n            this.setState({selectedStrains: [...array]});\r\n        }\r\n\r\n    };\r\n\r\n    generatingTypeHandler = Gtype => {\r\n        if (Gtype == \"defense\") {\r\n            this.setState({generateType: \"defense\"})\r\n        }\r\n        if (Gtype == \"cluster\") {\r\n            this.setState({generateType: \"cluster\"})\r\n        }\r\n        if (Gtype == \"isolation\") {\r\n            this.setState({generateType: \"isolation\"})\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        /*\r\n        handles defense systems choice into selectedOptions state and save it.\r\n         */\r\n        const handleChange = selectedOption => {\r\n            if (selectedOption == null) {\r\n                selectedOption = []\r\n            }\r\n            this.setState(\r\n                {selectedOption},\r\n                () => console.log(`Option selected:`, this.state.selectedOption)\r\n            );\r\n        };\r\n        /*\r\n        color the defense systems options in the autocomplete box.\r\n        also, handles multi value selection in it.\r\n         */\r\n        const colourStyles = {\r\n            control: styles => ({...styles, backgroundColor: 'white'}),\r\n            option: (styles, {data, isDisabled, isFocused, isSelected}) => {\r\n                const color = chroma(data.color);\r\n                return {\r\n                    ...styles,\r\n                    backgroundColor: isDisabled\r\n                        ? null\r\n                        : isSelected\r\n                            ? data.color\r\n                            : isFocused\r\n                                ? color.alpha(0.1).css()\r\n                                : null,\r\n                    color: isDisabled\r\n                        ? '#ccc'\r\n                        : isSelected\r\n                            ? chroma.contrast(color, 'white') > 2\r\n                                ? 'white'\r\n                                : 'black'\r\n                            : data.color,\r\n                    cursor: isDisabled ? 'not-allowed' : 'default',\r\n\r\n                    ':active': {\r\n                        ...styles[':active'],\r\n                        backgroundColor:\r\n                            !isDisabled && (isSelected ? data.color : color.alpha(0.3).css()),\r\n                    },\r\n                };\r\n            },\r\n            multiValue: (styles, {data}) => {\r\n                const color = chroma(data.color);\r\n                return {\r\n                    ...styles,\r\n                    backgroundColor: color.alpha(0.1).css(),\r\n                };\r\n            },\r\n            multiValueLabel: (styles, {data}) => ({\r\n                ...styles,\r\n                color: data.color,\r\n            }),\r\n            multiValueRemove: (styles, {data}) => ({\r\n                ...styles,\r\n                color: data.color,\r\n                ':hover': {\r\n                    backgroundColor: data.color,\r\n                    color: 'white',\r\n                },\r\n            }),\r\n        };\r\n\r\n        /*\r\n        render the div of file upload or strain selection - according the\r\n         choice of the user (using switch).\r\n         */\r\n        const renderTextBox = () => {\r\n            if (this.state.textbox == true) {\r\n                return <AutocompleteC multipleChoice={true} apiUrl=\"http://127.0.0.1:8800/api/v1/strains/indexes\"\r\n                                      parentCallback={this.handleTextBox}/>\r\n            } else {\r\n                return <Form.Group>\r\n                    <Form.File onChange={(e) => this.onFileChange(e)} id=\"exampleFormControlFile1\"\r\n                               label=\"Please upload a file that contains list of strains\"/>\r\n                </Form.Group>;\r\n            }\r\n        }\r\n\r\n        const renderGenerateType = () => {\r\n            if (this.state.generateType == \"defense\") {\r\n                return (<Select\r\n                    closeMenuOnSelect={false}\r\n                    isMulti\r\n                    options={colourOptions}\r\n                    styles={colourStyles}\r\n                    onChange={handleChange}\r\n                />)\r\n            }\r\n            if (this.state.generateType == \"cluster\") {\r\n                return (<Cluster ref={this.cluster} />)\r\n            }\r\n        }\r\n\r\n        /*\r\n        update the state of the file upload/strain selection on change\r\n         */\r\n        const setSwitchTextBox = () => {\r\n            if (this.state.textbox == true) {\r\n                this.setState({textbox: false});\r\n                this.setState({textOrFile: 'File Upload'});\r\n\r\n            } else {\r\n                this.setState({textbox: true});\r\n                this.setState({textOrFile: 'Text Box'});\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"mainDiv\">\r\n                <FadeIn>\r\n                    <div className='rowC'>\r\n                        <div className='sidebar'>\r\n                            <div className=\"instructions\">choose a way to upload strains and create subtree:</div>\r\n                            <div className=\"textBox\">\r\n                                <div className='rowC'>\r\n                                    <Switch onChange={setSwitchTextBox} checked={this.state.textbox}/> <span\r\n                                    className=\"switch\">{this.state.textOrFile}</span>\r\n                                </div>\r\n                                <Form>\r\n                                    {renderTextBox()}\r\n                                </Form>\r\n                            </div>\r\n                            <div className=\"instructions\">Choose the Defense Systems you would like to show:</div>\r\n\r\n                            <div style={{width: \"95%\", marginLeft: \"5%\"}}>\r\n                                {renderGenerateType()}\r\n                                <br/>\r\n                                <Button onClick={() => this.computeTree()} variant=\"outline-primary\"\r\n                                        className='GenerateTree'>Generate Tree</Button>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className='Phylo_Tree'>\r\n                            <TransformWrapper\r\n                                defaultScale={1}\r\n                                defaultPositionX={200}\r\n                                defaultPositionY={100}\r\n                            >\r\n                                {({zoomIn, zoomOut, resetTransform, ...rest}) => (\r\n                                    <React.Fragment>\r\n                                        <div style={{marginLeft: \"40%\"}} className=\"tools\">\r\n                                            <IconButton onClick={zoomIn} color=\"primary\" aria-label=\"upload picture\"\r\n                                                        component=\"span\">\r\n                                                <ZoomIn/>\r\n                                            </IconButton>\r\n                                            <IconButton onClick={zoomOut} color=\"primary\" aria-label=\"upload picture\"\r\n                                                        component=\"span\">\r\n                                                <ZoomOut/>\r\n                                            </IconButton>\r\n                                            <IconButton onClick={resetTransform} color=\"primary\"\r\n                                                        aria-label=\"upload picture\"\r\n                                                        component=\"span\">\r\n                                                <ArrowsFullscreen/>\r\n                                            </IconButton>\r\n                                        </div>\r\n                                        {!this.state.loaded && (\r\n                                            <div style={{marginLeft: \"52%\"}}><Spinner animation=\"border\"\r\n                                                                                      variant=\"primary\"/>\r\n                                            </div>)}\r\n                                        <TransformComponent>\r\n\r\n\r\n                                            <img style={{\r\n                                                height: \"100%\",\r\n                                                width: \"100%\",\r\n                                            }}\r\n                                                 src={this.state.source}/>\r\n                                        </TransformComponent>\r\n                                    </React.Fragment>\r\n                                )}\r\n                            </TransformWrapper>\r\n                            <div id=\"drawer\">\r\n                                <MiniDrawer generatingTypeHandler={this.generatingTypeHandler}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </FadeIn>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default BrowsePage;\r\n\r\n","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\pages\\ResultsPage.jsx",["152","153","154","155","156"],"import React, {Component} from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport axios from \"axios\";\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport '../styles/ResultsPage.css';\r\nimport {Button, Accordion, Card} from \"react-bootstrap\";\r\nimport {faDna, faDisease, faShieldVirus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nclass ResultsPage extends Component {\r\n    state = {\r\n        result_table: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        axios\r\n            .get(\"http://127.0.0.1:8800/api/v1/genes\")\r\n            .then((res) => {\r\n                this.setState({result_table: res.data});\r\n                console.log(this.state.result_table)\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const params = this.props.history.location.state.myArrayVariableName; // get the selected items from the search page (sent from the SearchPage component)\r\n        const rowsPerPages = this.props.history.location.state.rpp; // get the selected number of results each page from previous component\r\n\r\n        const columns = [\r\n            {dataField: \"locus_tag_copy\", text: \"locus_tag\", sort: true},\r\n            {dataField: \"genomic_accession_y\", text: \"genomic_accession_y\", sort: true},\r\n            {dataField: \"geneID_y\", text: \"geneID\", sort: true},\r\n            {dataField: \"name_y\", text: \"name\", sort: true},\r\n            {dataField: \"symbol_y\", text: \"symbol\", sort: true},\r\n            {dataField: \"start_y\", text: \"start\", sort: true},\r\n            {dataField: \"end_y\", text: \"end\", sort: true},\r\n            {dataField: \"product_length_y\", text: \"product_length\", sort: true},\r\n            {dataField: \"product_accession_y\", text: \"product_accession\", sort: true},\r\n            {dataField: \"strand_y\", text: \"strand\", sort: true}\r\n        ]\r\n\r\n        const dna_char_to_color = {\r\n            'A': '#DC185D',\r\n            'E': '#B8144E',\r\n            'G': '#93103E',\r\n            'T': '#bc6383',\r\n            'F': '#DC185D',\r\n            'W': '#d01a5a',\r\n            'S': '#8A0512',\r\n            'M': '#9D0615',\r\n            'K': '#B10618',\r\n            'R': '#C5071A',\r\n            'Y': '#D9081D',\r\n            'B': '#EC091F',\r\n            'D': '#F6132A',\r\n            'I': '#F6132A',\r\n            'C': '#bc6383',\r\n            'H': '#F7263B',\r\n            'V': '#F83A4D',\r\n            'N': '#F83A4D',\r\n            'L': '#F94E5F',\r\n            'Q': '#FA7582',\r\n            'P': '#d01a5a',\r\n            'Z': '#370617'\r\n\r\n        }\r\n\r\n        const expandRow = {\r\n            renderer: (row, rowIndex) => (\r\n                <div>\r\n\r\n                    <Accordion defaultActiveKey={\"0\"}>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Accordion.Toggle className=\"acrd\" as={Button} variant=\"link\" eventKey=\"0\">\r\n                                    <FontAwesomeIcon icon={faDna}/> DNA Sequence\r\n                                </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey=\"0\">\r\n                                <Card.Body>\r\n                                    {row['dna_sequence'].split(\"\").map(char => {\r\n                                        return <span className={\"seq_c\"}\r\n                                                     style={{color: dna_char_to_color[char]}}>{`${char}`}</span>;\r\n                                    })}\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                    <FontAwesomeIcon icon={faDisease}/> Protein Sequence\r\n                                </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey=\"1\">\r\n                                <Card.Body>\r\n                                    {row['protein_sequence'].split(\"\").map(char => {\r\n                                        return <span className={\"seq_c\"}\r\n                                                     style={{color: this.colorCharProtein(char)}}>{`${char}`}</span>;\r\n                                    })}\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n\r\n                </div>\r\n            ), onlyOneExpanding: true\r\n        };\r\n\r\n\r\n        return (\r\n            <div>\r\n                <FadeIn>\r\n                    <div style={{height: \"100%\", width: \"90%\",marginLeft:\"5%\"}}>\r\n                        <BootstrapTable\r\n                            keyField=\"locus_tag_copy\"\r\n                            data={this.state.result_table}\r\n                            columns={columns} //which columns from the data to show as columns\r\n                            pagination={paginationFactory({\r\n                                sizePerPage: rowsPerPages,\r\n                                pageStartIndex: 1, // first page will be 0, default is 1\r\n                                paginationSize: 10,  // the pagination bar size, default is 5\r\n                                showTotal: true, // display pagination information\r\n                                firstPageText: '<<', // the text of first page button\r\n                                prePageText: 'Prev', // the text of previous page button\r\n                                nextPageText: 'Next', // the text of next page button\r\n                                lastPageText: '>>', // the text of last page button\r\n                                nextPageTitle: 'Go to next', // the title of next page button\r\n                                prePageTitle: 'Go to previous', // the title of previous page button\r\n                                firstPageTitle: 'Go to first', // the title of first page button\r\n                                lastPageTitle: 'Go to last', // the title of last page button\r\n                                hideSizePerPage: false, // hide the size per page dropdown\r\n                                hidePageListOnlyOnePage: true, // hide pagination bar when only one page, default is false\r\n                            })}\r\n                            expandRow={expandRow}\r\n                        />\r\n                    </div>\r\n                </FadeIn>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    colorCharProtein(char) {\r\n        if (char == 'A')\r\n            return 'red'\r\n        else if (char == 'T') {\r\n            return 'green'\r\n        } else if (char == 'G') {\r\n            return 'brown'\r\n        }\r\n        return 'blue'\r\n    }\r\n}\r\n\r\nexport default ResultsPage;","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\pages\\MainPage.jsx",["157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176"],"import React, {Component} from \"react\";\r\nimport {Card, Fade, Container, Row, Col, Carousel} from \"react-bootstrap\";\r\nimport {Bell, Book} from 'react-bootstrap-icons';\r\nimport styles from '../styles/MainPage.css';\r\nimport FadeIn from 'react-fade-in';\r\nimport PhiloTreeC from \"../components/PhiloTreeC\"\r\nimport slide1 from \"../assets/images/slide1.jpg\"\r\nimport slide2 from \"../assets/images/slide2.jpg\"\r\nimport slide3 from \"../assets/images/slide3.jpg\"\r\nimport slide4 from \"../assets/images/slide4.jpg\"\r\nimport slide5 from \"../assets/images/slide5.jpg\"\r\nimport slide6 from \"../assets/images/slide6.jpg\"\r\nimport {faDna, faAtom} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport AwesomeSlider from 'react-awesome-slider';\r\nimport 'react-awesome-slider/dist/styles.css';\r\nimport CoreStyles from 'react-awesome-slider/src/core/styles.scss';\r\nimport AnimationStyles from 'react-awesome-slider/src/styled/fold-out-animation/fold-out-animation.scss';\r\nimport axios from \"axios\";\r\nimport AwesomeSliderStyles from 'react-awesome-slider/src/styles';\r\n\r\nclass MainPage extends Component {\r\n\r\n    state = {source: null};\r\n\r\n    // componentDidMount() {\r\n    //     this.origcol = this.card.current.style.backgroundColor;\r\n    //     this.card.current.addEventListener('mouseenter', this.changeBackground_e)\r\n    //     this.card.current.addEventListener('mouseleave', this.changeBackground_l)\r\n    // }\r\n\r\n\r\n    // componentDidMount() {\r\n    //     axios\r\n    //         .get(\r\n    //             \"http://127.0.0.1:8801/api/v1/genes\",\r\n    //             { responseType: 'arraybuffer' },\r\n    //         )\r\n    //         .then(response => {\r\n    //             const base64 = btoa(\r\n    //                 new Uint8Array(response.data).reduce(\r\n    //                     (data, byte) => data + String.fromCharCode(byte),\r\n    //                     '',\r\n    //                 ),\r\n    //             );\r\n    //             this.setState({ source: \"data:;base64,\" + base64 });\r\n    //         });\r\n    // }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <FadeIn>\r\n                    {/*<Container style={{maxHeight: \"1080px\"}} fluid>*/}\r\n                    {/*    <Row xs={1}  >*/}\r\n                    {/*        <Col md={3}>*/}\r\n                    {/*            <Row >*/}\r\n                    {/*            <Card style={{textAlign: 'left'}}>*/}\r\n                    {/*            <Card.Header><Bell/> News</Card.Header>*/}\r\n                    {/*            <Card.Body className=\"sidecards\">*/}\r\n                    {/*                <Card.Text >*/}\r\n                    {/*                    With supporting text below as a natural lead-in to additional content.*/}\r\n                    {/*                </Card.Text>*/}\r\n                    {/*            </Card.Body>*/}\r\n                    {/*        </Card>*/}\r\n                    {/*            </Row>*/}\r\n                    {/*            <Row>*/}\r\n                    {/*            <Card style={{textAlign: 'left'}}>*/}\r\n                    {/*                <Card.Header><Book/> Cite Us</Card.Header>*/}\r\n                    {/*                <Card.Body className=\"sidecards\">*/}\r\n                    {/*                    <Card.Text >*/}\r\n                    {/*                        With supporting text below as a natural lead-in to additional content.*/}\r\n                    {/*                    </Card.Text>*/}\r\n                    {/*                </Card.Body>*/}\r\n                    {/*            </Card>*/}\r\n                    {/*            </Row>*/}\r\n                    {/*            </Col>*/}\r\n\r\n                    {/*        <Col md={5} >*/}\r\n                    {/*            <h3 className=\"desc\"> <FontAwesomeIcon icon={faDna} />  Welcome to Pseudomonas Aeruginosite</h3>*/}\r\n                    {/*            <Card body className=\"main_c\" style={{display: \"inline-block\"}}>*/}\r\n                    {/*                <p>Pseudomonas Aeruginosa is a commonly studied pathogen in the biological research community. Its field of research is considered as a study attraction for its diverse metabolic capacity and the danger it imposes on infections in cystic fibrosis patients. Many strains of this bacteria (~5000 strains) have different genes (~6000 genes for each strain), accompanied by a growing variety of distinct defense systems, which delegates them with persistent antimicrobial-resistance attributes and unique characteristics.*/}\r\n                    {/*                    Due to this heavy amount of information gathered throughout the years by many laboratory tests and studies, the need for a cross-referenced information arose. Today there are many databases which portrait the plenty and diverse bacteria species and genes, but most of them provide services and tools for a broad diversity of bacterias and loses the advantage of specializing in defense systems in Pseudomonas Aeruginosa species. Besides, the available databases lack well-suited visualization and statistical tools for defense systems in P. Aeruginosa species and do not allow potential characteristics analysis between them and their immune systems.*/}\r\n                    {/*                    This project binds data collected by biologists and existing databases into an accessible and user-friendly web-platform, which will help researchers to map between the significant amount of information on the divergent P. Aeruginosa gene's attributes and the different known defense systems. The platform will provide information retrieval tools, statistical information analysis, and visualization implementations to better understand the data involved. Also, the application will provide supplementary information and conclusions by using different machine learning, AI, and algorithms to find the connection and resemblance between the distinct defense systems and their correlation with plain genome attributes and characteristics. Also, the platform will deal with queries (by allowing simple and advanced search methods) and will retrieve data accordingly to the user's request. The goal of this project is to supply the researchers and scientists community with a web interface to consume, map, and visualize the rather complex information on P. Aeruginosa defense systems. The project will provide tools to find the similarities between P. Aeruginosa defense systems, and ultimately serve as a tool to cover the gap between the abundant amount of research information and the organized biological data in that specific field.*/}\r\n                    {/*                </p>*/}\r\n                    {/*                <h6 style={{textAlign: 'center'}}><FontAwesomeIcon icon={faAtom} /> <FontAwesomeIcon icon={faAtom} /> <FontAwesomeIcon icon={faAtom} />  </h6>*/}\r\n                    {/*                <p>Our system objective is to map between the significant amount of information on the Pseudomonas Aeruginosa's gene's attributes and the different known defense systems (For further information regarding the subject can be found in literature survey documentation). It will aim to provide tools to the community of biologists who desire to extract divergent data about the bacteria, such as statistical information analysis, visualization realizations and information retrieval tools that will assist them in comprehending the abundant data concerning the subject. The system will also offer further information and conclusions by utilizing machine learning methods to connect between the different defense systems and their genome attributes and features. Ultimately, the system will cover the gap between the copious and constantly growing research information and the organized biological data in that given field.</p>*/}\r\n                    {/*            </Card>*/}\r\n                    {/*        </Col>*/}\r\n\r\n                    {/*        <Col md={4}>*/}\r\n                    {/*            <div style={{textAlign: \"right\"}}>*/}\r\n                    {/*            /!*<PhiloTreeC  title={\"React PhyloTree Test\"} newick={\"(((EELA:0.150276,CONGERA:0.213019):0.230956,(EELB:0.263487,CONGERB:0.202633):0.246917):0.094785,((CAVEFISH:0.451027,(GOLDFISH:0.340495,ZEBRAFISH:0.390163):0.220565):0.067778,((((((NSAM:0.008113,NARG:0.014065):0.052991,SPUN:0.061003,(SMIC:0.027806,SDIA:0.015298,SXAN:0.046873):0.046977):0.009822,(NAUR:0.081298,(SSPI:0.023876,STIE:0.013652):0.058179):0.091775):0.073346,(MVIO:0.012271,MBER:0.039798):0.178835):0.147992,((BFNKILLIFISH:0.317455,(ONIL:0.029217,XCAU:0.084388):0.201166):0.055908,THORNYHEAD:0.252481):0.061905):0.157214,LAMPFISH:0.717196,((SCABBARDA:0.189684,SCABBARDB:0.362015):0.282263,((VIPERFISH:0.318217,BLACKDRAGON:0.109912):0.123642,LOOSEJAW:0.397100):0.287152):0.140663):0.206729):0.222485,(COELACANTH:0.558103,((CLAWEDFROG:0.441842,SALAMANDER:0.299607):0.135307,((CHAMELEON:0.771665,((PIGEON:0.150909,CHICKEN:0.172733):0.082163,ZEBRAFINCH:0.099172):0.272338):0.014055,((BOVINE:0.167569,DOLPHIN:0.157450):0.104783,ELEPHANT:0.166557):0.367205):0.050892):0.114731):0.295021)\"}/>*!/*/}\r\n                    {/*                <Carousel >*/}\r\n                    {/*                    <Carousel.Item >*/}\r\n                    {/*                        <img style={{ borderRadius: \"15px\"}}*/}\r\n                    {/*                            className=\"d-block w-100\"*/}\r\n                    {/*                            src={slide1}*/}\r\n                    {/*                            alt=\"First slide\"*/}\r\n                    {/*                        />*/}\r\n                    {/*                        <Carousel.Caption>*/}\r\n                    {/*                            <div className=\"slidecaption\">*/}\r\n                    {/*                                <h3 className=\"xbootstrap\">Browse</h3>*/}\r\n                    {/*                                <p className=\"xbootstrap\">Different species of the Pseudomonas Aeruginosa bacteria</p>*/}\r\n                    {/*                            </div>*/}\r\n                    {/*                        </Carousel.Caption>*/}\r\n                    {/*                    </Carousel.Item>*/}\r\n                    {/*                    <Carousel.Item>*/}\r\n                    {/*                        <img style={{ borderRadius: \"15px\"}}*/}\r\n                    {/*                            className=\"d-block w-100\"*/}\r\n                    {/*                            src={slide2}*/}\r\n                    {/*                            alt=\"Third slide\"*/}\r\n                    {/*                        />*/}\r\n\r\n                    {/*                        <Carousel.Caption>*/}\r\n                    {/*                            <div className=\"slidecaption\">*/}\r\n                    {/*                                <h3 className=\"xbootstrap\">Discover</h3>*/}\r\n                    {/*                                <p className=\"xbootstrap\">Connections between species and their connections to the defense systems</p>*/}\r\n                    {/*                            </div>*/}\r\n                    {/*                        </Carousel.Caption>*/}\r\n                    {/*                    </Carousel.Item>*/}\r\n                    {/*                    <Carousel.Item>*/}\r\n                    {/*                        <img style={{ borderRadius: \"15px\"}}*/}\r\n                    {/*                            className=\"d-block w-100\"*/}\r\n                    {/*                            src={slide3}*/}\r\n                    {/*                            alt=\"Third slide\"*/}\r\n                    {/*                        />*/}\r\n\r\n                    {/*                        <Carousel.Caption>*/}\r\n                    {/*                            <div className=\"slidecaption\">*/}\r\n                    {/*                                <h3 className=\"xbootstrap\">Analyze</h3>*/}\r\n                    {/*                                <p className=\"xbootstrap\">New information about different genes</p>*/}\r\n                    {/*                            </div>*/}\r\n                    {/*                        </Carousel.Caption>*/}\r\n                    {/*                    </Carousel.Item>*/}\r\n                    {/*                </Carousel>*/}\r\n                    {/*            </div>*/}\r\n                    {/*        </Col>*/}\r\n\r\n                    {/*    </Row>*/}\r\n\r\n                    {/*</Container>*/}\r\n                    <div style={{width: \"98%\", marginLeft: \"1%\"}}>\r\n                        <Carousel>\r\n                            <Carousel.Item>\r\n                                <img\r\n                                    style={{height: \"750px\", objectFit: 'cover'}}\r\n                                    className=\"d-block w-100\"\r\n                                    src={slide4}\r\n                                    alt=\"First slide\"\r\n                                />\r\n                                <Carousel.Caption>\r\n                                    <div className=\"caption_wrper\">\r\n                                    <div className=\"slidecaption\">\r\n                                        <h1>Pseudomonoas AeruginoSite</h1>\r\n                                    </div>\r\n                                    </div>\r\n                                    {/*<p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>*/}\r\n                                </Carousel.Caption>\r\n                            </Carousel.Item>\r\n                            <Carousel.Item>\r\n                                <img\r\n                                    style={{height: \"750px\", objectFit: 'cover'}}\r\n                                    className=\"d-block w-100\"\r\n                                    src={slide5}\r\n                                    alt=\"Second slide\"\r\n                                />\r\n\r\n                                <Carousel.Caption>\r\n                                    <div className=\"caption_wrper\">\r\n                                    <div className=\"slidecaption\">\r\n                                        <h3>Web-platform for exploration of the bacteria Pseudomonas Aeruginosa</h3>\r\n                                        <p>Explore strains,genes and defense systems using advanced visualization and\r\n                                            tabular tools for convenient research </p>\r\n                                    </div>\r\n                                    </div>\r\n                                </Carousel.Caption>\r\n                            </Carousel.Item>\r\n                            <Carousel.Item>\r\n                                <img\r\n                                    style={{height: \"750px\", objectFit: 'cover'}}\r\n                                    className=\"d-block w-100\"\r\n                                    src={slide6}\r\n                                    alt=\"Third slide\"\r\n                                />\r\n\r\n                                <Carousel.Caption>\r\n                                    <div className=\"caption_wrper\">\r\n                                    <div className=\"slidecaption\">\r\n                                        <h3>Contact us and Citation</h3>\r\n                                        <p>Let us know if anything is missing or any feedback</p>\r\n                                    </div>\r\n                                    </div>\r\n                                </Carousel.Caption>\r\n                            </Carousel.Item>\r\n                        </Carousel>\r\n                    </div>\r\n                </FadeIn>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainPage;\r\n","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\pages\\DownloadPage.jsx",["177","178","179","180"],"import React, {useState} from \"react\";\r\nimport '../styles/SearchPage.css';\r\nimport {Form, Col, Row, Tab, Nav} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport StrainForm from \"../components/StrainForm\"\r\nimport GenesByClusterC from \"../components/GenesByClusterC\";\r\nimport GenesByDefenseForm from \"../components/GenesByDefenseForm\";\r\n\r\nexport default function DownloadPage() {\r\n\r\n    return (\r\n                    <div style={{textAlign: \"center\"}}>\r\n\r\n                        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n                            <Row>\r\n                                <Col sm={3}>\r\n                                    <Nav variant=\"pills\" className=\"flex-column\">\r\n                                        <Nav.Item>\r\n                                            <Nav.Link eventKey=\"first\">Strain's Genes</Nav.Link>\r\n                                        </Nav.Item>\r\n                                        <Nav.Item>\r\n                                            <Nav.Link eventKey=\"second\">Genes by Defense System</Nav.Link>\r\n                                        </Nav.Item>\r\n                                    </Nav>\r\n                                </Col>\r\n                                <Col sm={9}>\r\n                                    <Tab.Content>\r\n                                        <Tab.Pane eventKey=\"first\">\r\n                                            <StrainForm/>\r\n                                        </Tab.Pane>\r\n                                        <Tab.Pane eventKey=\"second\">\r\n                                            <GenesByDefenseForm/>\r\n                                        </Tab.Pane>\r\n                                    </Tab.Content>\r\n                                </Col>\r\n                            </Row>\r\n                        </Tab.Container>\r\n                    </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\PhiloTreeC.jsx",["181","182","183"],"import React, { Component } from \"react\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\nimport RBButton from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faArrowLeft, faArrowUp, faArrowDown, faArrowRight,\r\n    faSortAmountUp, faAlignRight, faAlignLeft\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport '../styles/PhiloTreeC.css';\r\n\r\nimport Phylotree from \"./phylotreeFolder/phylotree.jsx\";\r\n\r\nimport \"../styles/phylotree.css\";\r\n\r\n\r\nfunction Button(props) {\r\n    return (<OverlayTrigger\r\n        placement=\"top\"\r\n        overlay={<Tooltip>\r\n            {props.title}\r\n        </Tooltip>}\r\n    >\r\n        <RBButton\r\n            variant=\"secondary\"\r\n            {...props}\r\n        >\r\n            {props.children}\r\n        </RBButton>\r\n    </OverlayTrigger>);\r\n}\r\n\r\nfunction HorizontalExpansionButton(props) {\r\n    return (<Button\r\n        style={{ fontSize: 10 }}\r\n        title=\"Expand horizontally\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faArrowLeft} />\r\n        <FontAwesomeIcon key={2} icon={faArrowRight} />\r\n    </Button>);\r\n}\r\n\r\nfunction HorizontalCompressionButton(props) {\r\n    return (<Button\r\n        style={{ fontSize: 10 }}\r\n        title=\"Compress horizontally\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faArrowRight} />\r\n        <FontAwesomeIcon key={2} icon={faArrowLeft} />\r\n    </Button>);\r\n}\r\n\r\nfunction VerticalExpansionButton(props) {\r\n    return (<Button\r\n        style={{fontSize: 10, display: \"flex\", flexDirection: \"column\"}}\r\n        title=\"Expand vertically\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faArrowUp} />\r\n        <FontAwesomeIcon key={2} icon={faArrowDown} />\r\n    </Button>);\r\n}\r\n\r\nfunction VerticalCompressionButton(props) {\r\n    return (<Button\r\n        style={{fontSize: 10, display: \"flex\", flexDirection: \"column\"}}\r\n        title=\"Compress vertically\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faArrowDown} />\r\n        <FontAwesomeIcon key={2} icon={faArrowUp} />\r\n    </Button>);\r\n}\r\n\r\n\r\nfunction AscendingSortButton(props) {\r\n    return (<Button\r\n        title=\"Sort in ascending order\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faSortAmountUp} flip=\"vertical\"/>\r\n    </Button>);\r\n}\r\n\r\n\r\nfunction DescendingSortButton(props) {\r\n    return (<Button\r\n        title=\"Sort in descending order\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faSortAmountUp}/>\r\n    </Button>);\r\n}\r\n\r\n\r\nfunction AlignTipsRightButton(props) {\r\n    return (<Button\r\n        title=\"Align tips to right\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faAlignRight}/>\r\n    </Button>);\r\n}\r\n\r\n\r\nfunction AlignTipsLeftButton(props) {\r\n    return (<Button\r\n        title=\"Align tips to left\"\r\n        {...props}\r\n    >\r\n        <FontAwesomeIcon key={1} icon={faAlignLeft}/>\r\n    </Button>);\r\n}\r\n\r\n\r\nclass PhiloTreeC extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tree: null,\r\n            width: 500,\r\n            height: 500,\r\n            alignTips: \"right\",\r\n            sort: null,\r\n            internal: false\r\n        };\r\n    }\r\n    componentDidMount() {\r\n\r\n    }\r\n    toggleDimension(dimension, direction) {\r\n\r\n        if(this.state[dimension] > 550 && direction == \"expand\"){\r\n            return;\r\n        }\r\n        else if(this.state[dimension] < 430 &&  direction != \"expand\"){\r\n            return;\r\n        }\r\n            const new_dimension = this.state[dimension] +\r\n            (direction == \"expand\" ? 20 : -20),\r\n            new_state = {};\r\n        new_state[dimension] = new_dimension;\r\n        this.setState(new_state);\r\n    }\r\n    handleSort(direction) {\r\n        this.setState({sort: direction});\r\n    }\r\n    alignTips(direction) {\r\n        this.setState({alignTips: direction});\r\n    }\r\n    render() {\r\n        const { padding } = this.props;\r\n        const { width, height } = this.state;\r\n        return (<div style={{textAlign: \"center\"}}>\r\n            <h3 className=\"title_tree\">{this.props.title}</h3>\r\n            <div style={{display: \"flex\", justifyContent: \"space-around\"}}>\r\n                <ButtonGroup>\r\n                    <HorizontalExpansionButton\r\n                        onClick={()=>this.toggleDimension(\"width\", \"expand\")} style={{ backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                    <HorizontalCompressionButton\r\n                        onClick={()=>this.toggleDimension(\"width\", \"compress\")} style={{backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                    <VerticalExpansionButton\r\n                        onClick={()=>this.toggleDimension(\"height\", \"expand\")} style={{backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                    <VerticalCompressionButton\r\n                        onClick={()=>this.toggleDimension(\"height\", \"compress\")} style={{backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                    <AscendingSortButton\r\n                        onClick={()=>this.handleSort(\"ascending\")} style={{backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                    <DescendingSortButton\r\n                        onClick={()=>this.handleSort(\"descending\")} style={{backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                    <AlignTipsLeftButton\r\n                        onClick={()=>this.alignTips(\"left\")} style={{backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                    <AlignTipsRightButton\r\n                        onClick={()=>this.alignTips(\"right\")} style={{backgroundColor: \"#6A5ACD\"}}\r\n                    />\r\n                </ButtonGroup>\r\n                {/*<div>*/}\r\n                {/*    <input*/}\r\n                {/*        type='checkbox'*/}\r\n                {/*        onChange={()=>this.setState({internal: !this.state.internal})}*/}\r\n                {/*    />*/}\r\n                {/*    {this.state.internal ? 'Hide' : 'Show' } internal labels*/}\r\n                {/*</div>*/}\r\n            </div>\r\n            <svg width={width} height={height}>\r\n                <Phylotree\r\n                    width={width-2*padding}\r\n                    height={height-2*padding}\r\n                    transform={`translate(${padding}, ${padding})`}\r\n                    newick= {this.props.newick}\r\n                    alignTips={this.state.alignTips}\r\n                    sort={this.state.sort}\r\n                    internalNodeLabels={this.state.internal}\r\n                    includeBLAxis\r\n                />\r\n            </svg>\r\n        </div>);\r\n    }\r\n}\r\n\r\nPhiloTreeC.defaultProps = {\r\n    padding: 10\r\n};\r\n\r\n\r\nexport default PhiloTreeC;\r\n","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\phylotreeFolder\\phylotree.jsx",["184","185","186","187"],"import React, { useState } from \"react\";\r\nimport { phylotree } from \"phylotree\";\r\nimport { scaleLinear, scaleOrdinal } from \"d3-scale\";\r\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\r\nimport _ from \"underscore\";\r\nimport { AxisTop } from \"d3-react-axis\";\r\nimport { max } from \"d3-array\";\r\n\r\nimport Branch from \"./branch.jsx\";\r\nimport text_width from \"./text_width\";\r\n\r\n\r\nfunction x_branch_lengths(node, accessor) {\r\n    if (!node.parent) return 0;\r\n    const bl = accessor(node);\r\n    return  bl + node.parent.data.abstract_x;\r\n}\r\n\r\nfunction x_no_branch_lengths(node) {\r\n    return node.parent ? node.parent.data.abstract_x + 1 : 0;\r\n}\r\n\r\nfunction default_accessor(node){\r\n    return +node.data.attribute;\r\n}\r\n\r\nfunction sort_nodes (tree, direction) {\r\n    tree.traverse_and_compute (function (n) {\r\n        var d = 1;\r\n        if (n.children && n.children.length) {\r\n            d += max (n.children, function (d) { return d[\"count_depth\"];});\r\n        }\r\n        n[\"count_depth\"] = d;\r\n    });\r\n    const asc = direction == \"ascending\";\r\n    tree.resort_children (function (a,b) {\r\n        return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\r\n    });\r\n}\r\n\r\nfunction placenodes(tree, perform_internal_layout, accessor, sort) {\r\n    accessor = accessor || default_accessor;\r\n    if(sort) {\r\n        sort_nodes(tree, sort);\r\n    }\r\n    var current_leaf_height = -1,\r\n        unique_id = 0;\r\n    tree.max_x = 0;\r\n    const has_branch_lengths = Boolean(accessor(tree.get_tips()[0])),\r\n        x_branch_length = has_branch_lengths ? x_branch_lengths : x_no_branch_lengths;\r\n    function node_layout(node) {\r\n        if(!node.unique_id) {\r\n            unique_id = node.unique_id = unique_id + 1;\r\n        }\r\n        node.data.abstract_x = x_branch_length(node, accessor);\r\n        tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\n        if(node.children) {\r\n            node.data.abstract_y = node.children.map(node_layout)\r\n                .reduce( (a,b) => a + b, 0) / node.children.length;\r\n        } else {\r\n            current_leaf_height = node.data.abstract_y = current_leaf_height+1;\r\n        }\r\n        return node.data.abstract_y;\r\n    }\r\n\r\n    function internal_node_layout(node) {\r\n        unique_id = node.unique_id = unique_id + 1;\r\n        node.data.abstract_x = x_branch_length(node, accessor);\r\n        tree.max_x = Math.max(tree.max_x, node.data.abstract_x);\r\n        if(!tree.is_leafnode(node)) {\r\n            node.children.forEach(internal_node_layout);\r\n        }\r\n        if(!node.data.abstract_y && node.data.name != \"root\") {\r\n            current_leaf_height = node.data.abstract_y = current_leaf_height+1;\r\n            tree.node_order.push(node.data.name);\r\n        }\r\n        if(node.parent && !node.parent.data.abstract_y && node.data.name != \"root\") {\r\n            if(node.parent.data.name != \"root\") {\r\n                current_leaf_height = node.parent.data.abstract_y = current_leaf_height+1;\r\n                tree.node_order.push(node.parent.data.name);\r\n            }\r\n        }\r\n        tree.max_y = Math.max(tree.max_y, current_leaf_height);\r\n    }\r\n\r\n    if(perform_internal_layout) {\r\n        tree.max_y = 0;\r\n        tree.node_order = [];\r\n        internal_node_layout(tree.nodes);\r\n        const root = tree.get_node_by_name(\"root\");\r\n        root.data.abstract_y = root.children.map(child => child.data.abstract_y)\r\n            .reduce((a,b)=>a+b, 0) / root.children.length;\r\n    } else {\r\n        node_layout(tree.nodes);\r\n        tree.max_y = current_leaf_height;\r\n    }\r\n}\r\n\r\n\r\nfunction getColorScale(tree, highlightBranches) {\r\n    if(!highlightBranches) return null;\r\n    if(typeof highlightBranches === \"boolean\") {\r\n        return tree.parsed_tags && highlightBranches ?\r\n            scaleOrdinal().domain(tree.parsed_tags).range(schemeCategory10) :\r\n            null;\r\n    }\r\n    const pairs = _.pairs(highlightBranches);\r\n    return scaleOrdinal()\r\n        .domain(pairs.map(p => p[0]))\r\n        .range(pairs.map(p => p[1]));\r\n}\r\n\r\n\r\nfunction Phylotree(props) {\r\n    const [tooltip, setTooltip] = useState(false);\r\n    const { width, height, maxLabelWidth } = props;\r\n    var{ tree, newick } = props;\r\n    if (!tree && !newick) {\r\n        return <g />;\r\n    } else if(!tree) {\r\n        tree = new phylotree(newick);\r\n    }\r\n    if(!props.skipPlacement) {\r\n        placenodes(tree, props.internalNodeLabels, props.accessor, props.sort);\r\n    }\r\n\r\n    function attachTextWidth(node) {\r\n        node.data.text_width = text_width(node.data.name, 14, maxLabelWidth);\r\n        if(node.children) node.children.forEach(attachTextWidth);\r\n    }\r\n    attachTextWidth(tree.nodes);\r\n    const sorted_tips = tree.get_tips().sort((a,b) => (\r\n        b.data.abstract_x - a.data.abstract_x\r\n    ));\r\n    var rightmost;\r\n    if (!props.showLabels) rightmost = width;\r\n    else {\r\n        for(let i=0; i < sorted_tips.length; i++) {\r\n            let tip = sorted_tips[i];\r\n            rightmost = width - tip.data.text_width;\r\n            let scale = rightmost / tip.data.abstract_x;\r\n            let none_cross = sorted_tips.map(tip => {\r\n                const tip_x = tip.data.abstract_x * scale,\r\n                    text_x = width - tip.data.text_width,\r\n                    this_doesnt_cross = Math.floor(tip_x) < Math.ceil(text_x);\r\n                return this_doesnt_cross;\r\n            }).every(x => x);\r\n            if(none_cross) break;\r\n        }\r\n    }\r\n    const x_scale = scaleLinear()\r\n            .domain([0, tree.max_x])\r\n            .range([0, rightmost]),\r\n        y_scale = scaleLinear()\r\n            .domain([0, tree.max_y])\r\n            .range([props.includeBLAxis ? 60 : 0, height]),\r\n        color_scale = getColorScale(tree, props.highlightBranches);\r\n    return (<g transform={props.transform}>\r\n        {props.includeBLAxis ? <g>\r\n            <text\r\n                x={x_scale(tree.max_x/2)}\r\n                y={10}\r\n                alignmentBaseline='middle'\r\n                textAnchor='middle'\r\n                fontFamily='Courier'\r\n            >\r\n                Substitutions per site\r\n            </text>\r\n            <AxisTop\r\n                transform={`translate(0, 40)`}\r\n                scale={x_scale}\r\n            />\r\n        </g> : null }\r\n        {tree.links.map(link => {\r\n            const source_id = link.source.unique_id,\r\n                target_id = link.target.unique_id,\r\n                key = source_id + \",\" + target_id,\r\n                show_label = props.internalNodeLabels ||\r\n                    (props.showLabels && tree.is_leafnode(link.target));\r\n            return (<Branch\r\n                key={key}\r\n                xScale={x_scale}\r\n                yScale={y_scale}\r\n                colorScale={color_scale}\r\n                link={link}\r\n                showLabel={show_label}\r\n                maxLabelWidth={maxLabelWidth}\r\n                width={width}\r\n                alignTips={props.alignTips}\r\n                branchStyler={props.branchStyler}\r\n                labelStyler={props.labelStyler}\r\n                tooltip={props.tooltip}\r\n                setTooltip={setTooltip}\r\n            />);\r\n        }) }\r\n        { tooltip ? <props.tooltip\r\n            width={props.width}\r\n            height={props.height}\r\n            {...tooltip}\r\n        /> : null }\r\n    </g>);\r\n}\r\n\r\nPhylotree.defaultProps = {\r\n    width: 500,\r\n    height: 500,\r\n    showLabels: true,\r\n    skipPlacement: false,\r\n    maxLabelWidth: 20,\r\n    alignTips: \"right\",\r\n    accessor: default_accessor,\r\n    branchStyler: null,\r\n    labelStyler: null,\r\n    tooltip: null,\r\n    sort: null,\r\n    includeBLAxis: false\r\n};\r\n\r\nexport default Phylotree;\r\nexport {\r\n    placenodes\r\n};","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\phylotreeFolder\\branch.jsx",["188"],"import React from \"react\";\r\n\r\nimport { line } from \"d3-shape\";\r\n\r\n\r\nfunction Branch(props) {\r\n\r\n    const { xScale, yScale, colorScale, showLabel, setTooltip } = props,\r\n        { source, target } = props.link,\r\n        source_x = xScale(source.data.abstract_x),\r\n        source_y = yScale(source.data.abstract_y),\r\n        target_x = xScale(target.data.abstract_x),\r\n        target_y = yScale(target.data.abstract_y),\r\n        tracer_x2 = props.alignTips == \"right\" ?\r\n            props.width - (target.data.text_width || 0) :\r\n            target_x,\r\n        data = [\r\n            [source_x, source_y],\r\n            [source_x, target_y],\r\n            [target_x, target_y]\r\n        ],\r\n        branch_line = line()\r\n            .x(d=>d[0])\r\n            .y(d=>d[1]),\r\n        computed_branch_styles = props.branchStyler ?\r\n            props.branchStyler(target.data) :\r\n            target.data.annotation && colorScale ? {\r\n                stroke: colorScale(target.data.annotation)\r\n            } : {},\r\n        all_branch_styles = Object.assign(\r\n            {}, props.branchStyle, computed_branch_styles\r\n        ),\r\n        label_style = target.data.name && props.labelStyler ?\r\n            props.labelStyler(target.data) :\r\n            {} ;\r\n    return (<g className=\"node\"\r\n    >\r\n        <path\r\n            className=\"rp-branch\"\r\n            fill=\"none\"\r\n            d={branch_line(data)}\r\n            {...all_branch_styles}\r\n            onMouseMove={props.tooltip ? e => {\r\n                setTooltip({\r\n                    x: e.nativeEvent.offsetX,\r\n                    y: e.nativeEvent.offsetY,\r\n                    data: target.data\r\n                });\r\n            } : undefined}\r\n            onMouseOut={props.tooltip ? e => {\r\n                setTooltip(false);\r\n            } : undefined}\r\n        />\r\n        {showLabel ? <line\r\n            x1={target_x}\r\n            x2={tracer_x2}\r\n            y1={target_y}\r\n            y2={target_y}\r\n            className=\"rp-branch-tracer\"\r\n        /> : null}\r\n        {showLabel ? <text\r\n            x={tracer_x2 + 5}\r\n            y={target_y}\r\n            textAnchor=\"start\"\r\n            alignmentBaseline=\"middle\"\r\n            {...Object.assign({}, props.labelStyle, label_style)}\r\n            className=\"rp-label\"\r\n        >{target.data.name.slice(0, props.maxLabelWidth)}</text> : null}\r\n    </g>);\r\n}\r\n\r\nBranch.defaultProps = {\r\n    branchStyle: {\r\n        strokeWidth: 2,\r\n        stroke: \"grey\"\r\n    },\r\n    labelStyle: {\r\n    }\r\n}\r\n\r\nexport default Branch;","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\phylotreeFolder\\text_width.jsx",[],"C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\StrainForm.jsx",["189","190","191","192","193","194","195","196"],"import React, { Component } from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport '../styles/StrainForm.css';\r\nimport axios from \"axios\";\r\nimport {Form, Col, Row, Button, Modal} from \"react-bootstrap\";\r\nimport AutocompleteC from \"../components/AutocompleteC\";\r\nimport TextOrFileUpload from \"./TextOrFileUpload\";\r\nimport ErrorModalC from \"./ErrorModalC\";\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\nexport default function StrainForm() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n    const [checkedAll, setCheckedAll] = React.useState(false);\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    const [selectedA, setSelectedA] = React.useState(false);\r\n    const [checked, setChecked] = React.useState({\r\n        genomic_accession: true,\r\n        start_g: true,\r\n        end_g: true,\r\n        strand: true,\r\n        attributes_x: true,\r\n        product_accession: true,\r\n        nonredundant_refseq: true,\r\n        name: true\r\n    });\r\n    const childErr = React.createRef();\r\n\r\n    /* ################################################ */\r\n    /* #### TOGGLES checK STATE BASED ON inputName #### */\r\n    /* ################################################ */\r\n\r\n    const toggleCheck = (inputName) => {\r\n        setChecked((prevState) => {\r\n            const newState = { ...prevState };\r\n            newState[inputName] = !prevState[inputName];\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    /* ###################################################### */\r\n    /* #### CHECKS OR UNCHECKS ALL FROM SELECT ALL CLICK #### */\r\n    /* ###################################################### */\r\n\r\n    const selectAll = (value) => {\r\n        setCheckedAll(value);\r\n        setChecked((prevState) => {\r\n            const newState = { ...prevState };\r\n            for (const inputName in newState) {\r\n                newState[inputName] = value;\r\n            }\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    /* ############################################# */\r\n    /* #### EFFECT TO CONTROL CHECKED_ALL STATE #### */\r\n    /* ############################################# */\r\n\r\n    // IF YOU CHECK BOTH INDIVIDUALLY. IT WILL ACTIVATE THE checkedAll STATE\r\n    // IF YOU UNCHECK ANY INDIVIDUALLY. IT WILL DE-ACTIVATE THE checkAll STATE\r\n\r\n    React.useEffect(() => {\r\n        let allChecked = true;\r\n        for (const inputName in checked) {\r\n            if (checked[inputName] === false) {\r\n                allChecked = false;\r\n            }\r\n        }\r\n        if (allChecked) {\r\n            setCheckedAll(true);\r\n        } else {\r\n            setCheckedAll(false);\r\n        }\r\n    }, [checked]);\r\n\r\n    /* ########################## */\r\n    /* #### RETURN STATEMENT #### */\r\n    /* ########################## */\r\n\r\n\r\n\r\n\r\n    function getData() {\r\n\r\n        let selectedC = [];\r\n\r\n        for (let key in checked) {\r\n            // check if the property/key is defined in the object itself, not in parent\r\n            if(checked[key] == true)\r\n                selectedC.push(key)\r\n        }\r\n\r\n        let selectedAS=[];\r\n        if(Array.isArray(selectedA)) {\r\n            for (let key in selectedA) {\r\n                selectedAS.push(selectedA[key]['key'])\r\n            }\r\n        }else{\r\n            selectedAS.push(selectedA['key']);\r\n        }\r\n\r\n        if(selectedC.length == 0){\r\n            setModalShow(true)\r\n            return;\r\n        }\r\n\r\n\r\n        console.log(selectedAS)\r\n        // console.log(selectedC)\r\n\r\n\r\n        const FileDownload = require('js-file-download');\r\n\r\n        const Qs = require('qs')\r\n\r\n        let params = { selectedC: selectedC, selectedAS: selectedAS }\r\n\r\n        let myAxios = axios.create({\r\n            paramsSerializer: params => Qs.stringify(params, {arrayFormat: 'repeat'})\r\n        })\r\n            myAxios.get('http://127.0.0.1:8800/api/v1/genes/download_genes', {params})\r\n                .then((res) => {\r\n                    FileDownload(res.data, 'report.csv');\r\n                }).catch(function (error) {childErr.current.handleOpen()});\r\n    }\r\n\r\n\r\n    function MyVerticallyCenteredModal(props) {\r\n        return (\r\n            <Modal\r\n                {...props}\r\n                size=\"sm\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Missing Information\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Select a field</h4>\r\n                    <p>\r\n                        Please select at least one of the fields from the list.\r\n                    </p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide}>Ok</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    const getSelected = (selected) => {\r\n        setSelectedA(selected)\r\n    }\r\n\r\n    /*\r\nhandle file upload and load each line to array of\r\nintegers (aka strain indexes for subtree) for subtree generating\r\nusing selectedFile state.\r\n*/\r\n    const onFileChange = (e) => {\r\n\r\n        // Update the state\r\n        if (e.target.files.length > 0) {\r\n            e.preventDefault()\r\n            const reader = new FileReader()\r\n            console.log(e)\r\n            reader.onload = async (e) => {\r\n                const text = (e.target.result);\r\n                let ts = text.split(/\\r?\\n/);\r\n                let selectedAS=[];\r\n                let id = 0;\r\n                for (let key in ts) {\r\n                    selectedAS.push({'name':ts[key], 'id': id});\r\n                    id++;\r\n                    // selectedAS[key]['name'].push(ts[key]['name'])\r\n                }\r\n\r\n\r\n                setSelectedA(selectedAS)\r\n                // this.setState({selectedFile: text.split(/\\r?\\n/)});\r\n                e.target.value = null;\r\n            };\r\n            reader.readAsText(e.target.files[0])\r\n        }\r\n    };\r\n\r\n    return (\r\n            <div >\r\n                <FadeIn>\r\n                        <MyVerticallyCenteredModal\r\n                            show={modalShow}\r\n                            onHide={() => setModalShow(false)}\r\n                        />\r\n                    <Form>\r\n                        <Form.Group as={Row}>\r\n                            <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                                <p style={{textAlign: \"right\"}}></p>\r\n                            </Form.Label>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Row} controlId=\"selectStrain\">\r\n                            <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                                <p style={{textAlign: \"right\"}}>{\"Select single/multiple strain/s:\"}</p>\r\n                            </Form.Label>\r\n\r\n                            <Col sm=\"4\">\r\n                                {/*<AutocompleteC multipleChoice={true} true parentCallback={getSelected} apiUrl=\"http://127.0.0.1:8800/api/v1/strains\"/>*/}\r\n                                <TextOrFileUpload apiUrl=\"http://127.0.0.1:8800/api/v1/strains\" multipleChoice={true} parentFileChangeCallback={onFileChange} parentHandleTextBox={getSelected} label=\"Please upload a file that contains a list of strains\r\n                            separated by new lines (/n)\" />\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n\r\n                        <div className=\"chkbxs\">\r\n                        <div>\r\n                            <label for=\"all\" className=\"lbl\">All</label>\r\n                            <input\r\n                                id=\"all\"\r\n                                type=\"checkbox\"\r\n                                onChange={(event) => selectAll(event.target.checked)}\r\n                                checked={checkedAll}\r\n                            />\r\n                        </div>\r\n\r\n                            <label htmlFor='2' className=\"lbl\">genomic_accession</label>\r\n                            <input id='2' type=\"checkbox\" name=\"genomic_accession\"\r\n                                   onChange={() => toggleCheck(\"genomic_accession\")}\r\n                                   checked={checked[\"genomic_accession\"]}/>\r\n                            <label htmlFor='3' className=\"lbl\">start_g</label>\r\n                            <input id='3' type=\"checkbox\" name=\"start_g\" onChange={() => toggleCheck(\"start_g\")}\r\n                                   checked={checked[\"start_g\"]}/>\r\n                            <label htmlFor='4' className=\"lbl\">end_g</label>\r\n                            <input id='4' type=\"checkbox\" name=\"end_g\" onChange={() => toggleCheck(\"end_g\")}\r\n                                   checked={checked[\"end_g\"]}/>\r\n                            <label htmlFor='5' className=\"lbl\">strand</label>\r\n                            <input id='5' type=\"checkbox\" name=\"strand\" onChange={() => toggleCheck(\"strand\")}\r\n                                   checked={checked[\"strand\"]}/>\r\n                            <label htmlFor='6' className=\"lbl\">attributes_x</label>\r\n                            <input id='6' type=\"checkbox\" name=\"attributes_x\"\r\n                                   onChange={() => toggleCheck(\"attributes_x\")} checked={checked[\"attributes_x\"]}/>\r\n                            <label htmlFor='7' className=\"lbl\">product_accession</label>\r\n                            <input id='7' type=\"checkbox\" name=\"product_accession\"\r\n                                   onChange={() => toggleCheck(\"product_accession\")}\r\n                                   checked={checked[\"product_accession\"]}/>\r\n                            <label htmlFor='8' className=\"lbl\">nonredundant_refseq</label>\r\n                            <input id='8' type=\"checkbox\" name=\"nonredundant_refseq\"\r\n                                   onChange={() => toggleCheck(\"nonredundant_refseq\")}\r\n                                   checked={checked[\"nonredundant_refseq\"]}/>\r\n                            <label htmlFor='9' className=\"lbl\">name</label>\r\n                            <input id='9' type=\"checkbox\" name=\"name\" onChange={() => toggleCheck(\"name\")}\r\n                                   checked={checked[\"name\"]}/>\r\n                        </div>\r\n\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <Button onClick={getData}>Download</Button>\r\n                        </div>\r\n                    </Form>\r\n                    {/*<Modal show={show} onHide={handleClose}>*/}\r\n                    {/*    <Modal.Header closeButton>*/}\r\n                    {/*        <Modal.Title>Modal heading</Modal.Title>*/}\r\n                    {/*    </Modal.Header>*/}\r\n                    {/*    <Modal.Body>There is a problem with the server request. Sorry for the inconvenience.</Modal.Body>*/}\r\n                    {/*    <Modal.Footer>*/}\r\n                    {/*        <Button variant=\"secondary\" onClick={handleClose}>*/}\r\n                    {/*            Close*/}\r\n                    {/*        </Button>*/}\r\n                    {/*    </Modal.Footer>*/}\r\n                    {/*</Modal>*/}\r\n                </FadeIn>\r\n                <ErrorModalC open={false} ref={childErr}/>\r\n            </div>\r\n        )\r\n    }","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\pages\\StrainCircosResultsPage.jsx",["197","198"],"import React, {Component, useState, useRef} from \"react\";\r\nimport CircosStrain from \"../components/CircosStrain\";\r\nimport DefenseSystemStrain from \"../components/DefenseSystemStrain\"\r\n\r\nclass StrainCircosResultsPage extends Component {\r\n\r\n    state = {source: null};\r\n\r\n//\r\n    render() {\r\n        const svn = this.props.history.location.state.strainVariableName;\r\n        return(\r\n            <div>\r\n                <CircosStrain svnn={svn} />\r\n                <DefenseSystemStrain svnn={svn}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StrainCircosResultsPage;","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\pages\\StrainCircosPage.jsx",["199","200","201","202","203","204","205","206","207","208"],"import React, {useState} from \"react\";\r\nimport {Form, Col, Row, Button, OverlayTrigger, Tooltip} from \"react-bootstrap\";\r\nimport searchlogo from '../assets/images/research.png'\r\nimport {faQuestion} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Link} from 'react-router-dom';\r\nimport * as ReactDOM from 'react-dom';\r\nimport {MultiSelect} from '@progress/kendo-react-dropdowns';\r\nimport {filterBy} from '@progress/kendo-data-query';\r\nimport axios from \"axios\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\nexport default function StrainCircosPage() {\r\n    const [strainVariableName, setStrainVariableName] = React.useState(\"\")\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n        (async () => {\r\n            const response = await fetch('http://127.0.0.1:8800/api/v1/strains');\r\n            await sleep(1e3); // For demo purposes.\r\n            const strains = await response.json();\r\n            if (active) {\r\n                setOptions(strains.filter(x=> x.name != null))\r\n            }\r\n\r\n        })();\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    },[loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n            <FadeIn>\r\n                <Form>\r\n                    <Form.Group as={Row}>\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}></p>\r\n                        </Form.Label>\r\n                        <Col sm=\"4\">\r\n                            <div className=\"imgr_wr\">\r\n                                <img style={{display: \"inline-block\"}} className=\"imgr\" src={searchlogo}/>\r\n                            </div>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"selectStrain\">\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}>Select a strain</p>\r\n                        </Form.Label>\r\n\r\n                        <Col sm=\"4\">\r\n                            <Autocomplete\r\n                                id=\"asynchronous-demo\"\r\n                                multiple={false}\r\n                                style={{ width: 800 }}\r\n                                open={open}\r\n                                onOpen={() => {\r\n                                    setOpen(true);\r\n                                }}\r\n                                onClose={() => {\r\n                                    setOpen(false);\r\n                                }}\r\n                                getOptionSelected={(option, value) => option.name === value.name}\r\n                                getOptionLabel={(option) => option.name}\r\n                                options={options}\r\n                                loading={loading}\r\n                                onInputChange={(event,newInputEvent) =>\r\n                                {\r\n                                    setStrainVariableName(newInputEvent);\r\n                                }}\r\n                                renderInput={(params) => (\r\n                                    <TextField\r\n                                        {...params}\r\n                                        label=\"Choose a strain...\"\r\n                                        variant=\"outlined\"\r\n                                        InputProps={{\r\n                                            ...params.InputProps,\r\n                                            endAdornment: (\r\n                                                <React.Fragment>\r\n                                                    {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                                                    {params.InputProps.endAdornment}\r\n                                                </React.Fragment>\r\n                                            ),\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Link to={{\r\n                            pathname: '/resultsCircosStrain',\r\n                            state: {\r\n                                strainVariableName: strainVariableName, // send the selected strain to the result display page\r\n                            }\r\n                        }}><Button>Display</Button></Link>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n        </div>\r\n    );\r\n}","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\AutocompleteC.jsx",["209","210","211","212"],"import React from \"react\";\r\nimport '../styles/SearchPage.css';\r\nimport {Form, Col, Row, Modal, Button} from \"react-bootstrap\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport ErrorModalC from \"./ErrorModalC\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\n\r\n//apiUrl - the url of the requested HTML call to the backend (i.e: http://127.0.0.1:8800/api/v1/strains). The backend need to return list of dictionaries in the format: [{name: \"a\", key: \"0\"},...]\r\n//parentCallback - the callback that will be called in the parent which holds this component. The parent will receive the current selected objects for each change on this component.  See DownloadPage for example or ask Alon.\r\n//multipleChoice - determines the multiselect option, 'true' means multiselect enabled, 'false' otherwise.\r\n//labelText - The text which will appear in the label of the component (i.e: \"Select single/multiple strain/s:\").\r\nexport default function AutocompleteC({apiUrl, parentCallback, multipleChoice}) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n\r\n    const childErr = React.createRef();\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n\r\n        (async () => {\r\n            try {\r\n                const response = await fetch(apiUrl);\r\n\r\n                await sleep(1e3); // For demo purposes.\r\n                const countries = await response.json();\r\n                if (active) {\r\n                    setOptions(countries.filter(x => x.name != null))\r\n                }\r\n            } catch (e) {\r\n                childErr.current.handleOpen();\r\n            }\r\n\r\n        })();\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n                <Form.Group as={Row} controlId=\"selectStrain\">\r\n                    <Col>\r\n                        <Autocomplete\r\n                            id=\"asynchronous-demo\"\r\n                            multiple={multipleChoice}\r\n                            // style={{ width: \"100%\" }}\r\n                            open={open}\r\n                            onOpen={() => {\r\n                                setOpen(true);\r\n                            }}\r\n                            onClose={() => {\r\n                                setOpen(false);\r\n                            }}\r\n                            // onChange={(event, value) => setSelectedA(value)}\r\n                            onChange={(event, value) => parentCallback(value)}\r\n                            getOptionSelected={(option, value) => option.name === value.name}\r\n                            getOptionLabel={(option) => option.name}\r\n                            options={options}\r\n                            loading={loading}\r\n                            renderInput={(params) => (\r\n                                <TextField\r\n                                    {...params}\r\n                                    // label=\"Choose strains...\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    InputProps={{\r\n                                        ...params.InputProps,\r\n                                        endAdornment: (\r\n                                            <React.Fragment>\r\n                                                {loading ? <CircularProgress color=\"inherit\" size={20}/> : null}\r\n                                                {params.InputProps.endAdornment}\r\n                                            </React.Fragment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Form.Group>\r\n                {/*<Modal show={show} onHide={handleClose}>*/}\r\n                {/*    <Modal.Header closeButton>*/}\r\n                {/*        <Modal.Title>Modal heading</Modal.Title>*/}\r\n                {/*    </Modal.Header>*/}\r\n                {/*    <Modal.Body>There is a problem with the server request. Sorry for the inconvenience.</Modal.Body>*/}\r\n                {/*    <Modal.Footer>*/}\r\n                {/*        <Button variant=\"secondary\" onClick={handleClose}>*/}\r\n                {/*            Close*/}\r\n                {/*        </Button>*/}\r\n                {/*    </Modal.Footer>*/}\r\n                {/*</Modal>*/}\r\n            <ErrorModalC open={false} ref={childErr}/>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\CircosStrain.jsx",["213"],"import React, {Component} from \"react\";\r\nimport '../styles/CircosStrain.css';\r\n\r\nclass CircosStrain extends Component {\r\n    state = {\r\n        file: null,\r\n        loaded: false\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <iframe src={\"http://127.0.0.1:8800/api/v1/strains/strainCircos/\" + this.props.svnn} width=\"1000\" height=\"1000\" />\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CircosStrain;","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\utilities\\colors.js",[],"C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\GenesByDefenseForm.jsx",["214","215","216","217","218","219","220","221","222"],"import React, {Component} from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport '../styles/StrainForm.css';\r\nimport axios from \"axios\";\r\nimport {Form, Col, Row, Button, Modal} from \"react-bootstrap\";\r\nimport TextOrFileUpload from \"../components/TextOrFileUpload\";\r\nimport AutocompleteC from \"../components/AutocompleteC\";\r\nimport ErrorModalC from \"./ErrorModalC\";\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\nexport default function GenesByDefenseForm() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n    const [checkedAll, setCheckedAll] = React.useState(false);\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    const [selectedA, setSelectedA] = React.useState(false);\r\n    const [checked, setChecked] = React.useState({\r\n        // locus_tag: true,\r\n        genomic_accession: true,\r\n        start_g: true,\r\n        end_g: true,\r\n        strand: true,\r\n        attributes_x: true,\r\n        product_accession: true,\r\n        nonredundant_refseq: true,\r\n        name: true\r\n    });\r\n    const childErr = React.createRef();\r\n\r\n    /* ################################################ */\r\n    /* #### TOGGLES checK STATE BASED ON inputName #### */\r\n    /* ################################################ */\r\n\r\n    const toggleCheck = (inputName) => {\r\n        setChecked((prevState) => {\r\n            const newState = {...prevState};\r\n            newState[inputName] = !prevState[inputName];\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    /* ###################################################### */\r\n    /* #### CHECKS OR UNCHECKS ALL FROM SELECT ALL CLICK #### */\r\n    /* ###################################################### */\r\n\r\n    const selectAll = (value) => {\r\n        setCheckedAll(value);\r\n        setChecked((prevState) => {\r\n            const newState = {...prevState};\r\n            for (const inputName in newState) {\r\n                newState[inputName] = value;\r\n            }\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    /* ############################################# */\r\n    /* #### EFFECT TO CONTROL CHECKED_ALL STATE #### */\r\n    /* ############################################# */\r\n\r\n    // IF YOU CHECK BOTH INDIVIDUALLY. IT WILL ACTIVATE THE checkedAll STATE\r\n    // IF YOU UNCHECK ANY INDIVIDUALLY. IT WILL DE-ACTIVATE THE checkAll STATE\r\n\r\n    React.useEffect(() => {\r\n        let allChecked = true;\r\n        for (const inputName in checked) {\r\n            if (checked[inputName] === false) {\r\n                allChecked = false;\r\n            }\r\n        }\r\n        if (allChecked) {\r\n            setCheckedAll(true);\r\n        } else {\r\n            setCheckedAll(false);\r\n        }\r\n    }, [checked]);\r\n\r\n    /* ########################## */\r\n    /* #### RETURN STATEMENT #### */\r\n\r\n    /* ########################## */\r\n\r\n\r\n    function getData() {\r\n\r\n        let selectedC = [];\r\n\r\n        for (let key in checked) {\r\n            // check if the property/key is defined in the object itself, not in parent\r\n            if (checked[key] == true)\r\n                selectedC.push(key)\r\n        }\r\n\r\n        let selectedAS = [];\r\n        if (Array.isArray(selectedA)) {\r\n            for (let key in selectedA) {\r\n                selectedAS.push(selectedA[key]['name'])\r\n            }\r\n        } else {\r\n            selectedAS.push(selectedA['name']);\r\n        }\r\n\r\n        if (selectedC.length == 0) {\r\n            setModalShow(true)\r\n            return;\r\n        }\r\n\r\n\r\n        console.log(selectedAS)\r\n        // console.log(selectedC)\r\n\r\n\r\n        const FileDownload = require('js-file-download');\r\n\r\n        const Qs = require('qs')\r\n\r\n        let params = {selectedC: selectedC, selectedAS: selectedAS}\r\n\r\n        let myAxios = axios.create({\r\n            paramsSerializer: params => Qs.stringify(params, {arrayFormat: 'repeat'})\r\n        })\r\n\r\n        myAxios.get('http://127.0.0.1:8800/api/v1/genes/genes_by_defense', {params})\r\n            .then((res) => {\r\n                FileDownload(res.data, 'genes_by_defense.csv');\r\n            }).catch(function (error) {childErr.current.handleOpen()});\r\n\r\n\r\n    }\r\n\r\n\r\n    function MyVerticallyCenteredModal(props) {\r\n        return (\r\n            <Modal\r\n                {...props}\r\n                size=\"sm\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Missing Information\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Select a field</h4>\r\n                    <p>\r\n                        Please select at least one of the fields from the list.\r\n                    </p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide}>Ok</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    const getSelected = (selected) => {\r\n        setSelectedA(selected)\r\n    }\r\n\r\n    /*\r\nhandle file upload and load each line to array of\r\n integers (aka strain indexes for subtree) for subtree generating\r\n using selectedFile state.\r\n */\r\n    const onFileChange = (e) => {\r\n\r\n        // Update the state\r\n        if (e.target.files.length > 0) {\r\n            e.preventDefault()\r\n            const reader = new FileReader()\r\n            console.log(e)\r\n            reader.onload = async (e) => {\r\n                const text = (e.target.result);\r\n                let ts = text.split(/\\r?\\n/);\r\n                let selectedAS = [];\r\n                let id = 0;\r\n                for (let key in ts) {\r\n                    selectedAS.push({'name': ts[key], 'id': id});\r\n                    id++;\r\n                    // selectedAS[key]['name'].push(ts[key]['name'])\r\n                }\r\n\r\n\r\n                setSelectedA(selectedAS)\r\n                // this.setState({selectedFile: text.split(/\\r?\\n/)});\r\n                e.target.value = null;\r\n            };\r\n            reader.readAsText(e.target.files[0])\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <MyVerticallyCenteredModal\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n            />\r\n            <Form>\r\n                <br/>\r\n                <Form.Group as={Row} controlId=\"selectStrain\">\r\n                    <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                        <p style={{textAlign: \"right\"}}>{\"Select single/multiple defense system/s:\"}</p>\r\n                    </Form.Label>\r\n\r\n                    <Col sm=\"4\">\r\n                        {/*<AutocompleteC multipleChoice={true} true parentCallback={getSelected} apiUrl=\"http://127.0.0.1:8800/api/v1/cluster/get_defense_system_names\"/>*/}\r\n                        <TextOrFileUpload apiUrl=\"http://127.0.0.1:8800/api/v1/cluster/get_defense_system_names\"\r\n                                          multipleChoice={true} parentFileChangeCallback={onFileChange}\r\n                                          parentHandleTextBox={getSelected} label=\"Please upload a file that contains a list of defense systems\r\n                            separated by new lines (/n)\"/>\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n\r\n                <div className=\"chkbxs\">\r\n                    <div>\r\n                        <label for=\"all\" className=\"lbl\">All</label>\r\n                        <input\r\n                            id=\"all\"\r\n                            type=\"checkbox\"\r\n                            onChange={(event) => selectAll(event.target.checked)}\r\n                            checked={checkedAll}\r\n                        />\r\n                    </div>\r\n\r\n                    {/*<label for=\"1\" className=\"lbl\">locus_tag</label>*/}\r\n                    {/*<input id='1' type=\"checkbox\" name=\"locus_tag\" onChange={() => toggleCheck(\"locus_tag\")} checked={checked[\"locus_tag\"]}/>*/}\r\n                    <label for='2' className=\"lbl\">genomic_accession</label>\r\n                    <input id='2' type=\"checkbox\" name=\"genomic_accession\"\r\n                           onChange={() => toggleCheck(\"genomic_accession\")} checked={checked[\"genomic_accession\"]}/>\r\n                    <label for='3' className=\"lbl\">start_g</label>\r\n                    <input id='3' type=\"checkbox\" name=\"start_g\" onChange={() => toggleCheck(\"start_g\")}\r\n                           checked={checked[\"start_g\"]}/>\r\n                    <label htmlFor='4' className=\"lbl\">end_g</label>\r\n                    <input id='4' type=\"checkbox\" name=\"end_g\" onChange={() => toggleCheck(\"end_g\")}\r\n                           checked={checked[\"end_g\"]}/>\r\n                    <label htmlFor='5' className=\"lbl\">strand</label>\r\n                    <input id='5' type=\"checkbox\" name=\"strand\" onChange={() => toggleCheck(\"strand\")}\r\n                           checked={checked[\"strand\"]}/>\r\n                    <label htmlFor='6' className=\"lbl\">attributes_x</label>\r\n                    <input id='6' type=\"checkbox\" name=\"attributes_x\" onChange={() => toggleCheck(\"attributes_x\")}\r\n                           checked={checked[\"attributes_x\"]}/>\r\n                    <label htmlFor='7' className=\"lbl\">product_accession</label>\r\n                    <input id='7' type=\"checkbox\" name=\"product_accession\"\r\n                           onChange={() => toggleCheck(\"product_accession\")} checked={checked[\"product_accession\"]}/>\r\n                    <label htmlFor='8' className=\"lbl\">nonredundant_refseq</label>\r\n                    <input id='8' type=\"checkbox\" name=\"nonredundant_refseq\"\r\n                           onChange={() => toggleCheck(\"nonredundant_refseq\")}\r\n                           checked={checked[\"nonredundant_refseq\"]}/>\r\n                    <label htmlFor='9' className=\"lbl\">name</label>\r\n                    <input id='9' type=\"checkbox\" name=\"name\" onChange={() => toggleCheck(\"name\")}\r\n                           checked={checked[\"name\"]}/>\r\n                    {/*<label htmlFor='10' className=\"lbl\">name_y</label>*/}\r\n                    {/*<input id='10' type=\"checkbox\" name=\"name_y\" onChange={() => toggleCheck(\"name_y\")} checked={checked[\"name_y\"]}/>*/}\r\n                    {/*<label htmlFor='11' className=\"lbl\">symbol_y</label>*/}\r\n                    {/*<input id='11' type=\"checkbox\" name=\"symbol_y\" onChange={() => toggleCheck(\"symbol_y\")} checked={checked[\"symbol_y\"]}/>*/}\r\n                    {/*<label htmlFor='12' className=\"lbl\">geneid_y</label>*/}\r\n                    {/*<input id='12' type=\"checkbox\" name=\"geneID_y\" onChange={() => toggleCheck(\"geneID_y\")} checked={checked[\"geneID_y\"]}/>*/}\r\n                    {/*<label htmlFor='13' className=\"lbl\"> product_length_y</label>*/}\r\n                    {/*<input id='13' type=\"checkbox\" name=\"product_length_y\" onChange={() => toggleCheck(\"product_length_y\")} checked={checked[\"product_length_y\"]}/>*/}\r\n                    {/*<label htmlFor='14' className=\"lbl\"> protein_sequence</label>*/}\r\n                    {/*<input id='14' type=\"checkbox\" name=\"protein_sequence\" onChange={() => toggleCheck(\"protein_sequence\")} checked={checked[\"protein_sequence\"]}/>*/}\r\n                    {/*<label htmlFor='15' className=\"lbl\"> dna_sequence</label>*/}\r\n                    {/*<input id='15' type=\"checkbox\" name=\"dna_sequence\" onChange={() => toggleCheck(\"dna_sequence\")} checked={checked[\"dna_sequence\"]}/>*/}\r\n                </div>\r\n\r\n                <div style={{textAlign: \"center\"}}>\r\n                    <Button onClick={getData}>Download</Button>\r\n                </div>\r\n            </Form>\r\n            <ErrorModalC open={false} ref={childErr}/>\r\n        </div>\r\n    )\r\n}","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\DefenseSystemStrain.jsx",["223"],"import React, {Component} from \"react\";\r\nimport axios from \"axios\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport '../styles/DefenseSystemStrain.css';\r\nimport ToolkitProvider, { CSVExport } from 'react-bootstrap-table2-toolkit';\r\nimport {faDownload, faQuestion} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nclass DefenseSystemStrain extends Component {\r\n    state = {\r\n        result_table: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        axios\r\n            .get(\r\n                \"http://127.0.0.1:8800/api/v1/strains/strainGenesDefSystems/\"+this.props.svnn\r\n            )\r\n            .then(response => {\r\n                this.setState({result_table: response.data})\r\n            });\r\n    }\r\n    render() {\r\n        const { ExportCSVButton } = CSVExport;\r\n        const columns = [\r\n            {dataField: \"locus_tag\", text: \"locus tag\", sort: true},\r\n            {dataField: \"defense_system\", text: \"defense system \", sort: true},\r\n            {dataField: \"anti_crispr\", text: \"anti crispr\", sort: true},\r\n        ]\r\n\r\n        return (\r\n            <div>\r\n                <FadeIn>\r\n                    <div style={{height: \"100%\", width: \"90%\",marginLeft:\"5%\"}}>\r\n\r\n                        <ToolkitProvider\r\n                            keyField=\"id\"\r\n                            data={this.state.result_table}\r\n                            columns={ columns }\r\n                            exportCSV\r\n                        >\r\n                            {\r\n                                props => (\r\n                                    <div>\r\n                                        <BootstrapTable  { ...props.baseProps }\r\n                                                         pagination={paginationFactory({\r\n                                                             sizePerPage: 50,\r\n                                                             pageStartIndex: 1, // first page will be 0, default is 1\r\n                                                             paginationSize: 10,  // the pagination bar size, default is 5\r\n                                                             showTotal: true, // display pagination information\r\n                                                             firstPageText: '<<', // the text of first page button\r\n                                                             prePageText: 'Prev', // the text of previous page button\r\n                                                             nextPageText: 'Next', // the text of next page button\r\n                                                             lastPageText: '>>', // the text of last page button\r\n                                                             nextPageTitle: 'Go to next', // the title of next page button\r\n                                                             prePageTitle: 'Go to previous', // the title of previous page button\r\n                                                             firstPageTitle: 'Go to first', // the title of first page button\r\n                                                             lastPageTitle: 'Go to last', // the title of last page button\r\n                                                             hideSizePerPage: false, // hide the size per page dropdown\r\n                                                             hidePageListOnlyOnePage: true, // hide pagination bar when only one page, default is false\r\n                                                         })}\r\n                                        />\r\n                                        <ExportCSVButton className=\"exportB\" { ...props.csvProps }><FontAwesomeIcon icon={faDownload}/> Download to CSV</ExportCSVButton>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </ToolkitProvider>\r\n\r\n                        {/*<BootstrapTable*/}\r\n                        {/*    keyField=\"locus_tag\"*/}\r\n                        {/*    data={this.state.result_table}*/}\r\n                        {/*    columns={columns} //which columns from the data to show as columns*/}\r\n                        {/*    pagination={paginationFactory({*/}\r\n                        {/*        sizePerPage: 50,*/}\r\n                        {/*        pageStartIndex: 1, // first page will be 0, default is 1*/}\r\n                        {/*        paginationSize: 10,  // the pagination bar size, default is 5*/}\r\n                        {/*        showTotal: true, // display pagination information*/}\r\n                        {/*        firstPageText: '<<', // the text of first page button*/}\r\n                        {/*        prePageText: 'Prev', // the text of previous page button*/}\r\n                        {/*        nextPageText: 'Next', // the text of next page button*/}\r\n                        {/*        lastPageText: '>>', // the text of last page button*/}\r\n                        {/*        nextPageTitle: 'Go to next', // the title of next page button*/}\r\n                        {/*        prePageTitle: 'Go to previous', // the title of previous page button*/}\r\n                        {/*        firstPageTitle: 'Go to first', // the title of first page button*/}\r\n                        {/*        lastPageTitle: 'Go to last', // the title of last page button*/}\r\n                        {/*        hideSizePerPage: false, // hide the size per page dropdown*/}\r\n                        {/*        hidePageListOnlyOnePage: true, // hide pagination bar when only one page, default is false*/}\r\n                        {/*    })}*/}\r\n                        {/*/>*/}\r\n                    </div>\r\n                </FadeIn>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default DefenseSystemStrain;","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\Drawer.jsx",["224","225","226"],"import React from \"react\";\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport clsx from 'clsx';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport List from '@material-ui/core/List';\r\nimport { BsShieldShaded } from 'react-icons/bs';\r\nimport { SiMicrogenetics } from 'react-icons/si';\r\nimport { GiDrippingTube } from 'react-icons/gi';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        whiteSpace: 'nowrap',\r\n\r\n    },\r\n    drawerOpen: {\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerClose: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        overflowX: 'hidden',\r\n        width: theme.spacing(7) + 1,\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(7) + 1,\r\n        },\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        // justifyContent: 'flex-end',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nexport default function MiniDrawer({generatingTypeHandler}) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleDrawerOpen = () => {\r\n        if (open == true) {\r\n            setOpen(false)\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Drawer\r\n                PaperProps={{ style: { position: 'absolute' ,height:'90.7%',marginTop:'4.5%'},width:'70%' }}\r\n                BackdropProps={{ style: { position: 'absolute' } }}\r\n                ModalProps={{\r\n                    container: document.getElementById('drawer'),\r\n                    style: { position: 'absolute' }\r\n                }}\r\n                anchor='right'\r\n                variant=\"permanent\"\r\n                className={clsx(classes.drawer, {\r\n                    [classes.drawerOpen]: open,\r\n                    [classes.drawerClose]: !open,\r\n                })}\r\n                classes={{\r\n                    paper: clsx({\r\n                        [classes.drawerOpen]: open,\r\n                        [classes.drawerClose]: !open,\r\n                    }),\r\n                }}\r\n            >\r\n                <div className={classes.toolbar}>\r\n                    <IconButton onClick={handleDrawerOpen}>\r\n                        {theme.direction === 'rtl' ? <ChevronRightIcon/> : <ChevronLeftIcon/>}\r\n                    </IconButton>\r\n                    Choose Display:\r\n                </div>\r\n                <Divider/>\r\n                <List>\r\n\r\n                    <ListItem button key=\"defense\" onClick={() => generatingTypeHandler(\"defense\")}>\r\n                        <ListItemIcon><BsShieldShaded/></ListItemIcon>\r\n                        <ListItemText primary=\"Defense Systems\"/>\r\n                    </ListItem>\r\n                    <ListItem button key=\"cluster\" onClick={() => generatingTypeHandler(\"cluster\")}>\r\n                        <ListItemIcon><SiMicrogenetics/></ListItemIcon>\r\n                        <ListItemText primary=\"Gene Cluster\"/>\r\n                    </ListItem>\r\n                    <ListItem button key=\"isolation\" onClick={() => generatingTypeHandler(\"isolation\")}>\r\n                        <ListItemIcon><GiDrippingTube/></ListItemIcon>\r\n                        <ListItemText primary=\"Isolation Type\"/>\r\n                    </ListItem>\r\n                </List>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n}","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\AutocompleteCluster.jsx",["227","228","229"],"import React from \"react\";\r\nimport '../styles/SearchPage.css';\r\nimport {Form, Col, Row} from \"react-bootstrap\";\r\nimport FadeIn from \"react-fade-in\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\n\r\n//apiUrl - the url of the requested HTML call to the backend (i.e: http://127.0.0.1:8801/api/v1/strains).\r\n//parentCallback - the callback that will be called in the parent which holds this component. The parent will receive the current selected objects for each change on this component.  See DownloadPage for example or ask Alon.\r\n//multipleChoice - determines the multiselect option, 'true' means multiselect enabled, 'false' otherwise.\r\n//labelText - The text which will appear in the label of the component (i.e: \"Select single/multiple strain/s:\").\r\nexport default function AutocompleteCluster({apiUrl, parentCallback, multipleChoice, labelText}) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n\r\n        (async () => {\r\n            const response = await fetch(apiUrl);\r\n            await sleep(1e3); // For demo purposes.\r\n            const countries = await response.json();\r\n            if (active) {\r\n                setOptions(countries.filter(x => x != null))\r\n            }\r\n\r\n        })();\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n                <Form.Group as={Row} controlId=\"selectStrain\">\r\n                    <Form.Label className=\"wrapper\">\r\n                        <p style={{textAlign: \"right\"}}>{labelText}</p>\r\n                    </Form.Label>\r\n                    <Autocomplete\r\n                        id=\"asynchronous-demo\"\r\n                        multiple={multipleChoice}\r\n                        style={{width: 300}}\r\n                        open={open}\r\n                        onOpen={() => {\r\n                            setOpen(true);\r\n                        }}\r\n                        onClose={() => {\r\n                            setOpen(false);\r\n                        }}\r\n                        // onChange={(event, value) => setSelectedA(value)}\r\n                        onChange={(event, value) => parentCallback(value)}\r\n                        getOptionSelected={(option, value) => option === value}\r\n                        getOptionLabel={(option) => option}\r\n                        options={options}\r\n                        loading={loading}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                label=\"Choose gene...\"\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    ...params.InputProps,\r\n                                    endAdornment: (\r\n                                        <React.Fragment>\r\n                                            {loading ? <CircularProgress color=\"inherit\" size={20}/> : null}\r\n                                            {params.InputProps.endAdornment}\r\n                                        </React.Fragment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        )}\r\n                    />\r\n                </Form.Group>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\Cluster.jsx",["230","231","232","233","234","235","236","237","238"],"import React, {Component} from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport '../styles/StrainForm.css';\r\nimport axios from \"axios\";\r\nimport {Form, Col, Row, Button, Modal} from \"react-bootstrap\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport AutocompleteCluster from \"./AutocompleteCluster\";\r\nimport {serialize} from \"react-awesome-slider/src/helpers/components\";\r\nimport StrainCircosResultsPage from \"../pages/StrainCircosResultsPage\";\r\n\r\nclass Cluster extends Component {\r\n    state = {\r\n        strains: [\r\n            {\r\n                name: \"PAO1\",\r\n                id: \"GCF_000006765.1\"\r\n            },\r\n            {\r\n                name: \"PA14\",\r\n                id: \"GCF_000014625.1\"\r\n            }\r\n        ],\r\n        num_cluster: ['1', '2', '3'],\r\n        selected_strainA: false,\r\n        selected_strainB: false,\r\n        selected_strainC: false,\r\n        selected_geneA: false,\r\n        selected_geneB: false,\r\n        selected_geneC: false,\r\n        showing_one: false,\r\n        showing_two: false,\r\n        showing_three: false,\r\n\r\n    }\r\n\r\n    choice_strainA = (selected) => {\r\n        this.setState({\r\n            selected_strainA: selected\r\n        })\r\n    }\r\n    choice_strainB = (selected) => {\r\n        this.setState({\r\n            selected_strainB: selected\r\n        })\r\n    }\r\n    choice_strainC = (selected) => {\r\n        this.setState({\r\n            selected_strainC: selected\r\n        })\r\n    }\r\n\r\n    choice_geneA = (selected) => {\r\n        this.setState({\r\n            selected_geneA: selected\r\n        })\r\n    }\r\n    choice_geneB = (selected) => {\r\n        this.setState({\r\n            selected_geneB: selected\r\n        })\r\n    }\r\n    choice_geneC = (selected) => {\r\n        this.setState({\r\n            selected_geneC: selected\r\n        })\r\n    }\r\n\r\n    getTree(selectedFile,selectedStrains){\r\n        const arr = []\r\n        if (this.state.showing_one) {\r\n            arr.push(this.state.selected_strainA.name + '-' + this.state.selected_geneA)\r\n        }\r\n        if (this.state.showing_two) {\r\n            arr.push(this.state.selected_strainB.name + '-' + this.state.selected_geneB)\r\n        }\r\n        if (this.state.showing_three) {\r\n            arr.push(this.state.selected_strainC.name + '-' + this.state.selected_geneC)\r\n        }\r\n        console.log(arr);\r\n        const Qs = require('qs')\r\n        return axios.get('http://127.0.0.1:8800/api/v1/cluster/cluster_tree', {\r\n                params: {\r\n                    list_strain_gene: arr,\r\n                    subtree: selectedFile.length > 0 ? selectedFile : selectedStrains\r\n                },\r\n                paramsSerializer: function (params) {\r\n                    return Qs.stringify(params, {arrayFormat: 'repeat'})\r\n                },\r\n                responseType: 'arraybuffer',\r\n            }\r\n        )\r\n    }\r\n\r\n    show_lines = (value) => {\r\n        if (value == '1') {\r\n            this.setState({\r\n                    showing_one: true,\r\n                    showing_two: false,\r\n                    showing_three: false,\r\n                    selected_geneB: \"\",\r\n                    selected_strainB: \"\",\r\n                    selected_geneC: \"\",\r\n                    selected_strainC: \"\",\r\n                }\r\n            )\r\n        }\r\n        if (value == '2') {\r\n            this.setState({\r\n                    showing_one: true,\r\n                    showing_two: true,\r\n                    showing_three: false,\r\n                    selected_geneC: \"\",\r\n                    selected_strainC: \"\",\r\n                }\r\n            )\r\n        }\r\n        if (value == '3') {\r\n            this.setState({\r\n                    showing_one: true,\r\n                    showing_two: true,\r\n                    showing_three: true,\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <container>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"Choose_num\"\r\n                        options={this.state.num_cluster}\r\n                        getOptionLabel={(option) => option}\r\n                        style={{width: 300}}\r\n                        onChange={(event, value) => this.show_lines(value)}\r\n                        renderInput={(params) => <TextField {...params} label=\"Choose num of gene\" variant=\"outlined\"/>}\r\n                    />\r\n                    <div>\r\n                        {this.state.showing_one\r\n                            ? <div>\r\n                                <FadeIn>\r\n                                    <p style={{textAlign: \"left\"}}>select first strain and gene</p>\r\n                                    <Autocomplete\r\n                                        id=\"strains-combo-box\"\r\n                                        options={this.state.strains}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        style={{width: 300}}\r\n                                        onChange={(event, value) => this.choice_strainA(value)}\r\n                                        renderInput={(params) => <TextField {...params} label=\"Choose Strain\"\r\n                                                                            variant=\"outlined\"/>}\r\n                                    />\r\n                                    <Col sm=\"4\">\r\n                                        <AutocompleteCluster multipleChoice={false} true\r\n                                                             parentCallback={this.choice_geneA}\r\n                                                             apiUrl={\"http://127.0.0.1:8800/api/v1/cluster/get_gene_strain_id/\" + this.state.selected_strainA.id}\r\n                                                             labelText=\"\"/>\r\n                                    </Col>\r\n                                </FadeIn>\r\n                            </div>\r\n                            : null\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        {this.state.showing_two\r\n                            ? <div>\r\n                                <FadeIn>\r\n                                    <p style={{textAlign: \"left\"}}>select second strain and gene</p>\r\n                                    <Autocomplete\r\n                                        id=\"strains-combo-box\"\r\n                                        options={this.state.strains}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        style={{width: 300}}\r\n                                        onChange={(event, value) => this.choice_strainB(value)}\r\n                                        renderInput={(params) => <TextField {...params} label=\"Choose Strain\"\r\n                                                                            variant=\"outlined\"/>}\r\n                                    />\r\n                                    <Col sm=\"4\">\r\n                                        <AutocompleteCluster multipleChoice={false} true\r\n                                                             parentCallback={this.choice_geneB}\r\n                                                             apiUrl={\"http://127.0.0.1:8800/api/v1/cluster/get_gene_strain_id/\" + this.state.selected_strainB.id}\r\n                                                             labelText=\"\"/>\r\n                                    </Col>\r\n                                </FadeIn>\r\n                            </div>\r\n                            : null\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        {this.state.showing_three\r\n                            ? <div>\r\n                                <FadeIn>\r\n                                    <p style={{textAlign: \"left\"}}>select third strain and gene</p>\r\n                                    <Autocomplete\r\n                                        id=\"strains-combo-box\"\r\n                                        options={this.state.strains}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        style={{width: 300}}\r\n                                        onChange={(event, value) => this.choice_strainC(value)}\r\n                                        renderInput={(params) => <TextField {...params} label=\"Choose Strain\"\r\n                                                                            variant=\"outlined\"/>}\r\n                                    />\r\n                                    <Col sm=\"4\">\r\n                                        <AutocompleteCluster multipleChoice={false} true\r\n                                                             parentCallback={this.choice_geneC}\r\n                                                             apiUrl={\"http://127.0.0.1:8800/api/v1/cluster/get_gene_strain_id/\" + this.state.selected_strainC.id}\r\n                                                             labelText=\"\"/>\r\n                                    </Col>\r\n                                </FadeIn>\r\n                            </div>\r\n                            : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n            </container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cluster;","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\GenesByClusterC.jsx",["239","240","241"],"import React from \"react\";\r\nimport '../styles/SearchPage.css';\r\nimport {Form, Col, Row, Button} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport ErrorModalC from \"./ErrorModalC\";\r\n\r\n\r\nexport default function GenesByClusterC({indexC}) {\r\n\r\n    const childErr = React.createRef();\r\n\r\n    function getData() {\r\n        const FileDownload = require('js-file-download');\r\n\r\n        const Qs = require('qs')\r\n\r\n        let params = { indexC: indexC}\r\n\r\n        let myAxios = axios.create({\r\n            paramsSerializer: params => Qs.stringify(params, {arrayFormat: 'repeat'})\r\n        })\r\n\r\n        myAxios.get('http://127.0.0.1:8800/api/v1/genes/genes_by_cluster',{params})\r\n            .then((res) => {\r\n                FileDownload(res.data, 'genes_by_cluster.csv');\r\n            }).catch(function (error) {childErr.current.handleOpen()});\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n            <div style={{textAlign: \"center\"}}>\r\n                <Button onClick={getData}>Download Genes in the Same Cluster</Button>\r\n            </div>\r\n            <ErrorModalC open={false} ref={childErr}/>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\ErrorModalC.jsx",["242","243","244","245","246","247"],"import React, { Component } from \"react\";\r\nimport '../styles/StrainForm.css';\r\nimport axios from \"axios\";\r\nimport {Form, Col, Row, Button, Modal} from \"react-bootstrap\";\r\nimport AutocompleteC from \"../components/AutocompleteC\";\r\nimport TextOrFileUpload from \"./TextOrFileUpload\";\r\n\r\nclass ErrorModalC extends Component {\r\n    state = {open: this.props.open};\r\n\r\n    handleClose(){\r\n        this.setState({ open: false});\r\n    }\r\n\r\n    handleOpen(){\r\n        this.setState({ open: true});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <Modal show={this.state.open} onHide={this.handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Server Error</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>There is a problem with the server request. Sorry for the inconvenience.</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={()=>{this.setState({open:false})}}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            </div>\r\n        );\r\n    }\r\n} export default ErrorModalC;","C:\\Users\\idoef\\IdeaProjects\\pasite-frontend\\src\\components\\TextOrFileUpload.jsx",["248","249","250","251","252","253","254","255","256","257","258"],"import React from \"react\";\r\nimport '../styles/SearchPage.css';\r\nimport {Form, Col, Row} from \"react-bootstrap\";\r\nimport FadeIn from \"react-fade-in\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport AutocompleteC from \"./AutocompleteC\";\r\nimport Switch from \"react-switch\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\n\r\n//apiUrl - For the autocomplete: the url of the requested HTML call to the backend (i.e: http://127.0.0.1:8801/api/v1/strains). The backend need to return list of dictionaries in the format: [{name: \"a\", key: \"0\"},...]\r\n//multipleChoice - For the autocomplete: determines the multiselect option, 'true' means multiselect enabled, 'false' otherwise.\r\n//parentHandleTextBox - For the autocomplete: the callback that will be called in the parent which holds this component when the user chooses an option from the autocomplete component.\r\n//parentFileChangeCallback -  the callback that will be called in the parent which holds this component when the user chooses a file. The file should contain the options with \\n separating between them.\r\n//label - the description of the component for the user\r\nexport default function TextOrFileUpload({ apiUrl, parentFileChangeCallback, parentHandleTextBox, multipleChoice, label}) {\r\n\r\n    const [textbox, setTextbox] = React.useState(true);\r\n    const [textOrFile, setTextOrFile] = React.useState('Text Box' );\r\n\r\n\r\n    const renderTextBox = () => {\r\n        if (textbox == true) {\r\n            return <AutocompleteC  multipleChoice={true} apiUrl={apiUrl}\r\n                                   parentCallback={(selected) => parentHandleTextBox(selected)} multipleChoice={multipleChoice}/>\r\n        } else {\r\n            return <Form.Group>\r\n                <Form.File onChange={(e) => parentFileChangeCallback(e)} id=\"exampleFormControlFile1\"\r\n                           label={label}/>\r\n            </Form.Group>;\r\n        }\r\n    }\r\n\r\n    /*\r\nupdate the state of the file upload/strain selection on change\r\n */\r\n    const setSwitchTextBox = () => {\r\n        if (textbox == true) {\r\n            // this.setState({textbox: false});\r\n            setTextbox(false)\r\n            // this.setState({textOrFile: 'File Upload'});\r\n            setTextOrFile('File Upload')\r\n\r\n        } else {\r\n            // this.setState({textbox: true});\r\n            setTextbox(true)\r\n            // this.setState({textOrFile: 'Text Box'});\r\n            setTextOrFile('Text Box')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n            <div className=\"textBox\">\r\n                <div className='rowC'>\r\n                    <Switch onChange={setSwitchTextBox} checked={textbox}/> <span\r\n                    className=\"switch\">{textOrFile}</span>\r\n                </div>\r\n                <Form>\r\n                    {renderTextBox()}\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n",["259","260"],{"ruleId":"261","replacedBy":"262"},{"ruleId":"263","replacedBy":"264"},{"ruleId":"265","severity":1,"message":"266","line":11,"column":17,"nodeType":"267","endLine":11,"endColumn":53},{"ruleId":"268","severity":1,"message":"269","line":1,"column":16,"nodeType":"270","messageId":"271","endLine":1,"endColumn":24},{"ruleId":"268","severity":1,"message":"272","line":19,"column":18,"nodeType":"270","messageId":"271","endLine":19,"endColumn":25},{"ruleId":"265","severity":1,"message":"266","line":67,"column":33,"nodeType":"267","endLine":67,"endColumn":107},{"ruleId":"268","severity":1,"message":"273","line":1,"column":27,"nodeType":"270","messageId":"271","endLine":1,"endColumn":36},{"ruleId":"268","severity":1,"message":"269","line":1,"column":38,"nodeType":"270","messageId":"271","endLine":1,"endColumn":46},{"ruleId":"268","severity":1,"message":"274","line":67,"column":13,"nodeType":"270","messageId":"271","endLine":67,"endColumn":20},{"ruleId":"275","severity":1,"message":"276","line":68,"column":37,"nodeType":"277","messageId":"278","endLine":68,"endColumn":39},{"ruleId":"275","severity":1,"message":"276","line":155,"column":19,"nodeType":"277","messageId":"278","endLine":155,"endColumn":21},{"ruleId":"275","severity":1,"message":"276","line":158,"column":19,"nodeType":"277","messageId":"278","endLine":158,"endColumn":21},{"ruleId":"275","severity":1,"message":"276","line":161,"column":19,"nodeType":"277","messageId":"278","endLine":161,"endColumn":21},{"ruleId":"275","severity":1,"message":"276","line":239,"column":36,"nodeType":"277","messageId":"278","endLine":239,"endColumn":38},{"ruleId":"275","severity":1,"message":"276","line":251,"column":41,"nodeType":"277","messageId":"278","endLine":251,"endColumn":43},{"ruleId":"275","severity":1,"message":"276","line":260,"column":41,"nodeType":"277","messageId":"278","endLine":260,"endColumn":43},{"ruleId":"275","severity":1,"message":"276","line":269,"column":36,"nodeType":"277","messageId":"278","endLine":269,"endColumn":38},{"ruleId":"265","severity":1,"message":"266","line":333,"column":45,"nodeType":"267","endLine":337,"endColumn":75},{"ruleId":"268","severity":1,"message":"279","line":8,"column":27,"nodeType":"270","messageId":"271","endLine":8,"endColumn":40},{"ruleId":"268","severity":1,"message":"280","line":27,"column":15,"nodeType":"270","messageId":"271","endLine":27,"endColumn":21},{"ruleId":"275","severity":1,"message":"276","line":144,"column":18,"nodeType":"277","messageId":"278","endLine":144,"endColumn":20},{"ruleId":"275","severity":1,"message":"276","line":146,"column":23,"nodeType":"277","messageId":"278","endLine":146,"endColumn":25},{"ruleId":"275","severity":1,"message":"276","line":148,"column":25,"nodeType":"277","messageId":"278","endLine":148,"endColumn":27},{"ruleId":"268","severity":1,"message":"281","line":2,"column":9,"nodeType":"270","messageId":"271","endLine":2,"endColumn":13},{"ruleId":"268","severity":1,"message":"282","line":2,"column":15,"nodeType":"270","messageId":"271","endLine":2,"endColumn":19},{"ruleId":"268","severity":1,"message":"283","line":2,"column":21,"nodeType":"270","messageId":"271","endLine":2,"endColumn":30},{"ruleId":"268","severity":1,"message":"284","line":2,"column":32,"nodeType":"270","messageId":"271","endLine":2,"endColumn":35},{"ruleId":"268","severity":1,"message":"285","line":2,"column":37,"nodeType":"270","messageId":"271","endLine":2,"endColumn":40},{"ruleId":"268","severity":1,"message":"286","line":3,"column":9,"nodeType":"270","messageId":"271","endLine":3,"endColumn":13},{"ruleId":"268","severity":1,"message":"287","line":3,"column":15,"nodeType":"270","messageId":"271","endLine":3,"endColumn":19},{"ruleId":"268","severity":1,"message":"288","line":4,"column":8,"nodeType":"270","messageId":"271","endLine":4,"endColumn":14},{"ruleId":"268","severity":1,"message":"289","line":6,"column":8,"nodeType":"270","messageId":"271","endLine":6,"endColumn":18},{"ruleId":"268","severity":1,"message":"290","line":7,"column":8,"nodeType":"270","messageId":"271","endLine":7,"endColumn":14},{"ruleId":"268","severity":1,"message":"291","line":8,"column":8,"nodeType":"270","messageId":"271","endLine":8,"endColumn":14},{"ruleId":"268","severity":1,"message":"292","line":9,"column":8,"nodeType":"270","messageId":"271","endLine":9,"endColumn":14},{"ruleId":"268","severity":1,"message":"293","line":13,"column":9,"nodeType":"270","messageId":"271","endLine":13,"endColumn":14},{"ruleId":"268","severity":1,"message":"294","line":13,"column":16,"nodeType":"270","messageId":"271","endLine":13,"endColumn":22},{"ruleId":"268","severity":1,"message":"295","line":14,"column":9,"nodeType":"270","messageId":"271","endLine":14,"endColumn":24},{"ruleId":"268","severity":1,"message":"296","line":15,"column":8,"nodeType":"270","messageId":"271","endLine":15,"endColumn":21},{"ruleId":"268","severity":1,"message":"297","line":17,"column":8,"nodeType":"270","messageId":"271","endLine":17,"endColumn":18},{"ruleId":"268","severity":1,"message":"298","line":18,"column":8,"nodeType":"270","messageId":"271","endLine":18,"endColumn":23},{"ruleId":"268","severity":1,"message":"299","line":19,"column":8,"nodeType":"270","messageId":"271","endLine":19,"endColumn":13},{"ruleId":"268","severity":1,"message":"300","line":20,"column":8,"nodeType":"270","messageId":"271","endLine":20,"endColumn":27},{"ruleId":"268","severity":1,"message":"269","line":1,"column":16,"nodeType":"270","messageId":"271","endLine":1,"endColumn":24},{"ruleId":"268","severity":1,"message":"301","line":3,"column":9,"nodeType":"270","messageId":"271","endLine":3,"endColumn":13},{"ruleId":"268","severity":1,"message":"299","line":4,"column":8,"nodeType":"270","messageId":"271","endLine":4,"endColumn":13},{"ruleId":"268","severity":1,"message":"302","line":6,"column":8,"nodeType":"270","messageId":"271","endLine":6,"endColumn":23},{"ruleId":"275","severity":1,"message":"276","line":136,"column":53,"nodeType":"277","messageId":"278","endLine":136,"endColumn":55},{"ruleId":"275","severity":1,"message":"303","line":139,"column":59,"nodeType":"277","messageId":"278","endLine":139,"endColumn":61},{"ruleId":"275","severity":1,"message":"276","line":143,"column":24,"nodeType":"277","messageId":"278","endLine":143,"endColumn":26},{"ruleId":"275","severity":1,"message":"276","line":35,"column":27,"nodeType":"277","messageId":"278","endLine":35,"endColumn":29},{"ruleId":"275","severity":1,"message":"303","line":73,"column":52,"nodeType":"277","messageId":"278","endLine":73,"endColumn":54},{"ruleId":"275","severity":1,"message":"303","line":77,"column":74,"nodeType":"277","messageId":"278","endLine":77,"endColumn":76},{"ruleId":"275","severity":1,"message":"303","line":78,"column":38,"nodeType":"277","messageId":"278","endLine":78,"endColumn":40},{"ruleId":"275","severity":1,"message":"276","line":14,"column":37,"nodeType":"277","messageId":"278","endLine":14,"endColumn":39},{"ruleId":"268","severity":1,"message":"304","line":1,"column":17,"nodeType":"270","messageId":"271","endLine":1,"endColumn":26},{"ruleId":"268","severity":1,"message":"305","line":6,"column":8,"nodeType":"270","messageId":"271","endLine":6,"endColumn":21},{"ruleId":"268","severity":1,"message":"306","line":9,"column":10,"nodeType":"270","messageId":"271","endLine":9,"endColumn":15},{"ruleId":"268","severity":1,"message":"272","line":16,"column":18,"nodeType":"270","messageId":"271","endLine":16,"endColumn":25},{"ruleId":"268","severity":1,"message":"307","line":17,"column":21,"nodeType":"270","messageId":"271","endLine":17,"endColumn":31},{"ruleId":"268","severity":1,"message":"308","line":18,"column":11,"nodeType":"270","messageId":"271","endLine":18,"endColumn":18},{"ruleId":"275","severity":1,"message":"276","line":95,"column":29,"nodeType":"277","messageId":"278","endLine":95,"endColumn":31},{"ruleId":"275","severity":1,"message":"276","line":108,"column":29,"nodeType":"277","messageId":"278","endLine":108,"endColumn":31},{"ruleId":"268","severity":1,"message":"269","line":1,"column":27,"nodeType":"270","messageId":"271","endLine":1,"endColumn":35},{"ruleId":"268","severity":1,"message":"309","line":1,"column":37,"nodeType":"270","messageId":"271","endLine":1,"endColumn":43},{"ruleId":"268","severity":1,"message":"269","line":1,"column":16,"nodeType":"270","messageId":"271","endLine":1,"endColumn":24},{"ruleId":"268","severity":1,"message":"310","line":2,"column":33,"nodeType":"270","messageId":"271","endLine":2,"endColumn":47},{"ruleId":"268","severity":1,"message":"311","line":2,"column":49,"nodeType":"270","messageId":"271","endLine":2,"endColumn":56},{"ruleId":"268","severity":1,"message":"312","line":4,"column":9,"nodeType":"270","messageId":"271","endLine":4,"endColumn":19},{"ruleId":"268","severity":1,"message":"295","line":5,"column":9,"nodeType":"270","messageId":"271","endLine":5,"endColumn":24},{"ruleId":"268","severity":1,"message":"313","line":8,"column":13,"nodeType":"270","messageId":"271","endLine":8,"endColumn":21},{"ruleId":"268","severity":1,"message":"314","line":9,"column":9,"nodeType":"270","messageId":"271","endLine":9,"endColumn":20},{"ruleId":"268","severity":1,"message":"315","line":10,"column":9,"nodeType":"270","messageId":"271","endLine":10,"endColumn":17},{"ruleId":"268","severity":1,"message":"299","line":11,"column":8,"nodeType":"270","messageId":"271","endLine":11,"endColumn":13},{"ruleId":"265","severity":1,"message":"266","line":66,"column":33,"nodeType":"267","endLine":66,"endColumn":107},{"ruleId":"268","severity":1,"message":"316","line":3,"column":25,"nodeType":"270","messageId":"271","endLine":3,"endColumn":30},{"ruleId":"268","severity":1,"message":"317","line":3,"column":32,"nodeType":"270","messageId":"271","endLine":3,"endColumn":38},{"ruleId":"268","severity":1,"message":"318","line":4,"column":8,"nodeType":"270","messageId":"271","endLine":4,"endColumn":14},{"ruleId":"319","severity":1,"message":"320","line":54,"column":8,"nodeType":"321","endLine":54,"endColumn":17,"suggestions":"322"},{"ruleId":"323","severity":1,"message":"324","line":13,"column":13,"nodeType":"267","endLine":13,"endColumn":127},{"ruleId":"268","severity":1,"message":"304","line":1,"column":16,"nodeType":"270","messageId":"271","endLine":1,"endColumn":25},{"ruleId":"268","severity":1,"message":"318","line":2,"column":8,"nodeType":"270","messageId":"271","endLine":2,"endColumn":14},{"ruleId":"268","severity":1,"message":"305","line":7,"column":8,"nodeType":"270","messageId":"271","endLine":7,"endColumn":21},{"ruleId":"268","severity":1,"message":"306","line":10,"column":10,"nodeType":"270","messageId":"271","endLine":10,"endColumn":15},{"ruleId":"268","severity":1,"message":"272","line":17,"column":18,"nodeType":"270","messageId":"271","endLine":17,"endColumn":25},{"ruleId":"268","severity":1,"message":"307","line":18,"column":21,"nodeType":"270","messageId":"271","endLine":18,"endColumn":31},{"ruleId":"268","severity":1,"message":"308","line":19,"column":11,"nodeType":"270","messageId":"271","endLine":19,"endColumn":18},{"ruleId":"275","severity":1,"message":"276","line":96,"column":30,"nodeType":"277","messageId":"278","endLine":96,"endColumn":32},{"ruleId":"275","severity":1,"message":"276","line":109,"column":30,"nodeType":"277","messageId":"278","endLine":109,"endColumn":32},{"ruleId":"268","severity":1,"message":"312","line":8,"column":21,"nodeType":"270","messageId":"271","endLine":8,"endColumn":31},{"ruleId":"268","severity":1,"message":"325","line":6,"column":8,"nodeType":"270","messageId":"271","endLine":6,"endColumn":17},{"ruleId":"268","severity":1,"message":"326","line":7,"column":8,"nodeType":"270","messageId":"271","endLine":7,"endColumn":16},{"ruleId":"275","severity":1,"message":"276","line":90,"column":18,"nodeType":"277","messageId":"278","endLine":90,"endColumn":20},{"ruleId":"268","severity":1,"message":"285","line":3,"column":15,"nodeType":"270","messageId":"271","endLine":3,"endColumn":18},{"ruleId":"268","severity":1,"message":"318","line":4,"column":8,"nodeType":"270","messageId":"271","endLine":4,"endColumn":14},{"ruleId":"319","severity":1,"message":"327","line":46,"column":8,"nodeType":"321","endLine":46,"endColumn":17,"suggestions":"328"},{"ruleId":"268","severity":1,"message":"301","line":5,"column":9,"nodeType":"270","messageId":"271","endLine":5,"endColumn":13},{"ruleId":"268","severity":1,"message":"284","line":5,"column":20,"nodeType":"270","messageId":"271","endLine":5,"endColumn":23},{"ruleId":"268","severity":1,"message":"317","line":5,"column":25,"nodeType":"270","messageId":"271","endLine":5,"endColumn":31},{"ruleId":"268","severity":1,"message":"316","line":5,"column":33,"nodeType":"270","messageId":"271","endLine":5,"endColumn":38},{"ruleId":"268","severity":1,"message":"329","line":9,"column":9,"nodeType":"270","messageId":"271","endLine":9,"endColumn":18},{"ruleId":"268","severity":1,"message":"330","line":10,"column":8,"nodeType":"270","messageId":"271","endLine":10,"endColumn":31},{"ruleId":"275","severity":1,"message":"276","line":96,"column":19,"nodeType":"277","messageId":"278","endLine":96,"endColumn":21},{"ruleId":"275","severity":1,"message":"276","line":108,"column":19,"nodeType":"277","messageId":"278","endLine":108,"endColumn":21},{"ruleId":"275","severity":1,"message":"276","line":118,"column":19,"nodeType":"277","messageId":"278","endLine":118,"endColumn":21},{"ruleId":"268","severity":1,"message":"301","line":3,"column":9,"nodeType":"270","messageId":"271","endLine":3,"endColumn":13},{"ruleId":"268","severity":1,"message":"285","line":3,"column":15,"nodeType":"270","messageId":"271","endLine":3,"endColumn":18},{"ruleId":"268","severity":1,"message":"284","line":3,"column":20,"nodeType":"270","messageId":"271","endLine":3,"endColumn":23},{"ruleId":"268","severity":1,"message":"299","line":3,"column":8,"nodeType":"270","messageId":"271","endLine":3,"endColumn":13},{"ruleId":"268","severity":1,"message":"301","line":4,"column":9,"nodeType":"270","messageId":"271","endLine":4,"endColumn":13},{"ruleId":"268","severity":1,"message":"285","line":4,"column":15,"nodeType":"270","messageId":"271","endLine":4,"endColumn":18},{"ruleId":"268","severity":1,"message":"284","line":4,"column":20,"nodeType":"270","messageId":"271","endLine":4,"endColumn":23},{"ruleId":"268","severity":1,"message":"305","line":5,"column":8,"nodeType":"270","messageId":"271","endLine":5,"endColumn":21},{"ruleId":"268","severity":1,"message":"331","line":6,"column":8,"nodeType":"270","messageId":"271","endLine":6,"endColumn":24},{"ruleId":"268","severity":1,"message":"285","line":3,"column":15,"nodeType":"270","messageId":"271","endLine":3,"endColumn":18},{"ruleId":"268","severity":1,"message":"284","line":3,"column":20,"nodeType":"270","messageId":"271","endLine":3,"endColumn":23},{"ruleId":"268","severity":1,"message":"318","line":4,"column":8,"nodeType":"270","messageId":"271","endLine":4,"endColumn":14},{"ruleId":"268","severity":1,"message":"332","line":6,"column":8,"nodeType":"270","messageId":"271","endLine":6,"endColumn":17},{"ruleId":"268","severity":1,"message":"333","line":7,"column":8,"nodeType":"270","messageId":"271","endLine":7,"endColumn":20},{"ruleId":"268","severity":1,"message":"334","line":8,"column":8,"nodeType":"270","messageId":"271","endLine":8,"endColumn":24},{"ruleId":"268","severity":1,"message":"317","line":11,"column":8,"nodeType":"270","messageId":"271","endLine":11,"endColumn":14},{"ruleId":"268","severity":1,"message":"306","line":13,"column":10,"nodeType":"270","messageId":"271","endLine":13,"endColumn":15},{"ruleId":"275","severity":1,"message":"276","line":32,"column":21,"nodeType":"277","messageId":"278","endLine":32,"endColumn":23},{"ruleId":"335","severity":1,"message":"336","line":34,"column":97,"nodeType":"337","endLine":34,"endColumn":128},{"ruleId":"275","severity":1,"message":"276","line":47,"column":21,"nodeType":"277","messageId":"278","endLine":47,"endColumn":23},{"ruleId":"261","replacedBy":"338"},{"ruleId":"263","replacedBy":"339"},"no-native-reassign",["340"],"no-negated-in-lhs",["341"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'setOpen' is assigned a value but never used.","'useEffect' is defined but never used.","'systems' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'faShieldVirus' is defined but never used.","'params' is assigned a value but never used.","'Card' is defined but never used.","'Fade' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Bell' is defined but never used.","'Book' is defined but never used.","'styles' is defined but never used.","'PhiloTreeC' is defined but never used.","'slide1' is defined but never used.","'slide2' is defined but never used.","'slide3' is defined but never used.","'faDna' is defined but never used.","'faAtom' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'AwesomeSlider' is defined but never used.","'CoreStyles' is defined but never used.","'AnimationStyles' is defined but never used.","'axios' is defined but never used.","'AwesomeSliderStyles' is defined but never used.","'Form' is defined but never used.","'GenesByClusterC' is defined but never used.","Expected '!==' and instead saw '!='.","'Component' is defined but never used.","'AutocompleteC' is defined but never used.","'sleep' is defined but never used.","'setOptions' is assigned a value but never used.","'loading' is assigned a value but never used.","'useRef' is defined but never used.","'OverlayTrigger' is defined but never used.","'Tooltip' is defined but never used.","'faQuestion' is defined but never used.","'ReactDOM' is defined but never used.","'MultiSelect' is defined but never used.","'filterBy' is defined but never used.","'Modal' is defined but never used.","'Button' is defined but never used.","'FadeIn' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'apiUrl' and 'childErr'. Either include them or remove the dependency array.","ArrayExpression",["342"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'InboxIcon' is defined but never used.","'MailIcon' is defined but never used.","React Hook React.useEffect has a missing dependency: 'apiUrl'. Either include it or remove the dependency array.",["343"],"'serialize' is defined but never used.","'StrainCircosResultsPage' is defined but never used.","'TextOrFileUpload' is defined but never used.","'TextField' is defined but never used.","'Autocomplete' is defined but never used.","'CircularProgress' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["340"],["341"],"no-global-assign","no-unsafe-negation",{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},"Update the dependencies array to be: [apiUrl, childErr, loading]",{"range":"348","text":"349"},"Update the dependencies array to be: [apiUrl, loading]",{"range":"350","text":"351"},[2091,2100],"[apiUrl, childErr, loading]",[1777,1786],"[apiUrl, loading]"]