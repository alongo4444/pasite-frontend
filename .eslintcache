[{"C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\index.js":"1","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\App.js":"2","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\reportWebVitals.js":"3","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\NavBarC.jsx":"4","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\DownloadPage.jsx":"5","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\StrainCircosResultsPage.jsx":"6","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\StrainCircosPage.jsx":"7","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\ResultsPage.jsx":"8","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\SearchPage.jsx":"9","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\CorrelationResultsPage.jsx":"10","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\BrowsePage.jsx":"11","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\MainPage.jsx":"12","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\CorrelationSearchPage.jsx":"13","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\utilities\\colors.js":"14","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CircosStrain.jsx":"15","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\DefenseSystemStrain.jsx":"16","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\Drawer.jsx":"17","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\IsolationType.jsx":"18","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\TextOrFileUpload.jsx":"19","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\DropdownCheckbox.jsx":"20","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\GenesByClusterC.jsx":"21","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\GenesByDefenseForm.jsx":"22","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\StrainForm.jsx":"23","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\AutocompleteC.jsx":"24","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationGraph.jsx":"25","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\Cluster.jsx":"26","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSIsoType.jsx":"27","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSCat.jsx":"28","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSDef.jsx":"29","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\ClusterVSIsoType.jsx":"30","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DrawerCorrelation.jsx":"31","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSCluster.jsx":"32","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationBoxPlot.jsx":"33","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\ErrorModalC.jsx":"34","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CSVorFastaC.jsx":"35","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\WarningModalC.jsx":"36"},{"size":731,"mtime":1620238660018,"results":"37","hashOfConfig":"38"},{"size":649,"mtime":1620238659923,"results":"39","hashOfConfig":"38"},{"size":375,"mtime":1620162148748,"results":"40","hashOfConfig":"38"},{"size":3328,"mtime":1621958119618,"results":"41","hashOfConfig":"38"},{"size":1693,"mtime":1621958223033,"results":"42","hashOfConfig":"38"},{"size":636,"mtime":1621957091096,"results":"43","hashOfConfig":"38"},{"size":5495,"mtime":1621957091139,"results":"44","hashOfConfig":"38"},{"size":6887,"mtime":1621957091364,"results":"45","hashOfConfig":"38"},{"size":3829,"mtime":1621957091343,"results":"46","hashOfConfig":"38"},{"size":763,"mtime":1621957091416,"results":"47","hashOfConfig":"38"},{"size":18712,"mtime":1621957493384,"results":"48","hashOfConfig":"38"},{"size":3607,"mtime":1621958119604,"results":"49","hashOfConfig":"38"},{"size":3540,"mtime":1621957091407,"results":"50","hashOfConfig":"38"},{"size":1175,"mtime":1619382460297,"results":"51","hashOfConfig":"38"},{"size":489,"mtime":1621957091093,"results":"52","hashOfConfig":"38"},{"size":4578,"mtime":1621957091513,"results":"53","hashOfConfig":"38"},{"size":5532,"mtime":1621958119646,"results":"54","hashOfConfig":"38"},{"size":710,"mtime":1621957091466,"results":"55","hashOfConfig":"38"},{"size":3017,"mtime":1621958119625,"results":"56","hashOfConfig":"38"},{"size":584,"mtime":1621957091496,"results":"57","hashOfConfig":"38"},{"size":1656,"mtime":1621958119610,"results":"58","hashOfConfig":"38"},{"size":11434,"mtime":1621958275099,"results":"59","hashOfConfig":"38"},{"size":12616,"mtime":1621958119676,"results":"60","hashOfConfig":"38"},{"size":4970,"mtime":1621958119651,"results":"61","hashOfConfig":"38"},{"size":21712,"mtime":1621958119669,"results":"62","hashOfConfig":"38"},{"size":9111,"mtime":1621957666686,"results":"63","hashOfConfig":"38"},{"size":4453,"mtime":1621957091546,"results":"64","hashOfConfig":"38"},{"size":4352,"mtime":1621957091569,"results":"65","hashOfConfig":"38"},{"size":2619,"mtime":1621957091553,"results":"66","hashOfConfig":"38"},{"size":6252,"mtime":1621957091578,"results":"67","hashOfConfig":"38"},{"size":5947,"mtime":1621957091537,"results":"68","hashOfConfig":"38"},{"size":6231,"mtime":1621957091562,"results":"69","hashOfConfig":"38"},{"size":891,"mtime":1621958119657,"results":"70","hashOfConfig":"38"},{"size":1125,"mtime":1621957091492,"results":"71","hashOfConfig":"38"},{"size":3251,"mtime":1621958119597,"results":"72","hashOfConfig":"38"},{"size":1953,"mtime":1621874785156,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"5pqgky",{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"76"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"76"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"76"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"76"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"76"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"76"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"76"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"76"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"76"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"76"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"76"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"76"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"76"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"76"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"76"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"76"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"76"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"76"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"76"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\index.js",[],["175","176"],"C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\App.js",["177"],"import NavBarC from \"./components/NavBarC\";\r\nimport './App.css';\r\nimport title from './assets/images/title.png';\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport 'react-minimal-side-navigation/lib/ReactMinimalSideNavigation.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <img className=\"title\" src={title}/>\r\n                <div className=\"mainDiv\">\r\n                    <Router>\r\n                        <NavBarC />\r\n                    </Router>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\nexport default App;\r\n","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\NavBarC.jsx",[],"C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\DownloadPage.jsx",["178"],"C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\StrainCircosResultsPage.jsx",["179","180"],"import React, {Component, useState, useRef} from \"react\";\r\nimport CircosStrain from \"../components/CircosStrain\";\r\nimport DefenseSystemStrain from \"../components/DefenseSystemStrain\"\r\n\r\nclass StrainCircosResultsPage extends Component {\r\n\r\n    state = {source: null};\r\n\r\n//\r\n    render() {\r\n        const svn = this.props.history.location.state.strainVariableName;\r\n        return(\r\n            <div>\r\n                <CircosStrain svnn={svn} />\r\n                <DefenseSystemStrain svnn={svn}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StrainCircosResultsPage;","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\StrainCircosPage.jsx",["181","182","183","184","185"],"import React, {useState} from \"react\";\r\nimport {Form, Col, Row, Button, OverlayTrigger, Tooltip} from \"react-bootstrap\";\r\nimport searchlogo from '../assets/images/research.png'\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Link} from 'react-router-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ErrorModalC from \"../components/ErrorModalC\";\r\n\r\n\r\n/**\r\n * The Strain Circos search page\r\n */\r\nexport default function StrainCircosPage() {\r\n    const [strainVariableName, setStrainVariableName] = React.useState(\"\")\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n    const childErr = React.createRef();\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n\r\n\r\n        (async () => {\r\n            const response = await fetch('http://127.0.0.1:8800/api/v1/strains');\r\n            const strains = await response.json();\r\n            if (!response.ok) {\r\n                // get error message from body or default to response status\r\n                const error = (strains && strains.message) || response.status;\r\n                return Promise.reject(error);\r\n            }\r\n            if (active) {\r\n                setOptions(strains.filter(x=> x.name != null))\r\n            }\r\n\r\n        })().catch((err) => {\r\n            console.log(err);\r\n            if (childErr.current) {\r\n                childErr.current.handleOpen();\r\n                }});\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    },[loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n            <FadeIn>\r\n                <Form>\r\n                    <Form.Group as={Row}>\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}></p>\r\n                        </Form.Label>\r\n                        <Col sm=\"4\">\r\n                            <div className=\"imgr_wr\">\r\n                                <img style={{display: \"inline-block\"}} className=\"imgr\" src={searchlogo}/>\r\n                            </div>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"selectStrain\">\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}>Select a strain</p>\r\n                        </Form.Label>\r\n\r\n                        <Col sm=\"4\">\r\n                            <Autocomplete className=\"textBox\"\r\n                                id=\"asynchronous-demo\"\r\n                                multiple={false}\r\n                                style={{ width: 800 }}\r\n                                open={open}\r\n                                onOpen={() => {\r\n                                    setOpen(true);\r\n                                }}\r\n                                onClose={() => {\r\n                                    setOpen(false);\r\n                                }}\r\n                                getOptionSelected={(option, value) => option.name === value.name}\r\n                                getOptionLabel={(option) => option.name}\r\n                                options={options}\r\n                                loading={loading}\r\n                                onInputChange={(event,newInputEvent) =>\r\n                                {\r\n                                    setStrainVariableName(newInputEvent);\r\n                                }}\r\n                                renderInput={(params) => (\r\n                                    <TextField\r\n                                        {...params}\r\n                                        label=\"Choose a strain...\"\r\n                                        variant=\"outlined\"\r\n                                        InputProps={{\r\n                                            ...params.InputProps,\r\n                                            endAdornment: (\r\n                                                <React.Fragment>\r\n                                                    {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                                                    {params.InputProps.endAdornment}\r\n                                                </React.Fragment>\r\n                                            ),\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Link to={{\r\n                            pathname: '/resultsCircosStrain',\r\n                            state: {\r\n                                strainVariableName: strainVariableName, // send the selected strain to the result display page\r\n                            }\r\n                        }}><Button>Display</Button></Link>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n            <ErrorModalC open={false} ref={childErr}/>\r\n        </div>\r\n    );\r\n}","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\ResultsPage.jsx",["186","187","188","189","190"],"import React, {Component} from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport axios from \"axios\";\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport '../styles/ResultsPage.css';\r\nimport {Button, Accordion, Card} from \"react-bootstrap\";\r\nimport {faDna, faDisease, faShieldVirus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nclass ResultsPage extends Component {\r\n    state = {\r\n        result_table: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        axios\r\n            .get(\"http://127.0.0.1:8800/api/v1/genes\")\r\n            .then((res) => {\r\n                this.setState({result_table: res.data});\r\n                console.log(this.state.result_table)\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const params = this.props.history.location.state.myArrayVariableName; // get the selected items from the search page (sent from the SearchPage component)\r\n        const rowsPerPages = this.props.history.location.state.rpp; // get the selected number of results each page from previous component\r\n\r\n        const columns = [\r\n            {dataField: \"locus_tag\", text: \"locus_tag\", sort: true},\r\n            {dataField: \"genomic_accession\", text: \"genomic accession\", sort: true},\r\n            {dataField: \"start\", text: \"start\", sort: true},\r\n            {dataField: \"end\", text: \"end\", sort: true},\r\n            {dataField: \"strand\", text: \"strand\", sort: true},\r\n            {dataField: \"name\", text: \"name\", sort: true},\r\n            {dataField: \"symbol\", text: \"symbol\", sort: true},\r\n        ]\r\n\r\n        const dna_char_to_color = {\r\n            'A': '#DC185D',\r\n            'E': '#B8144E',\r\n            'G': '#93103E',\r\n            'T': '#bc6383',\r\n            'F': '#DC185D',\r\n            'W': '#d01a5a',\r\n            'S': '#8A0512',\r\n            'M': '#9D0615',\r\n            'K': '#B10618',\r\n            'R': '#C5071A',\r\n            'Y': '#D9081D',\r\n            'B': '#EC091F',\r\n            'D': '#F6132A',\r\n            'I': '#F6132A',\r\n            'C': '#bc6383',\r\n            'H': '#F7263B',\r\n            'V': '#F83A4D',\r\n            'N': '#F83A4D',\r\n            'L': '#F94E5F',\r\n            'Q': '#FA7582',\r\n            'P': '#d01a5a',\r\n            'Z': '#370617'\r\n\r\n        }\r\n\r\n        const options = {\r\n            pageStartIndex: 1, // first page will be 0, default is 1\r\n            paginationSize: 10,  // the pagination bar size, default is 5\r\n            sizePerPage: rowsPerPages,\r\n            showTotal: true, // display pagination information\r\n            firstPageText: '<<', // the text of first page button\r\n            prePageText: 'Prev', // the text of previous page button\r\n            nextPageText: 'Next', // the text of next page button\r\n            lastPageText: '>>', // the text of last page button\r\n            nextPageTitle: 'Go to next', // the title of next page button\r\n            prePageTitle: 'Go to previous', // the title of previous page button\r\n            firstPageTitle: 'Go to first', // the title of first page button\r\n            lastPageTitle: 'Go to last', // the title of last page button\r\n            hideSizePerPage: false, // hide the size per page dropdown\r\n            hidePageListOnlyOnePage: true, // hide pagination bar when only one page, default is false\r\n\r\n        }\r\n\r\n        const expandRow = {\r\n            renderer: (row, rowIndex) => {return (\r\n                <div>\r\n\r\n                    <Accordion defaultActiveKey={\"0\"}>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Accordion.Toggle className=\"acrd\" as={Button} variant=\"link\" eventKey=\"0\">\r\n                                    <FontAwesomeIcon icon={faDna}/> DNA Sequence\r\n                                </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey=\"0\">\r\n                                <Card.Body id=\"d-seq\">\r\n                                    {row['dna_sequence'].split(\"\").map(char => {\r\n                                        return <span className={\"seq_c\"}\r\n                                                     style={{color: this.colorCharProtein(char)}}>{`${char}`}</span>;\r\n                                    })}\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                    <FontAwesomeIcon icon={faDisease}/> Protein Sequence\r\n                                </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey=\"1\">\r\n                                <Card.Body id=\"p-seq\">\r\n                                    {row['protein_sequence'].split(\"\").map(char => {\r\n                                        return <span className={\"seq_c\"}\r\n                                                     style={{color: dna_char_to_color[char]}}>{`${char}`}</span>;\r\n                                    })}\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n\r\n                </div>\r\n            )}, onlyOneExpanding: true\r\n        };\r\n\r\n\r\n        return (\r\n            <div>\r\n                <FadeIn>\r\n                    <div style={{height: \"100%\", width: \"90%\",marginLeft:\"5%\"}}>\r\n                        <BootstrapTable\r\n                            keyField=\"locus_tag\"\r\n                            data={this.state.result_table}\r\n                            columns={columns} //which columns from the data to show as columns\r\n                            pagination={ paginationFactory(options) }\r\n                            expandRow={expandRow}\r\n                        />\r\n                    </div>\r\n                </FadeIn>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    colorCharProtein(char) {\r\n        if (char == 'A')\r\n            return 'red'\r\n        else if (char == 'T') {\r\n            return 'green'\r\n        } else if (char == 'G') {\r\n            return 'brown'\r\n        }\r\n        return 'blue'\r\n    }\r\n}\r\n\r\nexport default ResultsPage;","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\SearchPage.jsx",["191","192","193","194","195","196","197"],"import React, {useState} from \"react\";\r\nimport '../styles/SearchPage.css';\r\nimport {Form, Col, Row, Button, OverlayTrigger, Tooltip} from \"react-bootstrap\";\r\nimport searchlogo from '../assets/images/research.png'\r\nimport {faQuestion} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Link} from 'react-router-dom';\r\nimport AutocompleteC from \"../components/AutocompleteC\";\r\n\r\nexport default function SearchPage() {\r\n    const [rpp, setRpp] = React.useState(10);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const [selectedA, setSelectedA] = React.useState(false);\r\n    const [buttonOff, setButtonOff] = React.useState(true)\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        if (getSelectedLength() > 0){\r\n            setButtonOff(false)\r\n        }\r\n        else{\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedA]);\r\n\r\n    const getSelectedLength = () => {\r\n        return selectedA.length;\r\n    }\r\n\r\n    const getSelected = (selected) => {\r\n        setSelectedA(selected)\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n            <FadeIn>\r\n                <Form>\r\n                    <Form.Group as={Row}>\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}></p>\r\n                        </Form.Label>\r\n                        <Col sm=\"4\">\r\n                            <div className=\"imgr_wr\">\r\n                                <img style={{display: \"inline-block\"}} className=\"imgr\" src={searchlogo}/>\r\n                            </div>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"selectStrain\">\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}>{\"Select single/multiple strain/s:\"}</p>\r\n                        </Form.Label>\r\n\r\n                        <Col sm=\"4\">\r\n                            <AutocompleteC multipleChoice={true} true parentCallback={getSelected} apiUrl=\"http://127.0.0.1:8800/api/v1/strains\"/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"numResults\">\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}>Number of results in page:</p>\r\n                        </Form.Label>\r\n                        <Col xs=\"auto\">\r\n                            <Form.Control className=\"mb-1\" as=\"select\" value={rpp}\r\n                                          onChange={e => setRpp(e.target.value)}>\r\n                                <option>10</option>\r\n                                <option>25</option>\r\n                                <option>30</option>\r\n                                <option>50</option>\r\n                                <option>1000</option>\r\n                            </Form.Control>\r\n                        </Col>\r\n\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Link to={{\r\n                            pathname: '/results',\r\n                            state: {\r\n                                myArrayVariableName: selectedA, // send the selected items as a parameter to the result page\r\n                                rpp: rpp //send the number of results per page as a parameter to the result page\r\n                            }\r\n                        }}><Button disabled={buttonOff}>Search</Button></Link>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\CorrelationResultsPage.jsx",["198","199","200","201"],"import React, {Component, useState, useRef} from \"react\";\r\nimport CorrelationGraph from \"../components/CorrelationGraph\";\r\nimport DefVSDef from \"../components/CorrelationComponents/DefVSDef\";\r\nimport DefVSIsoType from \"../components/CorrelationComponents/DefVSIsoType\";\r\n\r\nclass CorrelationResultsPage extends Component {\r\n\r\n    state = {source: null};\r\n\r\n\r\n    render() {\r\n        const items = this.props.myArrayVariableName; // The items which were selected by the user in the CorrelationSearchPage\r\n        const eventKey = this.props.eventK; //The current eventkey which were selected by the user in the CorrelationSearchPage\r\n\r\n        console.log(items)\r\n        return(\r\n            <div>\r\n                <CorrelationGraph eventK={eventKey} itemsSelected={items}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CorrelationResultsPage;","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\BrowsePage.jsx",["202","203","204","205","206","207","208"],"import React, {Component, useEffect, useRef, useState} from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport axios from \"axios\";\r\nimport {TransformWrapper, TransformComponent} from \"react-zoom-pan-pinch\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {ArrowsFullscreen, ZoomIn, ZoomOut} from \"react-bootstrap-icons\";\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport '../styles/BrowsePage.css';\r\nimport chroma from 'chroma-js';\r\nimport Select from 'react-select';\r\nimport Button from 'react-bootstrap/Button';\r\nimport '../assets/fonts/YesevaOne-Regular.ttf';\r\nimport MiniDrawer from \"../components/Drawer\";\r\nimport Cluster from \"../components/Cluster\";\r\nimport IsolationType from \"../components/IsolationType\";\r\nimport GenesByClusterC from \"../components/GenesByClusterC\";\r\nimport TextOrFileUpload from \"../components/TextOrFileUpload\";\r\nimport ErrorModalC from \"../components/ErrorModalC\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport WarningModalC from \"../components/WarningModalC\";\r\n\r\n\r\nvar qs = require('qs');\r\n/**\r\n * the Browse Page - phylogenetic trees\r\n */\r\nclass BrowsePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.cluster = React.createRef();\r\n        this.isltype = React.createRef();\r\n        this.childErr = React.createRef();\r\n        this.childWar = React.createRef()\r\n        this.state = {\r\n            source: [],\r\n            loaded: false,\r\n            textbox: true,\r\n            textOrFile: 'Text Box',\r\n            selectedOption: [],\r\n            selectedFile: {},\r\n            selectedStrains: [],\r\n            isOpen: false,\r\n            generateType: [\"defense\"],\r\n            checkmlst: false,\r\n            loadedCluster: false,\r\n            colourOptions:{},\r\n            list_strain_gene:[],\r\n            badSystems: [],\r\n            badStrains: []\r\n        }\r\n    };\r\n\r\n    /*\r\n    load empty phylogenetic tree as default tree\r\n     */\r\n    componentDidMount() {\r\n        Promise.all([axios\r\n            .get(\r\n                \"http://127.0.0.1:8800/api/v1/strains/phyloTree\",\r\n                {responseType: 'arraybuffer'},\r\n            ),axios\r\n            .get(\r\n                \"http://127.0.0.1:8800/api/v1/strains/defSystemsColors\"\r\n            )]).then(([response,colors])=>{\r\n            const base64 = btoa(\r\n                new Uint8Array(response.data).reduce(\r\n                    (data, byte) => data + String.fromCharCode(byte),\r\n                    '',\r\n                ),\r\n            );\r\n            this.setState({source: \"data:;base64,\" + base64});\r\n            this.setState({loaded: true});\r\n            console.log(colors.data)\r\n            this.setState({colourOptions: colors.data});\r\n        }).catch((err) => {\r\n            this.setState({loaded: true})\r\n            console.log(err);\r\n            if (this.childErr.current) {\r\n                this.childErr.current.handleOpen(\"There is a problem with the server request. We apologize for the inconvenience.\");\r\n            }});\r\n    }\r\n\r\n    /*\r\n    compute a new tree when the user click the button \"generate tree\"\r\n    similar to the orginial function, this time - with query params.\r\n     */\r\n    async computeTree() {\r\n        this.setState({source: []});\r\n        this.setState({loaded: false});\r\n        this.setState({loadedCluster: false})\r\n        let systems = []\r\n        if (this.state.generateType.includes(\"cluster\")) {\r\n            await this.setState({list_strain_gene:[...this.cluster.current.getTree()]})\r\n        }\r\n            let url = \"http://127.0.0.1:8800/api/v1/strains/phyloTree\"\r\n            return axios\r\n                .get(url, {\r\n                        params: {\r\n                            systems: this.state.generateType.includes(\"defense\") ? this.state.selectedOption.map((option) => option.label): [],\r\n                            subtree: this.state.textbox == false ? this.state.selectedFile : this.state.selectedStrains,\r\n                            list_strain_gene: this.state.generateType.includes(\"cluster\") ? this.state.list_strain_gene : [],\r\n                            avg_defense_sys: this.state.generateType.includes(\"distinct systems\"),\r\n                            isolation_type: this.state.generateType.includes(\"isolation\"),\r\n                            MLST: this.state.checkmlst\r\n                        },\r\n                        paramsSerializer: function (params) {\r\n                            return qs.stringify(params, {arrayFormat: 'repeat'})\r\n                        },\r\n                        responseType: 'arraybuffer',\r\n                    }\r\n                )\r\n                .then(response => {\r\n                    const base64 = btoa(\r\n                        new Uint8Array(response.data).reduce(\r\n                            (data, byte) => data + String.fromCharCode(byte),\r\n                            '',\r\n                        ),\r\n                    );\r\n                    this.setState({source: \"data:;base64,\" + base64});\r\n                    this.setState({loaded: true})\r\n                    if (this.state.generateType.includes(\"cluster\")){\r\n                        this.setState({loadedCluster: true})\r\n                    }\r\n                    console.log(response.headers['bad_subtree'])\r\n                    if(response.headers['bad_subtree'].length>0 || response.headers['bad_systems'].length>0){\r\n                        this.setState({badSystems: response.headers['bad_systems']},()=>{\r\n                            this.setState({badStrains: response.headers['bad_subtree']},() => {\r\n                                if (this.childErr.current) {\r\n                                    this.childWar.current.handleOpen();\r\n                                }\r\n                            });\r\n                        });\r\n\r\n                    }\r\n                }).catch((err) => {\r\n                        this.setState({loaded: true})\r\n                        console.log(\"the error:\" +err);\r\n                        if (this.childErr.current) {\r\n                            this.childErr.current.handleOpen(\"There is a problem with the server request. We apologize for the inconvenience.\");\r\n                        }\r\n                    }\r\n                );\r\n        }\r\n\r\n    /*\r\n    handle file upload and load each line to array of\r\n     integers (aka strain indexes for subtree) for subtree generating\r\n     using selectedFile state.\r\n     */\r\n    onFileChange = e => {\r\n\r\n        // Update the state\r\n        if (e.target.files.length > 0) {\r\n            e.preventDefault()\r\n            const reader = new FileReader()\r\n            reader.onload = async (e) => {\r\n                const text = (e.target.result);\r\n                this.setState({selectedFile: text.split(/\\r?\\n/)});\r\n                e.target.value = null;\r\n            };\r\n            reader.readAsText(e.target.files[0])\r\n        }\r\n\r\n    };\r\n\r\n    /*\r\n    handle the values inserted to autocomplete component and\r\n    saves them in variable of subtree selectedStrains\r\n     */\r\n\r\n    handleTextBox = selected => {\r\n        console.log(selected)\r\n        // Update the state\r\n        if (selected.length > 0) {\r\n            let array = [];\r\n            Object.keys(selected).map((key, index) => (\r\n                array.push(selected[key]['index'])\r\n            ))\r\n            this.setState({selectedStrains: [...array]});\r\n        }\r\n\r\n    };\r\n\r\n    arrayRemove = (arr, value) =>{\r\n\r\n        return arr.filter(function(geeks){\r\n            return geeks != value;\r\n        });\r\n\r\n    }\r\n\r\n    generatingTypeHandler = Gtype => {\r\n        let isActive = this.state.generateType.includes(Gtype);\r\n        if (isActive){\r\n            this.setState({generateType: this.arrayRemove(this.state.generateType, Gtype)});\r\n        }\r\n        else{\r\n            let newArr = [...this.state.generateType,Gtype]\r\n            this.setState({generateType: [...newArr]});\r\n        }\r\n    }\r\n\r\n    /*\r\n    update the state of the file upload/strain selection on change\r\n     */\r\n    setSwitchTextBox = data => {\r\n        this.setState({textbox: data});\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const resetParams = () => {\r\n            this.setState({selectedFile:{}})\r\n            this.setState({selectedStrains:[]})\r\n            this.setState({checkmlst:false})\r\n            this.setState({selectedOption: []})\r\n            console.log(this.state.selectedFile)\r\n            console.log(this.state.selectedOption)\r\n            console.log(this.state.selectedStrains)\r\n            console.log(this.state.checkmlst)\r\n        }\r\n\r\n        /*\r\n        handles defense systems choice into selectedOptions state and save it.\r\n         */\r\n        const handleChange = selectedOption => {\r\n            if (selectedOption == null) {\r\n                selectedOption = []\r\n            }\r\n            this.setState(\r\n                {selectedOption},\r\n                () => console.log(`Option selected:`, this.state.selectedOption)\r\n            );\r\n        };\r\n\r\n        /*\r\n        color the defense systems options in the autocomplete box.\r\n        also, handles multi value selection in it.\r\n         */\r\n        const colourStyles = {\r\n            control: styles => ({...styles, backgroundColor: 'white'}),\r\n            option: (styles, {data, isDisabled, isFocused, isSelected}) => {\r\n                const color = chroma(data.color);\r\n                return {\r\n                    ...styles,\r\n                    backgroundColor: isDisabled\r\n                        ? null\r\n                        : isSelected\r\n                            ? data.color\r\n                            : isFocused\r\n                                ? color.alpha(0.1).css()\r\n                                : null,\r\n                    color: isDisabled\r\n                        ? '#ccc'\r\n                        : isSelected\r\n                            ? chroma.contrast(color, 'white') > 2\r\n                                ? 'white'\r\n                                : 'black'\r\n                            : data.color,\r\n                    cursor: isDisabled ? 'not-allowed' : 'default',\r\n\r\n                    ':active': {\r\n                        ...styles[':active'],\r\n                        backgroundColor:\r\n                            !isDisabled && (isSelected ? data.color : color.alpha(0.3).css()),\r\n                    },\r\n                };\r\n            },\r\n            multiValue: (styles, {data}) => {\r\n                const color = chroma(data.color);\r\n                return {\r\n                    ...styles,\r\n                    backgroundColor: color.alpha(0.1).css(),\r\n                };\r\n            },\r\n            multiValueLabel: (styles, {data}) => ({\r\n                ...styles,\r\n                color: data.color,\r\n            }),\r\n            multiValueRemove: (styles, {data}) => ({\r\n                ...styles,\r\n                color: data.color,\r\n                ':hover': {\r\n                    backgroundColor: data.color,\r\n                    color: 'white',\r\n                },\r\n            }),\r\n        };\r\n\r\n        /*\r\n        render choice of drawer into the defense systems/cluster/isolation type\r\n        section and component\r\n         */\r\n        const renderGenerateType = () => {\r\n                return (<div>\r\n                    {this.state.generateType.includes(\"defense\") && (<div>\r\n                        <div>Choose the Defense Systems you would like to show:</div>\r\n                        <Select\r\n                            closeMenuOnSelect={false}\r\n                            isMulti\r\n                            // options={this.state.colourOptions}\r\n                            options={this.state.colourOptions && this.state.colourOptions.constructor === Array ? this.state.colourOptions : Array(this.state.colourOptions)}\r\n                            styles={colourStyles}\r\n                            onChange={handleChange}\r\n                            value={this.state.selectedOption}\r\n                        />\r\n                        <br/><Divider/><br/>\r\n                    </div>)}\r\n                        {this.state.generateType.includes(\"cluster\") && (<div>\r\n                            <div>Choose the number of genes you would like to show:</div>\r\n                            <Cluster ref={this.cluster}/>\r\n                            <br/><Divider/><br/>\r\n                        </div>)}\r\n                        {this.state.generateType.includes(\"isolation\") &&(<div><IsolationType ref={this.isltype}/><br/><Divider/><br/></div>)}\r\n                        {this.state.generateType.includes(\"distinct systems\") && (<div>showing the distribution of distinct count of defense systems of each strain across the\r\n                            tree<br/><Divider/><br/></div>)}\r\n                    </div>\r\n                )\r\n        }\r\n\r\n        const setCheckMLST = () => {\r\n            let a = !this.state.checkmlst;\r\n            this.setState({checkmlst: a}, function () {\r\n                console.log(this.state.checkmlst);\r\n            })\r\n        }\r\n\r\n        const downloadCluster = () => {\r\n            if (this.state.generateType.includes(\"cluster\") && this.cluster.current) {\r\n                if (this.state.loadedCluster) {\r\n                    return (\r\n                        <GenesByClusterC\r\n                            genes={[this.cluster.current.state.selected_geneA, this.cluster.current.state.selected_geneB, this.cluster.current.state.selected_geneC]}/>\r\n                    )\r\n                }\r\n                return (<div></div>)\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"mainDiv\">\r\n                <FadeIn>\r\n                    <div className='rowC'>\r\n                        <div className='sidebar'>\r\n                            <div className=\"instructions\">choose a way to upload strains and create subtree:</div>\r\n                            <TextOrFileUpload updateTextbox={this.setSwitchTextBox}\r\n                                              apiUrl=\"http://127.0.0.1:8800/api/v1/strains/indexes\"\r\n                                              multipleChoice={true}\r\n                                              parentFileChangeCallback={this.onFileChange}\r\n                                              parentHandleTextBox={this.handleTextBox} label=\"Please upload a file that contains a list of strains\r\n                            separated by new lines (/n)\"/>\r\n\r\n                            <Divider/>\r\n                            <br/>\r\n                            <div style={{width: \"95%\", marginLeft: \"5%\"}}>\r\n                                {renderGenerateType()}\r\n                                <div className='rowC'>\r\n                                    <input style={{marginTop:'2%', marginLeft:\"3%\"}} id='1' type=\"checkbox\" name=\"mlst\" onChange={setCheckMLST} checked={this.state.checkmlst}/>\r\n                                    <label style={{paddingLeft: '3%'}} htmlFor='1'> Display MLST across the tree</label>\r\n                                </div>\r\n                                <br/>\r\n                                <div class=\"rowC\">\r\n                                    <Button onClick={resetParams} variant=\"outline-primary\"\r\n                                            className='resetParams'>Reset Query</Button>\r\n                                    <Button onClick={() => this.computeTree()} variant=\"outline-primary\"\r\n                                            className='GenerateTree'>Generate Tree</Button>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className='Phylo_Tree'>\r\n                            <TransformWrapper\r\n                                defaultScale={1}\r\n                                defaultPositionX={200}\r\n                                defaultPositionY={100}\r\n                            >\r\n                                {({zoomIn, zoomOut, resetTransform, ...rest}) => (\r\n                                    <React.Fragment>\r\n                                        <div style={{marginLeft: \"40%\"}} className=\"tools\">\r\n                                            <IconButton onClick={zoomIn} color=\"primary\" aria-label=\"upload picture\"\r\n                                                        component=\"span\">\r\n                                                <ZoomIn/>\r\n                                            </IconButton>\r\n                                            <IconButton onClick={zoomOut} color=\"primary\" aria-label=\"upload picture\"\r\n                                                        component=\"span\">\r\n                                                <ZoomOut/>\r\n                                            </IconButton>\r\n                                            <IconButton onClick={resetTransform} color=\"primary\"\r\n                                                        aria-label=\"upload picture\"\r\n                                                        component=\"span\">\r\n                                                <ArrowsFullscreen/>\r\n                                            </IconButton>\r\n                                        </div>\r\n                                        {!this.state.loaded && (\r\n                                            <div style={{marginLeft: \"45%\"}}><Spinner animation=\"border\"\r\n                                                                                      variant=\"primary\"/>\r\n                                            </div>)}\r\n                                        <TransformComponent>\r\n\r\n\r\n                                            <img style={{\r\n                                                height: \"100%\",\r\n                                                width: \"100%\",\r\n                                            }}\r\n                                                 src={this.state.source}/>\r\n                                        </TransformComponent>\r\n                                    </React.Fragment>\r\n                                )}\r\n                            </TransformWrapper>\r\n                            {downloadCluster()}\r\n                            <div id=\"drawer\">\r\n                                <MiniDrawer generatingTypeHandler={this.generatingTypeHandler}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </FadeIn>\r\n                <ErrorModalC open={false} ref={this.childErr}/>\r\n                <WarningModalC open={false} badSystems={this.state.badSystems} badStrains={this.state.badStrains} ref={this.childWar}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default BrowsePage;\r\n\r\n","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\MainPage.jsx",["209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231"],"import React, {Component} from \"react\";\r\nimport {Card, Fade, Container, Row, Col, Carousel} from \"react-bootstrap\";\r\nimport {Bell, Book} from 'react-bootstrap-icons';\r\nimport styles from '../styles/MainPage.css';\r\nimport FadeIn from 'react-fade-in';\r\nimport slide1 from \"../assets/images/slide1.jpg\"\r\nimport slide2 from \"../assets/images/slide2.jpg\"\r\nimport slide3 from \"../assets/images/slide3.jpg\"\r\nimport slide4 from \"../assets/images/slide4.jpg\"\r\nimport slide5 from \"../assets/images/slide5.jpg\"\r\nimport slide6 from \"../assets/images/slide6.jpg\"\r\nimport {faDna, faAtom} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport AwesomeSlider from 'react-awesome-slider';\r\nimport 'react-awesome-slider/dist/styles.css';\r\nimport CoreStyles from 'react-awesome-slider/src/core/styles.scss';\r\nimport AnimationStyles from 'react-awesome-slider/src/styled/fold-out-animation/fold-out-animation.scss';\r\nimport axios from \"axios\";\r\nimport AwesomeSliderStyles from 'react-awesome-slider/src/styles';\r\nimport GenesByClusterC from \"../components/GenesByClusterC\";\r\nimport DropdownCheckbox from \"../components/DropdownCheckbox\";\r\nimport CorrelationGraph from \"../components/CorrelationGraph\";\r\nimport CorrelationResultsPage from \"./CorrelationResultsPage\";\r\n\r\n\r\nclass MainPage extends Component {\r\n\r\n    state = {source: null};\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <FadeIn>\r\n                    <div style={{width: \"98%\", marginLeft: \"1%\"}}>\r\n                        <Carousel>\r\n                            <Carousel.Item>\r\n                                <img\r\n                                    style={{height: \"750px\", objectFit: 'cover'}}\r\n                                    className=\"d-block w-100\"\r\n                                    src={slide4}\r\n                                    alt=\"First slide\"\r\n                                />\r\n                                <Carousel.Caption>\r\n                                    <div className=\"caption_wrper\">\r\n                                    <div className=\"slidecaption\">\r\n                                        <h1>Pseudomonoas AeruginoSite</h1>\r\n                                    </div>\r\n                                    </div>\r\n                                </Carousel.Caption>\r\n                            </Carousel.Item>\r\n                            <Carousel.Item>\r\n                                <img\r\n                                    style={{height: \"750px\", objectFit: 'cover'}}\r\n                                    className=\"d-block w-100\"\r\n                                    src={slide5}\r\n                                    alt=\"Second slide\"\r\n                                />\r\n\r\n                                <Carousel.Caption>\r\n                                    <div className=\"caption_wrper\">\r\n                                    <div className=\"slidecaption\">\r\n                                        <h3>Web-platform for exploration of the bacteria Pseudomonas Aeruginosa</h3>\r\n                                        <p>Explore strains,genes and defense systems using advanced visualization and\r\n                                            tabular tools for convenient research </p>\r\n                                    </div>\r\n                                    </div>\r\n                                </Carousel.Caption>\r\n                            </Carousel.Item>\r\n                            <Carousel.Item>\r\n                                <img\r\n                                    style={{height: \"750px\", objectFit: 'cover'}}\r\n                                    className=\"d-block w-100\"\r\n                                    src={slide6}\r\n                                    alt=\"Third slide\"\r\n                                />\r\n\r\n                                <Carousel.Caption>\r\n                                    <div className=\"caption_wrper\">\r\n                                    <div className=\"slidecaption\">\r\n                                        <h3>Contact us and Citation</h3>\r\n                                        <p>Let us know if anything is missing or any feedback</p>\r\n                                    </div>\r\n                                    </div>\r\n                                </Carousel.Caption>\r\n                            </Carousel.Item>\r\n                        </Carousel>\r\n                    </div>\r\n                </FadeIn>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainPage;\r\n","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\pages\\CorrelationSearchPage.jsx",["232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253"],"import React from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Button, Col, Form, Nav, Row, Tab} from \"react-bootstrap\";\r\nimport searchlogo from \"../assets/images/research.png\";\r\nimport {Link} from \"react-router-dom\";\r\nimport DefVSDef from \"../components/CorrelationComponents/DefVSDef\";\r\nimport DefVSIsoType from \"../components/CorrelationComponents/DefVSIsoType\";\r\nimport StrainForm from \"../components/StrainForm\";\r\nimport GenesByClusterC from \"../components/GenesByClusterC\";\r\nimport CorrelationResultsPage from \"./CorrelationResultsPage\";\r\nimport MiniDrawer from \"../components/Drawer\";\r\nimport '../styles/CorrelationSearchPage.css'\r\nimport DrawerCorrelation from \"../components/CorrelationComponents/DrawerCorrelation\";\r\nimport DefVSCluster from \"../components/CorrelationComponents/DefVSCluster\";\r\nimport ClusterVSIsoType from \"../components/CorrelationComponents/ClusterVSIsoType\";\r\nimport DefVSCat from \"../components/CorrelationComponents/DefVSCat\";\r\n\r\n\r\nclass CorrelationSearchPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            results: false, //flag to show if the result is shown or not\r\n            params: [], //holds the params for the calculations in the result window\r\n            generateType: 'dvd' //holds the current eventKey of the tabs (which tab was selected last)\r\n        };\r\n    };\r\n\r\n    getParams = (params) => {\r\n        this.setState({params: params})\r\n        this.setState({results: true})\r\n    }\r\n\r\n    getTwoParams = (param1, param2) => {\r\n        this.setState({params: [param1[0], param2[0]]})\r\n        this.setState({results: true})\r\n    }\r\n\r\n    getThreeParams = (param1, param2, param3) => {\r\n        this.setState({params: [param1[0], param2, param3[0]]})\r\n        this.setState({results: true})\r\n    }\r\n\r\n    changeResults = () => {\r\n        this.setState({results: false})\r\n    }\r\n\r\n    generatingTypeHandler = Gtype => {\r\n        this.changeResults()\r\n        if (Gtype == \"dvd\") {\r\n            this.setState({generateType: \"dvd\"})\r\n        } else if (Gtype == \"dvc\") {\r\n            this.setState({generateType: \"dvc\"})\r\n        } else if (Gtype == \"dvi\") {\r\n            this.setState({generateType: \"dvi\"})\r\n        } else if (Gtype == \"dvcl\") {\r\n            this.setState({generateType: \"dvcl\"})\r\n        } else {\r\n            this.setState({generateType: \"clvi\"})\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        // const currWindow = () => {\r\n        //     if (this.state.results == false) {\r\n        //         let currEvenKey = this.state.key  //holds the current eventKey of the tabs (which tab was selected last)\r\n        //         if (currEvenKey == 'first') {\r\n        //             return (<DefVSDef parentCallback2={this.getParams}/>)\r\n        //         } else if (currEvenKey == 'second') {\r\n        //\r\n        //         } else {\r\n        //             return (<DefVSIsoType parentCallback2={this.getTwoParams}/>)\r\n        //         }\r\n        //     } else {\r\n        //         return (<CorrelationResultsPage eventK={this.state.key} myArrayVariableName={this.state.params}/>)\r\n        //     }\r\n        // }\r\n\r\n        const currWindow = () => {\r\n            if (this.state.results == false) {\r\n                let currEvenKey = this.state.generateType  //holds the current eventKey of the tabs (which tab was selected last)\r\n                if (currEvenKey == 'dvd') {\r\n                    return (<DefVSDef parentCallback2={this.getParams}/>)\r\n                } else if (currEvenKey == 'dvc') {\r\n                    return (<DefVSCat parentCallback2={this.getTwoParams}/>)\r\n                } else if (currEvenKey == 'dvi') {\r\n                    return (<DefVSIsoType parentCallback2={this.getTwoParams}/>)\r\n                } else if (currEvenKey == 'dvcl') {\r\n                    return (<DefVSCluster parentCallback2={this.getThreeParams}/>)\r\n                } else if (currEvenKey == 'clvi') {\r\n                    return (<ClusterVSIsoType parentCallback2={this.getThreeParams}/>)\r\n                }\r\n\r\n            } else {\r\n                return (\r\n                    <CorrelationResultsPage eventK={this.state.generateType} myArrayVariableName={this.state.params}/>)\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <div>\r\n                {/*<Tab.Container activeKey={this.state.key} onSelect={(k) => this.setState({key: k})} id=\"left-tabs-example\" defaultActiveKey=\"first\">*/}\r\n                {/*    <h2>Correlation</h2>*/}\r\n                {/*    <Row>*/}\r\n                {/*        <Col sm={2}>*/}\r\n                {/*            <Nav variant=\"pills\" className=\"flex-column\">*/}\r\n                {/*                <Nav.Item>*/}\r\n                {/*                    <Nav.Link onSelect={this.changeResults} eventKey=\"first\">Defense System vs Defense System</Nav.Link>*/}\r\n                {/*                </Nav.Item>*/}\r\n                {/*                <Nav.Item>*/}\r\n                {/*                    <Nav.Link onSelect={this.changeResults}  eventKey=\"second\">Category vs Defense System</Nav.Link>*/}\r\n                {/*                </Nav.Item>*/}\r\n                {/*                <Nav.Item>*/}\r\n                {/*                    <Nav.Link onSelect={this.changeResults}  eventKey=\"third\">Iso Type vs Defense System</Nav.Link>*/}\r\n                {/*                </Nav.Item>*/}\r\n                {/*            </Nav>*/}\r\n                {/*        </Col>*/}\r\n                {/*        <Col sm={10}>*/}\r\n                {/*            <Tab.Content>*/}\r\n                {/*                <Tab.Pane eventKey=\"first\">*/}\r\n                {/*                    {currWindow()}*/}\r\n                {/*                </Tab.Pane>*/}\r\n                {/*                <Tab.Pane eventKey=\"second\">*/}\r\n                {/*                    {currWindow()}*/}\r\n                {/*                </Tab.Pane>*/}\r\n                {/*                <Tab.Pane eventKey=\"third\">*/}\r\n                {/*                    {currWindow()}*/}\r\n                {/*                </Tab.Pane>*/}\r\n                {/*            </Tab.Content>*/}\r\n                {/*        </Col>*/}\r\n                {/*    </Row>*/}\r\n                {/*</Tab.Container>*/}\r\n\r\n                {currWindow()}\r\n\r\n                <div className=\"sidebar\" id=\"drawer\">\r\n                    <DrawerCorrelation generatingTypeHandler={this.generatingTypeHandler}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CorrelationSearchPage;","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\utilities\\colors.js",[],["254","255"],"C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CircosStrain.jsx",["256"],"import React, {Component} from \"react\";\r\nimport '../styles/CircosStrain.css';\r\n\r\nclass CircosStrain extends Component {\r\n    state = {\r\n        file: null,\r\n        loaded: false\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <iframe className=\"circosFrame\" src={\"http://127.0.0.1:8800/api/v1/strains/strainCircos/\" + this.props.svnn} width=\"1000\" height=\"1000\" />\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CircosStrain;","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\DefenseSystemStrain.jsx",["257"],"import React, {Component} from \"react\";\r\nimport axios from \"axios\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport '../styles/DefenseSystemStrain.css';\r\nimport ToolkitProvider, { CSVExport } from 'react-bootstrap-table2-toolkit';\r\nimport {faDownload, faQuestion} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nclass DefenseSystemStrain extends Component {\r\n    state = {\r\n        result_table: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        axios\r\n            .get(\r\n                \"http://127.0.0.1:8800/api/v1/strains/strainGenesDefSystems/\"+this.props.svnn\r\n            )\r\n            .then(response => {\r\n                this.setState({result_table: response.data})\r\n            });\r\n    }\r\n    render() {\r\n        const { ExportCSVButton } = CSVExport;\r\n        const columns = [\r\n            {dataField: \"locus_tag\", text: \"locus tag\", sort: true},\r\n            {dataField: \"defense_system\", text: \"defense system \", sort: true},\r\n            {dataField: \"anti_crispr\", text: \"anti crispr\", sort: true},\r\n        ]\r\n\r\n        return (\r\n            <div>\r\n                <FadeIn>\r\n                    <div style={{height: \"100%\", width: \"90%\",marginLeft:\"5%\"}}>\r\n\r\n                        <ToolkitProvider\r\n                            keyField=\"id\"\r\n                            data={this.state.result_table}\r\n                            columns={ columns }\r\n                            exportCSV\r\n                        >\r\n                            {\r\n                                props => (\r\n                                    <div>\r\n                                        <BootstrapTable  { ...props.baseProps }\r\n                                                         pagination={paginationFactory({\r\n                                                             sizePerPage: 50,\r\n                                                             pageStartIndex: 1, // first page will be 0, default is 1\r\n                                                             paginationSize: 10,  // the pagination bar size, default is 5\r\n                                                             showTotal: true, // display pagination information\r\n                                                             firstPageText: '<<', // the text of first page button\r\n                                                             prePageText: 'Prev', // the text of previous page button\r\n                                                             nextPageText: 'Next', // the text of next page button\r\n                                                             lastPageText: '>>', // the text of last page button\r\n                                                             nextPageTitle: 'Go to next', // the title of next page button\r\n                                                             prePageTitle: 'Go to previous', // the title of previous page button\r\n                                                             firstPageTitle: 'Go to first', // the title of first page button\r\n                                                             lastPageTitle: 'Go to last', // the title of last page button\r\n                                                             hideSizePerPage: false, // hide the size per page dropdown\r\n                                                             hidePageListOnlyOnePage: true, // hide pagination bar when only one page, default is false\r\n                                                         })}\r\n                                        />\r\n                                        <ExportCSVButton className=\"exportB\" { ...props.csvProps }><FontAwesomeIcon icon={faDownload}/> Download to CSV</ExportCSVButton>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </ToolkitProvider>\r\n\r\n                        {/*<BootstrapTable*/}\r\n                        {/*    keyField=\"locus_tag\"*/}\r\n                        {/*    data={this.state.result_table}*/}\r\n                        {/*    columns={columns} //which columns from the data to show as columns*/}\r\n                        {/*    pagination={paginationFactory({*/}\r\n                        {/*        sizePerPage: 50,*/}\r\n                        {/*        pageStartIndex: 1, // first page will be 0, default is 1*/}\r\n                        {/*        paginationSize: 10,  // the pagination bar size, default is 5*/}\r\n                        {/*        showTotal: true, // display pagination information*/}\r\n                        {/*        firstPageText: '<<', // the text of first page button*/}\r\n                        {/*        prePageText: 'Prev', // the text of previous page button*/}\r\n                        {/*        nextPageText: 'Next', // the text of next page button*/}\r\n                        {/*        lastPageText: '>>', // the text of last page button*/}\r\n                        {/*        nextPageTitle: 'Go to next', // the title of next page button*/}\r\n                        {/*        prePageTitle: 'Go to previous', // the title of previous page button*/}\r\n                        {/*        firstPageTitle: 'Go to first', // the title of first page button*/}\r\n                        {/*        lastPageTitle: 'Go to last', // the title of last page button*/}\r\n                        {/*        hideSizePerPage: false, // hide the size per page dropdown*/}\r\n                        {/*        hidePageListOnlyOnePage: true, // hide pagination bar when only one page, default is false*/}\r\n                        {/*    })}*/}\r\n                        {/*/>*/}\r\n                    </div>\r\n                </FadeIn>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default DefenseSystemStrain;","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\Drawer.jsx",["258","259","260"],"import React from \"react\";\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport clsx from 'clsx';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport List from '@material-ui/core/List';\r\nimport { BsShieldShaded } from 'react-icons/bs';\r\nimport { SiMicrogenetics } from 'react-icons/si';\r\nimport { GiDrippingTube } from 'react-icons/gi';\r\nimport { GiShieldEchoes } from 'react-icons/gi';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        whiteSpace: 'nowrap',\r\n\r\n    },\r\n    drawerOpen: {\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerClose: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        overflowX: 'hidden',\r\n        width: theme.spacing(7) + 1,\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(7) + 1,\r\n        },\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        // justifyContent: 'flex-end',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nexport default function MiniDrawer({generatingTypeHandler}) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleDrawerOpen = () => {\r\n        if (open == true) {\r\n            setOpen(false)\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Drawer\r\n                PaperProps={{ style: { position: 'absolute' ,height:'90.7%',marginTop:'4.5%'},width:'70%' }}\r\n                BackdropProps={{ style: { position: 'absolute' } }}\r\n                ModalProps={{\r\n                    container: document.getElementById('drawer'),\r\n                    style: { position: 'absolute' }\r\n                }}\r\n                anchor='right'\r\n                variant=\"permanent\"\r\n                className={clsx(classes.drawer, {\r\n                    [classes.drawerOpen]: open,\r\n                    [classes.drawerClose]: !open,\r\n                })}\r\n                classes={{\r\n                    paper: clsx({\r\n                        [classes.drawerOpen]: open,\r\n                        [classes.drawerClose]: !open,\r\n                    }),\r\n                }}\r\n            >\r\n                <div className={classes.toolbar}>\r\n                    <IconButton onClick={handleDrawerOpen}>\r\n                        {theme.direction === 'rtl' ? <ChevronRightIcon/> : <ChevronLeftIcon/>}\r\n                    </IconButton>\r\n                    Choose Display:\r\n                </div>\r\n                <Divider/>\r\n                <List>\r\n\r\n                    <ListItem button key=\"defense\" onClick={() => generatingTypeHandler(\"defense\")}>\r\n                        <ListItemIcon><BsShieldShaded/></ListItemIcon>\r\n                        <ListItemText primary=\"Defense Systems\"/>\r\n                    </ListItem>\r\n                    <ListItem button key=\"cluster\" onClick={() => generatingTypeHandler(\"cluster\")}>\r\n                        <ListItemIcon><SiMicrogenetics/></ListItemIcon>\r\n                        <ListItemText primary=\"Gene Cluster\"/>\r\n                    </ListItem>\r\n                    <ListItem button key=\"isolation\" onClick={() => generatingTypeHandler(\"isolation\")}>\r\n                        <ListItemIcon><GiDrippingTube/></ListItemIcon>\r\n                        <ListItemText primary=\"Isolation Type\"/>\r\n                    </ListItem>\r\n                    <ListItem button key=\"distinct systems\" onClick={() => generatingTypeHandler(\"distinct systems\")}>\r\n                        <ListItemIcon><GiShieldEchoes/></ListItemIcon>\r\n                        <ListItemText primary=\"Number of Distinct Systems\"/>\r\n                    </ListItem>\r\n                </List>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n}","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\IsolationType.jsx",["261","262","263","264","265","266","267","268","269","270","271"],"import React, {Component} from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport '../styles/StrainForm.css';\r\nimport axios from \"axios\";\r\nimport {Form, Col, Row, Button, Modal} from \"react-bootstrap\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport GenesByClusterC from \"./GenesByClusterC\";\r\nimport {serialize} from \"react-awesome-slider/src/helpers/components\";\r\nimport StrainCircosResultsPage from \"../pages/StrainCircosResultsPage\";\r\nimport DropdownCheckbox from \"./DropdownCheckbox\";\r\n\r\n\r\nclass IsolationType extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.ddc = React.createRef();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FadeIn>\r\n                    <DropdownCheckbox ref={this.ddc} options={[\"Clinical\", \"Environment\"]}/>\r\n                </FadeIn>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default IsolationType;","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\TextOrFileUpload.jsx",["272","273","274","275","276","277","278"],"import React from \"react\";\r\nimport '../styles/SearchPage.css';\r\nimport {Form, Col, Row} from \"react-bootstrap\";\r\nimport AutocompleteC from \"./AutocompleteC\";\r\nimport Switch from \"react-switch\";\r\n\r\n\r\n//apiUrl - For the autocomplete: the url of the requested HTML call to the backend (i.e: http://127.0.0.1:8801/api/v1/strains). The backend need to return list of dictionaries in the format: [{name: \"a\", key: \"0\"},...]\r\n//multipleChoice - For the autocomplete: determines the multiselect option, 'true' means multiselect enabled, 'false' otherwise.\r\n//parentHandleTextBox - For the autocomplete: the callback that will be called in the parent which holds this component when the user chooses an option from the autocomplete component.\r\n//parentFileChangeCallback -  the callback that will be called in the parent which holds this component when the user chooses a file. The file should contain the options with \\n separating between them.\r\n//label - the description of the component for the user\r\n\r\nexport default function TextOrFileUpload({ apiUrl, parentFileChangeCallback, parentHandleTextBox,updateTextbox=null, multipleChoice, label, limit_length=0, parentCallbackLegnth=null}) {\r\n\r\n    const [textbox, setTextbox] = React.useState(true);\r\n    const [textOrFile, setTextOrFile] = React.useState('Text Box' );\r\n\r\n\r\n    const renderTextBox = () => {\r\n        if (textbox == true) {\r\n            return <AutocompleteC  multipleChoice={true} apiUrl={apiUrl}\r\n                                   parentCallback={(selected) => parentHandleTextBox(selected)} multipleChoice={multipleChoice} parentCallbackLegnth={parentCallbackLegnth} limit_length={limit_length}/>\r\n        } else {\r\n            return <Form.Group>\r\n                <Form.File onChange={(e) => parentFileChangeCallback(e)} id=\"exampleFormControlFile1\"\r\n                           label={label}/>\r\n            </Form.Group>;\r\n        }\r\n    }\r\n\r\n    /*\r\nupdate the state of the file upload/strain selection on change\r\n */\r\n    const setSwitchTextBox = () => {\r\n        if (textbox == true) {\r\n            // this.setState({textbox: false}\r\n            setTextbox(false)\r\n            // this.setState({textOrFile: 'File Upload'});\r\n            setTextOrFile('File Upload')\r\n\r\n        } else {\r\n            // this.setState({textbox: true});\r\n            setTextbox(true)\r\n            // this.setState({textOrFile: 'Text Box'});\r\n            setTextOrFile('Text Box')\r\n        }\r\n    }\r\n\r\n    React.useEffect(() =>{\r\n        if (updateTextbox !=null) {\r\n            updateTextbox(textbox)\r\n        }\r\n    },[textbox])\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n            <div className=\"textBox\">\r\n                <div className='rowC'>\r\n                    <Switch onChange={setSwitchTextBox} checked={textbox}/> <span\r\n                    className=\"switch\">{textOrFile}</span>\r\n                </div>\r\n                <Form>\r\n                    {renderTextBox()}\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\DropdownCheckbox.jsx",[],"C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\GenesByClusterC.jsx",["279","280","281"],"import React from \"react\";\r\nimport '../styles/SearchPage.css';\r\nimport {Form, Col, Row, Button} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport ErrorModalC from \"./ErrorModalC\";\r\nimport CSVorFastaC from \"../components/CSVorFastaC\";\r\n\r\n\r\nexport default function GenesByClusterC({genes}) {\r\n\r\n    const childErr = React.createRef();\r\n    const fileSelect = React.createRef();\r\n\r\n    function getData() {\r\n        const FileDownload = require('js-file-download');\r\n\r\n        const Qs = require('qs')\r\n\r\n        let params = { genes: genes, csv: fileSelect.current.getCsv(), prot: fileSelect.current.getProt()}\r\n\r\n        let myAxios = axios.create({\r\n            paramsSerializer: params => Qs.stringify(params, {arrayFormat: 'repeat'})\r\n        })\r\n\r\n        myAxios.get('http://127.0.0.1:8800/api/v1/genes/genes_by_cluster',{params})\r\n            .then((res) => {\r\n                if (fileSelect.current.getCsv()) {\r\n                    FileDownload(res.data, 'genes_by_cluster.csv')\r\n                } else {\r\n                    FileDownload(res.data, 'genes_by_cluster.faa')\r\n                }\r\n            }).catch(function (error) {childErr.current.handleOpen()});\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n            <CSVorFastaC ref={fileSelect}/>\r\n            <div style={{textAlign: \"left\"}}>\r\n                <Button onClick={getData}>Download Genes in the Same Cluster</Button>\r\n            </div>\r\n            <ErrorModalC open={false} ref={childErr}/>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\GenesByDefenseForm.jsx",["282","283","284","285","286","287","288"],"C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\StrainForm.jsx",["289","290","291","292","293","294","295","296"],"import React, { Component } from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport '../styles/StrainForm.css';\r\nimport axios from \"axios\";\r\nimport {Form, Col, Row, Button, Modal} from \"react-bootstrap\";\r\nimport AutocompleteC from \"../components/AutocompleteC\";\r\nimport TextOrFileUpload from \"./TextOrFileUpload\";\r\nimport ErrorModalC from \"./ErrorModalC\";\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\nexport default function StrainForm() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n    const [checkedAll, setCheckedAll] = React.useState(false);\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    const [selectedA, setSelectedA] = React.useState(false);\r\n    const [checked, setChecked] = React.useState({\r\n        genomic_accession: true,\r\n        start: true,\r\n        end: true,\r\n        strand: true,\r\n        attributes_x: true,\r\n        product_accession: true,\r\n        nonredundant_refseq: true,\r\n        name: true\r\n    });\r\n    const childErr = React.createRef();\r\n\r\n    /* ################################################ */\r\n    /* #### TOGGLES checK STATE BASED ON inputName #### */\r\n    /* ################################################ */\r\n\r\n    const toggleCheck = (inputName) => {\r\n        setChecked((prevState) => {\r\n            const newState = { ...prevState };\r\n            newState[inputName] = !prevState[inputName];\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    /* ###################################################### */\r\n    /* #### CHECKS OR UNCHECKS ALL FROM SELECT ALL CLICK #### */\r\n    /* ###################################################### */\r\n\r\n    const selectAll = (value) => {\r\n        setCheckedAll(value);\r\n        setChecked((prevState) => {\r\n            const newState = { ...prevState };\r\n            for (const inputName in newState) {\r\n                newState[inputName] = value;\r\n            }\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    /* ############################################# */\r\n    /* #### EFFECT TO CONTROL CHECKED_ALL STATE #### */\r\n    /* ############################################# */\r\n\r\n    // IF YOU CHECK BOTH INDIVIDUALLY. IT WILL ACTIVATE THE checkedAll STATE\r\n    // IF YOU UNCHECK ANY INDIVIDUALLY. IT WILL DE-ACTIVATE THE checkAll STATE\r\n\r\n    React.useEffect(() => {\r\n        let allChecked = true;\r\n        for (const inputName in checked) {\r\n            if (checked[inputName] === false) {\r\n                allChecked = false;\r\n            }\r\n        }\r\n        if (allChecked) {\r\n            setCheckedAll(true);\r\n        } else {\r\n            setCheckedAll(false);\r\n        }\r\n    }, [checked]);\r\n\r\n    /* ########################## */\r\n    /* #### RETURN STATEMENT #### */\r\n    /* ########################## */\r\n\r\n\r\n\r\n\r\n    function getData() {\r\n\r\n        let selectedC = [];\r\n\r\n        for (let key in checked) {\r\n            // check if the property/key is defined in the object itself, not in parent\r\n            if(checked[key] == true)\r\n                selectedC.push(key)\r\n        }\r\n\r\n        let selectedAS=[];\r\n        if(Array.isArray(selectedA)) {\r\n            for (let key in selectedA) {\r\n                selectedAS.push(selectedA[key]['key'])\r\n            }\r\n        }else{\r\n            selectedAS.push(selectedA['key']);\r\n        }\r\n\r\n        if(selectedC.length == 0){\r\n            setModalShow(true)\r\n            return;\r\n        }\r\n\r\n\r\n        console.log(selectedAS)\r\n        // console.log(selectedC)\r\n\r\n\r\n        const FileDownload = require('js-file-download');\r\n\r\n        const Qs = require('qs')\r\n\r\n        let params = { selectedC: selectedC, selectedAS: selectedAS }\r\n\r\n        let myAxios = axios.create({\r\n            paramsSerializer: params => Qs.stringify(params, {arrayFormat: 'repeat'})\r\n        })\r\n            myAxios.get('http://127.0.0.1:8800/api/v1/genes/download_genes', {params})\r\n                .then((res) => {\r\n                    FileDownload(res.data, 'report.csv');\r\n                }).catch(function (error) {childErr.current.handleOpen()});\r\n    }\r\n\r\n\r\n    function MyVerticallyCenteredModal(props) {\r\n        return (\r\n            <Modal\r\n                {...props}\r\n                size=\"sm\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Missing Information\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Select a field</h4>\r\n                    <p>\r\n                        Please select at least one of the fields from the list.\r\n                    </p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide}>Ok</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    const getSelected = (selected) => {\r\n        setSelectedA(selected)\r\n    }\r\n\r\n    /*\r\nhandle file upload and load each line to array of\r\nintegers (aka strain indexes for subtree) for subtree generating\r\nusing selectedFile state.\r\n*/\r\n    const onFileChange = (e) => {\r\n\r\n        // Update the state\r\n        if (e.target.files.length > 0) {\r\n            e.preventDefault()\r\n            const reader = new FileReader()\r\n            console.log(e)\r\n            reader.onload = async (e) => {\r\n                const text = (e.target.result);\r\n                let ts = text.split(/\\r?\\n/);\r\n                let selectedAS=[];\r\n                let id = 0;\r\n                for (let key in ts) {\r\n                    selectedAS.push({'name':ts[key], 'id': id});\r\n                    id++;\r\n                    // selectedAS[key]['name'].push(ts[key]['name'])\r\n                }\r\n\r\n\r\n                setSelectedA(selectedAS)\r\n                // this.setState({selectedFile: text.split(/\\r?\\n/)});\r\n                e.target.value = null;\r\n            };\r\n            reader.readAsText(e.target.files[0])\r\n        }\r\n    };\r\n\r\n    return (\r\n            <div >\r\n                <FadeIn>\r\n                        <MyVerticallyCenteredModal\r\n                            show={modalShow}\r\n                            onHide={() => setModalShow(false)}\r\n                        />\r\n                    <Form>\r\n                        <Form.Group as={Row}>\r\n                            <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                                <p style={{textAlign: \"right\"}}></p>\r\n                            </Form.Label>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Row} controlId=\"selectStrain\">\r\n                            <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                                <p style={{textAlign: \"right\"}}>{\"Select single/multiple strain/s:\"}</p>\r\n                            </Form.Label>\r\n\r\n                            <Col sm=\"4\">\r\n                                {/*<AutocompleteC multipleChoice={true} true parentCallback={getSelected} apiUrl=\"http://127.0.0.1:8800/api/v1/strains\"/>*/}\r\n                                <TextOrFileUpload className=\"txtbox\" apiUrl=\"http://127.0.0.1:8800/api/v1/strains\" multipleChoice={true} parentFileChangeCallback={onFileChange} parentHandleTextBox={getSelected} label=\"Please upload a file that contains a list of strains\r\n                            separated by new lines (/n)\" />\r\n                                <h6 className=\"note\"><i>Note: Not selecting a strain will return <b>all the genes in the database.</b></i></h6>\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n\r\n                        <div className=\"chkbxs\">\r\n                            Columns:\r\n                        <div>\r\n                            <br/>\r\n                            <input\r\n                                id=\"all\"\r\n                                type=\"checkbox\"\r\n                                onChange={(event) => selectAll(event.target.checked)}\r\n                                checked={checkedAll}\r\n                            />\r\n                            <label for=\"all\" className=\"lbl\">All</label>\r\n                        </div>\r\n\r\n                            <input id='2' type=\"checkbox\" name=\"genomic_accession\"\r\n                                   onChange={() => toggleCheck(\"genomic_accession\")}\r\n                                   checked={checked[\"genomic_accession\"]}/>\r\n                            <label htmlFor='2' className=\"lbl\">genomic_accession</label>\r\n\r\n                            <input id='3' type=\"checkbox\" name=\"start\" onChange={() => toggleCheck(\"start\")}\r\n                                   checked={checked[\"start\"]}/>\r\n                            <label htmlFor='3' className=\"lbl\">start</label>\r\n\r\n                            <input id='4' type=\"checkbox\" name=\"end\" onChange={() => toggleCheck(\"end\")}\r\n                                   checked={checked[\"end\"]}/>\r\n                            <label htmlFor='4' className=\"lbl\">end</label>\r\n\r\n                            <input id='5' type=\"checkbox\" name=\"strand\" onChange={() => toggleCheck(\"strand\")}\r\n                                   checked={checked[\"strand\"]}/>\r\n                            <label htmlFor='5' className=\"lbl\">strand</label>\r\n\r\n                            <input id='6' type=\"checkbox\" name=\"attributes_x\"\r\n                                   onChange={() => toggleCheck(\"attributes_x\")} checked={checked[\"attributes_x\"]}/>\r\n                            <label htmlFor='6' className=\"lbl\">attributes_x</label>\r\n\r\n                            <input id='7' type=\"checkbox\" name=\"product_accession\"\r\n                                   onChange={() => toggleCheck(\"product_accession\")}\r\n                                   checked={checked[\"product_accession\"]}/>\r\n                            <label htmlFor='7' className=\"lbl\">product_accession</label>\r\n\r\n                            <input id='8' type=\"checkbox\" name=\"nonredundant_refseq\"\r\n                                   onChange={() => toggleCheck(\"nonredundant_refseq\")}\r\n                                   checked={checked[\"nonredundant_refseq\"]}/>\r\n                            <label htmlFor='8' className=\"lbl\">nonredundant_refseq</label>\r\n\r\n                            <input id='9' type=\"checkbox\" name=\"name\" onChange={() => toggleCheck(\"name\")}\r\n                                   checked={checked[\"name\"]}/>\r\n                            <label htmlFor='9' className=\"lbl\">name</label>\r\n\r\n                        </div>\r\n                        <br/>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <Button onClick={getData}>Download</Button>\r\n                        </div>\r\n                    </Form>\r\n                    {/*<Modal show={show} onHide={handleClose}>*/}\r\n                    {/*    <Modal.Header closeButton>*/}\r\n                    {/*        <Modal.Title>Modal heading</Modal.Title>*/}\r\n                    {/*    </Modal.Header>*/}\r\n                    {/*    <Modal.Body>There is a problem with the server request. Sorry for the inconvenience.</Modal.Body>*/}\r\n                    {/*    <Modal.Footer>*/}\r\n                    {/*        <Button variant=\"secondary\" onClick={handleClose}>*/}\r\n                    {/*            Close*/}\r\n                    {/*        </Button>*/}\r\n                    {/*    </Modal.Footer>*/}\r\n                    {/*</Modal>*/}\r\n                </FadeIn>\r\n                <ErrorModalC open={false} ref={childErr}/>\r\n            </div>\r\n        )\r\n    }","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\AutocompleteC.jsx",["297","298","299","300"],"import React from \"react\";\r\nimport '../styles/SearchPage.css';\r\nimport {Form, Col, Row, Modal, Button} from \"react-bootstrap\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport ErrorModalC from \"./ErrorModalC\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\n\r\n//apiUrl - the url of the requested HTML call to the backend (i.e: http://127.0.0.1:8800/api/v1/strains). The backend need to return list of dictionaries in the format: [{name: \"a\", key: \"0\"},...]\r\n//parentCallback - the callback that will be called in the parent which holds this component. The parent will receive the current selected objects for each change on this component.  See DownloadPage for example or ask Alon.\r\n//multipleChoice - determines the multiselect option, 'true' means multiselect enabled, 'false' otherwise.\r\n//labelText - The text which will appear in the label of the component (i.e: \"Select single/multiple strain/s:\").\r\n//disabled - Disables the autocomplete\r\nexport default function AutocompleteC({\r\n                                          apiUrl,\r\n                                          parentCallback,\r\n                                          multipleChoice,\r\n                                          limit_length = 0,\r\n                                          parentCallbackLegnth = null,\r\n                                          labelText =\"\",\r\n                                          disabled=false\r\n                                      }) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n\r\n    const childErr = React.createRef();\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n\r\n        (async () => {\r\n            try {\r\n                const response = await fetch(apiUrl);\r\n\r\n                // await sleep(1e3); // For demo purposes.\r\n                const countries = await response.json();\r\n                if (active) {\r\n                    setOptions(countries.filter(x => x.name != null))\r\n                }\r\n            } catch (e) {\r\n                if(childErr.current) {\r\n                    childErr.current.handleOpen();\r\n                }\r\n            }\r\n\r\n        })();\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n            <Form.Group as={Row} controlId=\"selectStrain\">\r\n                <Col>\r\n                    <Autocomplete\r\n\r\n                        disabled={disabled}\r\n                        id=\"asynchronous-demo\"\r\n                        multiple={multipleChoice}\r\n                        // style={{ width: \"100%\" }}\r\n                        open={open}\r\n                        onOpen={() => {\r\n                            setOpen(true);\r\n                        }}\r\n                        onClose={() => {\r\n                            setOpen(false);\r\n                        }}\r\n                        // onChange={(event, value) => setSelectedA(value)}\r\n                        onChange={(event, value) => parentCallback(value)}\r\n                        getOptionSelected={(option, value) => option.name === value.name}\r\n                        getOptionLabel={(option) => option.name}\r\n                        options={options}\r\n                        getOptionDisabled={(() => {\r\n                            if (parentCallbackLegnth) {\r\n                                if (parentCallbackLegnth() >= limit_length) {\r\n                                    return true\r\n                                }\r\n                            }\r\n                            return false\r\n                            // parentCallbackLegnth() > 3 && false ? true : false\r\n                        })\r\n                        }\r\n                        loading={loading}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                // label=\"Choose strains...\"\r\n                                label = {labelText}\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                InputProps={{\r\n                                    ...params.InputProps,\r\n                                    endAdornment: (\r\n                                        <React.Fragment>\r\n                                            {loading ? <CircularProgress color=\"inherit\" size={20}/> : null}\r\n                                            {params.InputProps.endAdornment}\r\n                                        </React.Fragment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        )}\r\n                    />\r\n                </Col>\r\n            </Form.Group>\r\n            {/*<Modal show={show} onHide={handleClose}>*/}\r\n            {/*    <Modal.Header closeButton>*/}\r\n            {/*        <Modal.Title>Modal heading</Modal.Title>*/}\r\n            {/*    </Modal.Header>*/}\r\n            {/*    <Modal.Body>There is a problem with the server request. Sorry for the inconvenience.</Modal.Body>*/}\r\n            {/*    <Modal.Footer>*/}\r\n            {/*        <Button variant=\"secondary\" onClick={handleClose}>*/}\r\n            {/*            Close*/}\r\n            {/*        </Button>*/}\r\n            {/*    </Modal.Footer>*/}\r\n            {/*</Modal>*/}\r\n            <ErrorModalC open={false} ref={childErr}/>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationGraph.jsx",["301","302","303","304","305","306","307","308","309","310","311"],"import React, {Component} from \"react\";\r\nimport axios from \"axios\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4plugins_venn from \"@amcharts/amcharts4/plugins/venn\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport '../styles/CorrelationGraph.css';\r\nimport './CorrelationComponents/Correlations.css'\r\nimport ErrorModalC from \"./ErrorModalC\";\r\nimport CorrelationBoxPlot from \"./CorrelationBoxPlot\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport {BsShieldShaded, BsFillCaretRightFill} from \"react-icons/bs\";\r\nimport {SiHubspot, SiMicrogenetics} from \"react-icons/si\";\r\nimport {GiDrippingTube} from \"react-icons/gi\";\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\n\r\nclass CorrelationGraph extends Component {\r\n// export default function CorrelationGraph({itemsSelected, eventK}) {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.childErr = React.createRef();\r\n        this.state = {\r\n            title: \"\",\r\n            results: [],\r\n            itemNames: [],\r\n            withd_y: [],\r\n            without_y: []\r\n        };\r\n\r\n    }\r\n\r\n    // const [results, setResults] = React.useState([]);\r\n    // const [itemNames, setItemNames] = React.useState([]);\r\n    // const childErr = React.createRef();\r\n    //\r\n    //\r\n    // React.useEffect(() => {\r\n    //     if (eventK == 'first') {\r\n    //         const Qs = require('qs')\r\n    //         axios.get('http://127.0.0.1:8800/api/v1/statistics/correlationBetweenDefenseSystems', {\r\n    //             params: {\r\n    //                 systems: itemsSelected.map((option) => option.name),\r\n    //             },\r\n    //             paramsSerializer: params => {\r\n    //                 return Qs.stringify(params, {arrayFormat: 'repeat'})\r\n    //             },\r\n    //             //responseType: 'arraybuffer'\r\n    //         })\r\n    //             .then(response => {\r\n    //                 setResults(response.data)\r\n    //             })\r\n    //     } else if (eventK == 'second') {\r\n    //\r\n    //     } else if (eventK == 'third') {\r\n    //         const Qs = require('qs')\r\n    //         axios.get('http://127.0.0.1:8800/api/v1/statistics/correlationBetweenDefenseSystemAndIsolationType', {\r\n    //             params: {\r\n    //                 system: itemsSelected[0].name, isoType: itemsSelected[1].name\r\n    //             },\r\n    //             paramsSerializer: params => {\r\n    //                 return Qs.stringify(params, {arrayFormat: 'repeat'})\r\n    //             },\r\n    //             //responseType: 'arraybuffer'\r\n    //         })\r\n    //             .then(response => {\r\n    //                 setResults(response.data)\r\n    //             })\r\n    //     }\r\n    // }, [itemsSelected]);\r\n    //\r\n    //\r\n    // React.useEffect(() => {\r\n    //\r\n    //     if (!results[0]) {\r\n    //         return undefined;\r\n    //     }\r\n    //\r\n    //     let chart = am4core.create(\"chartdiv\", am4plugins_venn.VennDiagram);\r\n    //\r\n    //     // Create and configure series\r\n    //     let series = chart.series.push(new am4plugins_venn.VennSeries())\r\n    //     series.dataFields.category = \"name\";\r\n    //     series.dataFields.value = \"value\";\r\n    //     series.dataFields.intersections = \"sets\";\r\n    //     series.data = [\r\n    //         {name: itemNames[0], value: results[0]['K']},\r\n    //         {name: itemNames[1], value: results[0]['n']},\r\n    //         {\r\n    //             name: itemNames[0] + \"\\n&\\n\" + itemNames[1],\r\n    //             value: results[0]['k'],\r\n    //             sets: [itemNames[0], itemNames[1]]\r\n    //         }\r\n    //     ];\r\n    //     console.log(series.data);\r\n    // }, [results])\r\n    //\r\n    //\r\n    // React.useEffect(() => {\r\n    //     if (eventK == 'first') {\r\n    //         setItemNames(itemsSelected.map((option) => option.name))\r\n    //     } else if (eventK == 'second') {\r\n    //\r\n    //     } else if (eventK == 'third') {\r\n    //         const items = [itemsSelected[0].name, itemsSelected[1].name]\r\n    //         setItemNames(items, function () {\r\n    //             const Qs = require('qs')\r\n    //             axios.get('http://127.0.0.1:8800/api/v1/statistics/correlationBetweenDefenseSystemAndIsolationType', {\r\n    //                 params: {\r\n    //                     system: itemsSelected[0].name, isoType: itemsSelected[1].name\r\n    //                 },\r\n    //                 paramsSerializer: params => {\r\n    //                     return Qs.stringify(params, {arrayFormat: 'repeat'})\r\n    //                 },\r\n    //                 //responseType: 'arraybuffer'\r\n    //             })\r\n    //                 .then(response => {\r\n    //                     setResults(response.data)\r\n    //\r\n    //                 }).catch(function (error) {\r\n    //                 if (childErr.current) {\r\n    //                     childErr.current.handleOpen()\r\n    //                 }\r\n    //             });\r\n    //         })\r\n    //     }\r\n    // })\r\n\r\n    componentDidMount() {\r\n        if (this.props.eventK == 'dvd') {\r\n            // this.setState({title: 'Correlation Between:'})\r\n            this.setState({itemNames: this.props.itemsSelected.map((option) => option.name)}, function () {\r\n                const Qs = require('qs')\r\n                axios.get('http://127.0.0.1:8800/api/v1/statistics/correlationBetweenDefenseSystems', {\r\n                    params: {\r\n                        systems: this.props.itemsSelected.map((option) => option.name),\r\n                    },\r\n                    paramsSerializer: params => {\r\n                        return Qs.stringify(params, {arrayFormat: 'repeat'})\r\n                    },\r\n                    //responseType: 'arraybuffer'\r\n                })\r\n                    .then(response => {\r\n                        this.setState({results: response.data}, function () {\r\n                            // Create chart\r\n                            let chart = am4core.create(\"chartdiv\", am4plugins_venn.VennDiagram);\r\n                            // Create and configure series\r\n                            let series = chart.series.push(new am4plugins_venn.VennSeries())\r\n                            series.dataFields.category = \"name\";\r\n                            series.dataFields.value = \"value\";\r\n                            series.dataFields.intersections = \"sets\";\r\n                            series.data = [\r\n                                {name: this.state.itemNames[0], value: this.state.results[0]['K']},\r\n                                {name: this.state.itemNames[1], value: this.state.results[0]['n']},\r\n                                {\r\n                                    name: this.state.itemNames[0] + \"\\n&\\n\" + this.state.itemNames[1],\r\n                                    value: this.state.results[0]['k'],\r\n                                    sets: [this.state.itemNames[0], this.state.itemNames[1]]\r\n                                }\r\n                            ];\r\n                            console.log(series.data);\r\n                        })\r\n\r\n                    }).catch(function (error) {\r\n                    if (this.childErr.current) {\r\n                        this.childErr.current.handleOpen()\r\n                    }\r\n                });\r\n            })\r\n        } else if (this.props.eventK == 'dvc') {\r\n            const items = [this.props.itemsSelected[0].name, this.props.itemsSelected[1].name]\r\n            this.setState({itemNames: items}, function () {\r\n                const Qs = require('qs')\r\n                axios.get('http://127.0.0.1:8800/api/v1/statistics/correlationBetweenDefenseSystemAndAttribute', {\r\n                    params: {\r\n                        system: this.props.itemsSelected[0].name, category: this.props.itemsSelected[1].name\r\n                    },\r\n                    paramsSerializer: params => {\r\n                        return Qs.stringify(params, {arrayFormat: 'repeat'})\r\n                    },\r\n                    //responseType: 'arraybuffer'\r\n                })\r\n                    .then(response => {\r\n                        this.setState({withd_y: response.data[1]}, function () {\r\n                            this.setState({without_y: response.data[2]}, function () {\r\n                                this.setState({results: response.data[0]}, function () {\r\n                                    // Create chart\r\n                                    let chart = am4core.create(\"chartdiv\", am4plugins_venn.VennDiagram);\r\n\r\n                                    // Create and configure series\r\n                                    let series = chart.series.push(new am4plugins_venn.VennSeries())\r\n                                    series.dataFields.category = \"name\";\r\n                                    series.dataFields.value = \"value\";\r\n                                    series.dataFields.intersections = \"sets\";\r\n                                    series.data = [\r\n                                        {name: this.state.itemNames[0], value: this.state.results['K']},\r\n                                        {name: this.state.itemNames[1], value: this.state.results['n']},\r\n                                        {\r\n                                            name: this.state.itemNames[0] + \"\\n&\\n\" + this.state.itemNames[1],\r\n                                            value: this.state.results['k'],\r\n                                            sets: [this.state.itemNames[0], this.state.itemNames[1]]\r\n                                        }\r\n\r\n                                    ];\r\n                                    // series.data =  [{ name: \"A\", value: 10 }, { name: \"B\", value: 10 }, { name: \"C\", value: 10 }, { name: \"X\", value: 2, sets: [\"A\", \"B\"] }, { name: \"Y\", value: 2, sets: [\"A\", \"C\"] }, { name: \"Z\", value: 2, sets: [\"B\", \"C\"] }, { name: \"Q\", value: 1, sets: [\"A\", \"B\", \"C\"] }];\r\n                                    console.log(series.data);\r\n                                })\r\n                            })\r\n                        })\r\n                    }).catch(function (error) {\r\n                    // if (this.childErr.current) {\r\n                    //     this.childErr.current.handleOpen()\r\n                    // }\r\n                });\r\n            })\r\n        } else if (this.props.eventK == 'dvi') {\r\n            const items = [this.props.itemsSelected[0].name, this.props.itemsSelected[1].name]\r\n            this.setState({itemNames: items}, function () {\r\n                const Qs = require('qs')\r\n                axios.get('http://127.0.0.1:8800/api/v1/statistics/correlationBetweenDefenseSystemAndIsolationType', {\r\n                    params: {\r\n                        system: this.props.itemsSelected[0].name, isoType: this.props.itemsSelected[1].name\r\n                    },\r\n                    paramsSerializer: params => {\r\n                        return Qs.stringify(params, {arrayFormat: 'repeat'})\r\n                    },\r\n                    //responseType: 'arraybuffer'\r\n                })\r\n                    .then(response => {\r\n                        this.setState({results: response.data}, function () {\r\n                            // Create chart\r\n                            let chart = am4core.create(\"chartdiv\", am4plugins_venn.VennDiagram);\r\n\r\n                            // Create and configure series\r\n                            let series = chart.series.push(new am4plugins_venn.VennSeries())\r\n                            series.dataFields.category = \"name\";\r\n                            series.dataFields.value = \"value\";\r\n                            series.dataFields.intersections = \"sets\";\r\n                            series.data = [\r\n                                {name: this.state.itemNames[0], value: this.state.results[0]['K']},\r\n                                {name: this.state.itemNames[1], value: this.state.results[0]['n']},\r\n                                {\r\n                                    name: this.state.itemNames[0] + \"\\n&\\n\" + this.state.itemNames[1],\r\n                                    value: this.state.results[0]['k'],\r\n                                    sets: [this.state.itemNames[0], this.state.itemNames[1]]\r\n                                }\r\n\r\n                            ];\r\n                            // series.data =  [{ name: \"A\", value: 10 }, { name: \"B\", value: 10 }, { name: \"C\", value: 10 }, { name: \"X\", value: 2, sets: [\"A\", \"B\"] }, { name: \"Y\", value: 2, sets: [\"A\", \"C\"] }, { name: \"Z\", value: 2, sets: [\"B\", \"C\"] }, { name: \"Q\", value: 1, sets: [\"A\", \"B\", \"C\"] }];\r\n                            console.log(series.data);\r\n                        })\r\n\r\n                    }).catch(function (error) {\r\n                    // if (this.childErr.current) {\r\n                    //     this.childErr.current.handleOpen()\r\n                    // }\r\n                });\r\n            })\r\n        } else if (this.props.eventK == 'dvcl') {\r\n            const items = [this.props.itemsSelected[0].name, this.props.itemsSelected[1].name, this.props.itemsSelected[2].name]\r\n            this.setState({itemNames: items}, function () {\r\n                const Qs = require('qs')\r\n                axios.get('http://127.0.0.1:8800/api/v1/statistics/correlationBetweenDefenseSystemAndCluster', {\r\n                    params: {\r\n                        system: items[0], strain: items[1], gene: items[2]\r\n                    },\r\n                    paramsSerializer: params => {\r\n                        return Qs.stringify(params, {arrayFormat: 'repeat'})\r\n                    },\r\n                    //responseType: 'arraybuffer'\r\n                })\r\n                    .then(response => {\r\n                        this.setState({results: response.data}, function () {\r\n                            // Create chart\r\n                            let chart = am4core.create(\"chartdiv\", am4plugins_venn.VennDiagram);\r\n\r\n                            // Create and configure series\r\n                            let series = chart.series.push(new am4plugins_venn.VennSeries())\r\n                            series.dataFields.category = \"name\";\r\n                            series.dataFields.value = \"value\";\r\n                            series.dataFields.intersections = \"sets\";\r\n                            series.data = [\r\n                                {name: this.state.itemNames[0], value: this.state.results[0]['K']},\r\n                                {name: this.state.itemNames[1], value: this.state.results[0]['n']},\r\n                                {\r\n                                    name: this.state.itemNames[0] + \"\\n&\\n\" + this.state.itemNames[1],\r\n                                    value: this.state.results[0]['k'],\r\n                                    sets: [this.state.itemNames[0], this.state.itemNames[1]]\r\n                                }\r\n\r\n                            ];\r\n                            // series.data =  [{ name: \"A\", value: 10 }, { name: \"B\", value: 10 }, { name: \"C\", value: 10 }, { name: \"X\", value: 2, sets: [\"A\", \"B\"] }, { name: \"Y\", value: 2, sets: [\"A\", \"C\"] }, { name: \"Z\", value: 2, sets: [\"B\", \"C\"] }, { name: \"Q\", value: 1, sets: [\"A\", \"B\", \"C\"] }];\r\n                            console.log(series.data);\r\n                        })\r\n\r\n                    }).catch(function (error) {\r\n                    // if (this.childErr.current) {\r\n                    //     this.childErr.current.handleOpen()\r\n                    // }\r\n                });\r\n            })\r\n        } else if (this.props.eventK == 'clvi') {\r\n            const items = [this.props.itemsSelected[0].name, this.props.itemsSelected[1].name, this.props.itemsSelected[2].name]\r\n            this.setState({itemNames: items}, function () {\r\n                const Qs = require('qs')\r\n                axios.get('http://127.0.0.1:8800/api/v1/statistics/correlationBetweenClusterAndIsolationType', {\r\n                    params: {\r\n                        isoType: items[0], strain: items[1], gene: items[2]\r\n                    },\r\n                    paramsSerializer: params => {\r\n                        return Qs.stringify(params, {arrayFormat: 'repeat'})\r\n                    },\r\n                    //responseType: 'arraybuffer'\r\n                })\r\n                    .then(response => {\r\n                        this.setState({results: response.data}, function () {\r\n                            // Create chart\r\n                            let chart = am4core.create(\"chartdiv\", am4plugins_venn.VennDiagram);\r\n\r\n                            // Create and configure series\r\n                            let series = chart.series.push(new am4plugins_venn.VennSeries())\r\n                            series.dataFields.category = \"name\";\r\n                            series.dataFields.value = \"value\";\r\n                            series.dataFields.intersections = \"sets\";\r\n                            series.data = [\r\n                                {name: this.state.itemNames[0], value: this.state.results[0]['K']},\r\n                                {name: this.state.itemNames[1], value: this.state.results[0]['n']},\r\n                                {\r\n                                    name: this.state.itemNames[0] + \"\\n&\\n\" + this.state.itemNames[1],\r\n                                    value: this.state.results[0]['k'],\r\n                                    sets: [this.state.itemNames[0], this.state.itemNames[1]]\r\n                                }\r\n\r\n                            ];\r\n                            // series.data =  [{ name: \"A\", value: 10 }, { name: \"B\", value: 10 }, { name: \"C\", value: 10 }, { name: \"X\", value: 2, sets: [\"A\", \"B\"] }, { name: \"Y\", value: 2, sets: [\"A\", \"C\"] }, { name: \"Z\", value: 2, sets: [\"B\", \"C\"] }, { name: \"Q\", value: 1, sets: [\"A\", \"B\", \"C\"] }];\r\n                            console.log(series.data);\r\n                        })\r\n\r\n                    }).catch(function (error) {\r\n                    // if (this.childErr.current) {\r\n                    //     this.childErr.current.handleOpen()\r\n                    // }\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        if (this.chart) {\r\n            this.chart.dispose();\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const columns = [\r\n            {dataField: \"N\", text: \"Number of strains (N)\", sort: false},\r\n            {dataField: \"K\", text: \"Defense System A (K)\", sort: false},\r\n            {dataField: \"n\", text: \"Defense System B (n)\", sort: false},\r\n            {dataField: \"k\", text: \"Intersection (k)\", sort: false},\r\n            {dataField: \"pvalue\", text: \"P-Value\", sort: false}\r\n        ]\r\n\r\n        let getGraph = () => {\r\n            if (this.props.eventK != 'dvc') {\r\n                return (\r\n                    <div>\r\n                        <div id=\"chartdiv\" style={{width: \"100%\", height: \"450px\"}}></div>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div id=\"boxplotdiv\">\r\n                        <CorrelationBoxPlot  withd_y={this.state.withd_y} withoutd_y={this.state.without_y}/>\r\n                        <br/>\r\n                        <br/>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n\r\n        const corrText = () => {\r\n            if (this.props.eventK == 'dvd') {\r\n                return (\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                Defense system:\r\n                            </Col>\r\n                            <Col>\r\n                                Defense system:\r\n                            </Col>\r\n                        </Row> <Row>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><BsShieldShaded className=\"icon_s\"/>{this.props.itemsSelected[0].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><BsShieldShaded className=\"icon_s\"/>{this.props.itemsSelected[1].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                    </Row>\r\n                    </Container>\r\n                )\r\n            } else if (this.props.eventK == 'dvc') {\r\n                return (\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                Defense system:\r\n                            </Col>\r\n                            <Col>\r\n                                Attribute:\r\n                            </Col>\r\n                        </Row> <Row>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><BsShieldShaded className=\"icon_s\"/>{this.props.itemsSelected[0].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><SiHubspot className=\"icon_s\"/>{this.props.itemsSelected[1].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                    </Row>\r\n                    </Container>\r\n                )\r\n            } else if (this.props.eventK == 'dvi') {\r\n                return (\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                Defense system:\r\n                            </Col>\r\n                            <Col>\r\n                                Isolation Type:\r\n                            </Col>\r\n                        </Row> <Row>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><BsShieldShaded className=\"icon_s\"/>{this.props.itemsSelected[0].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><GiDrippingTube className=\"icon_s\"/>{this.props.itemsSelected[1].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                    </Row>\r\n                    </Container>\r\n                )\r\n            }else if (this.props.eventK == 'dvcl') {\r\n                return (\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                Defense system:\r\n                            </Col>\r\n                            <Col>\r\n                                Cluster:\r\n                            </Col>\r\n                        </Row> <Row>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><BsShieldShaded className=\"icon_s\"/>{this.props.itemsSelected[0].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><SiMicrogenetics className=\"icon_s\"/>{this.props.itemsSelected[1].name} <BsFillCaretRightFill/> {this.props.itemsSelected[2].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                    </Row>\r\n                    </Container>\r\n                )\r\n            } else{\r\n                return (\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                Isolation Type:\r\n                            </Col>\r\n                            <Col>\r\n                                Cluster:\r\n                            </Col>\r\n                        </Row> <Row>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><SiMicrogenetics className=\"icon_s\"/>{this.props.itemsSelected[0].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><GiDrippingTube className=\"icon_s\"/>{this.props.itemsSelected[1].name} <BsFillCaretRightFill/> {this.props.itemsSelected[2].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                    </Row>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n\r\n        const noticeText = () => {\r\n            if (this.props.eventK != 'dvc') {\r\n                return (\r\n                    <h6>Notice: The P-Value is based on the Hypergeometric test.</h6>\r\n                )\r\n            } else{\r\n                return (\r\n                <h6>Notice: The P-Value is based on the Mann-Whitney test.</h6>\r\n                )\r\n            }\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <FadeIn>\r\n\r\n                    <div className=\"title_s\">\r\n                        <h1>Correlation Between:</h1>\r\n                        <br/>\r\n                        {corrText()}\r\n                    </div>\r\n                    {\r\n                        getGraph()\r\n                    }\r\n\r\n                    <div style={{height: \"100%\", width: \"90%\", marginLeft: \"5%\", fontSize: \"14px\"}}>\r\n\r\n                        <ToolkitProvider\r\n                            keyField=\"id\"\r\n                            data={this.state.results}\r\n                            columns={columns}\r\n                        >\r\n                            {\r\n                                props => (\r\n                                    <div>\r\n                                        <BootstrapTable  {...props.baseProps}\r\n                                                         pagination={paginationFactory({\r\n                                                             paginationSize: 1,  // the pagination bar size, default is 5\r\n                                                             //lastPageText: '>>', // the text of last page button\r\n                                                             hideSizePerPage: true, // hide the size per page dropdown\r\n                                                             hidePageListOnlyOnePage: true, // hide pagination bar when only one page, default is false\r\n                                                         })}\r\n                                        />\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </ToolkitProvider>\r\n\r\n\r\n                    </div>\r\n                    {noticeText()}\r\n                </FadeIn>\r\n                <ErrorModalC open={false} ref={this.childErr}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CorrelationGraph;","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\Cluster.jsx",["312","313","314"],"import React, {Component} from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport '../styles/StrainForm.css';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport AutocompleteC from \"./AutocompleteC\";\r\nimport ErrorModalC from \"../components/ErrorModalC\";\r\n\r\nclass Cluster extends Component {\r\n    state = {\r\n        strains: [\r\n            {\r\n                name: \"PAO1\",\r\n                id: \"GCF_000006765.1\"\r\n            },\r\n            {\r\n                name: \"PA14\",\r\n                id: \"GCF_000014625.1\"\r\n            }\r\n        ],\r\n        num_cluster: ['1', '2', '3'],\r\n        selected_strainA: false,\r\n        selected_strainB: false,\r\n        selected_strainC: false,\r\n        selected_geneA: false,\r\n        selected_geneB: false,\r\n        selected_geneC: false,\r\n        showing_one: false,\r\n        showing_two: false,\r\n        showing_three: false,\r\n        downloadable: false\r\n\r\n    }\r\n    constructor() {\r\n        super();\r\n        this.childErr = React.createRef();\r\n    }\r\n    choice_strainA = (selected) => {\r\n        if (selected != null) {\r\n            this.setState({\r\n                selected_strainA: selected\r\n            })\r\n        }\r\n    }\r\n    choice_strainB = (selected) => {\r\n        if (selected != null) {\r\n            this.setState({\r\n                selected_strainB: selected\r\n            })\r\n        }\r\n    }\r\n\r\n    choice_strainC = (selected) => {\r\n        if (selected != null) {\r\n            this.setState({\r\n                selected_strainC: selected\r\n            })\r\n        }\r\n    }\r\n\r\n    choice_geneA = (selected) => {\r\n        if (selected != null) {\r\n            this.setState({\r\n                selected_geneA: selected.name\r\n            })\r\n        }\r\n    }\r\n    choice_geneB = (selected) => {\r\n        if (selected != null) {\r\n            this.setState({\r\n                selected_geneB: selected.name\r\n            })\r\n        }\r\n    }\r\n    choice_geneC = (selected) => {\r\n        if (selected != null) {\r\n            this.setState({\r\n                selected_geneC: selected.name\r\n            })\r\n        }\r\n    }\r\n\r\n    getTree(){\r\n        const arr = []\r\n        if (this.state.showing_one) {\r\n            arr.push(this.state.selected_strainA.name + '-' + this.state.selected_geneA)\r\n        }\r\n        if (this.state.showing_two) {\r\n            arr.push(this.state.selected_strainB.name + '-' + this.state.selected_geneB)\r\n        }\r\n        if (this.state.showing_three) {\r\n            arr.push(this.state.selected_strainC.name + '-' + this.state.selected_geneC)\r\n        }\r\n        this.setState({downloadable: true})\r\n        return [...arr]\r\n    }\r\n\r\n    show_lines = (value) => {\r\n        if (value == '1') {\r\n            this.setState({\r\n                    showing_one: true,\r\n                    showing_two: false,\r\n                    showing_three: false,\r\n                    selected_geneB: \"\",\r\n                    selected_strainB: \"\",\r\n                    selected_geneC: \"\",\r\n                    selected_strainC: \"\",\r\n                }\r\n            )\r\n        }\r\n        if (value == '2') {\r\n            this.setState({\r\n                    showing_one: true,\r\n                    showing_two: true,\r\n                    showing_three: false,\r\n                    selected_geneC: \"\",\r\n                    selected_strainC: \"\",\r\n                }\r\n            )\r\n        }\r\n        if (value == '3') {\r\n            this.setState({\r\n                    showing_one: true,\r\n                    showing_two: true,\r\n                    showing_three: true,\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <container>\r\n                <div>\r\n                    <Autocomplete\r\n                        id=\"Choose_num\"\r\n                        options={this.state.num_cluster}\r\n                        getOptionLabel={(option) => option}\r\n                        onChange={(event, value) => this.show_lines(value)}\r\n                        renderInput={(params) => <TextField {...params} size=\"small\" label=\"Choose num of gene\"\r\n                                                            variant=\"outlined\"/>}\r\n                    />\r\n                    <div>\r\n                        {this.state.showing_one\r\n                            ? <div>\r\n                                <FadeIn>\r\n                                    <p style={{textAlign: \"left\"}}>select first strain and gene</p>\r\n                                    <Autocomplete\r\n                                        id=\"strains-combo-box\"\r\n                                        options={this.state.strains}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        onChange={(event, value) => this.choice_strainA(value)}\r\n                                        renderInput={(params) => <TextField {...params} size=\"small\"\r\n                                                                            label=\"Choose Strain\"\r\n                                                                            variant=\"outlined\"/>}\r\n                                    />\r\n                                    <br/>\r\n                                    <AutocompleteC multipleChoice={false} true\r\n                                                   parentCallback={this.choice_geneA}\r\n                                                   apiUrl={\"http://127.0.0.1:8800/api/v1/cluster/get_gene_strain_id/\" + this.state.selected_strainA.id}\r\n                                                   labelText=\"Choose Gene\"/>\r\n                                </FadeIn>\r\n                            </div>\r\n                            : null\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        {this.state.showing_two\r\n                            ? <div>\r\n                                <FadeIn>\r\n                                    <p style={{textAlign: \"left\"}}>select second strain and gene</p>\r\n                                    <Autocomplete\r\n                                        id=\"strains-combo-box\"\r\n                                        options={this.state.strains}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        onChange={(event, value) => this.choice_strainB(value)}\r\n                                        renderInput={(params) => <TextField {...params} size=\"small\"\r\n                                                                            label=\"Choose Strain\"\r\n                                                                            variant=\"outlined\"/>}\r\n                                    />\r\n                                    <br/>\r\n                                    <AutocompleteC multipleChoice={false} true\r\n                                                   parentCallback={this.choice_geneB}\r\n                                                   apiUrl={\"http://127.0.0.1:8800/api/v1/cluster/get_gene_strain_id/\" + this.state.selected_strainB.id}\r\n                                                   labelText=\"Choose Gene\"/>\r\n                                </FadeIn>\r\n                            </div>\r\n                            : null\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        {this.state.showing_three\r\n                            ? <div>\r\n                                <FadeIn>\r\n                                    <p style={{textAlign: \"left\"}}>select third strain and gene</p>\r\n                                    <Autocomplete\r\n                                        id=\"strains-combo-box\"\r\n                                        options={this.state.strains}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        onChange={(event, value) => this.choice_strainC(value)}\r\n                                        renderInput={(params) => <TextField {...params} size=\"small\"\r\n                                                                            label=\"Choose Strain\"\r\n                                                                            variant=\"outlined\"/>}\r\n                                    />\r\n                                    <br/>\r\n                                    <AutocompleteC multipleChoice={false} true\r\n                                                   parentCallback={this.choice_geneC}\r\n                                                   apiUrl={\"http://127.0.0.1:8800/api/v1/cluster/get_gene_strain_id/\" + this.state.selected_strainC.id}\r\n                                                   labelText=\"Choose Gene\"/>\r\n\r\n                                </FadeIn>\r\n                            </div>\r\n                            : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <ErrorModalC open={false} ref={this.childErr}/>\r\n            </container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cluster;","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSIsoType.jsx",["315","316","317","318","319","320","321"],"import React from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport AutocompleteC from \"../AutocompleteC\"\r\nimport {faPlusCircle} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {BsShieldShaded} from \"react-icons/bs\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport '../../styles/Correlations.css'\r\nimport {GiDrippingTube} from \"react-icons/gi\";\r\n\r\n// calculates the correlation between one defense system to an ISO Type\r\nexport default function DefVSIsoType({parentCallback2}) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selectedDF, setSelectedDF] = React.useState([]);\r\n    const [selectedIso, setSelectedIso] = React.useState([]);\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n    const [buttonOff, setButtonOff] = React.useState(true)\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        console.log(selectedDF)\r\n        let arr = selectedDF.concat(selectedIso);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedDF]);\r\n\r\n    React.useEffect(() => {\r\n        console.log(selectedIso)\r\n        let arr = selectedIso.concat(selectedDF);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedIso]);\r\n\r\n\r\n    React.useEffect(() => {\r\n        if (getSelected() === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selected]);\r\n\r\n\r\n    const getSelectedDF = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelectedDF([selectedA]);\r\n        } else {\r\n            setSelectedDF([]);\r\n        }\r\n    }\r\n\r\n    const getSelectedISO = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelectedIso([selectedA]);\r\n        } else {\r\n            setSelectedIso([]);\r\n        }\r\n    }\r\n\r\n    const getSelected = () => {\r\n        return selected.length;\r\n    }\r\n\r\n    const getSelectedLengthIso = () => {\r\n        return selectedIso.length;\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n            <FadeIn>\r\n                <div className=\"title_s\">\r\n                    <h1>Defense System vs Isolation Type</h1>\r\n                </div>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"selectDefSys\">\r\n                        <Container>\r\n                            <Row>\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><BsShieldShaded/></ListItemIcon>\r\n                                </Col>\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><GiDrippingTube/></ListItemIcon>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select a defense system</p>\r\n                                </Col>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select an isolation type</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col><AutocompleteC apiUrl='http://127.0.0.1:8800/api/v1/defense' multipleChoice={false}\r\n                                                    parentCallback={getSelectedDF}\r\n                                                    labelText=\"Choose a Defense System\"></AutocompleteC></Col><FontAwesomeIcon\r\n                                icon={faPlusCircle}/>\r\n                                <Col><AutocompleteC apiUrl='http://127.0.0.1:8800/api/v1/isolation/'\r\n                                                    multipleChoice={false}\r\n                                                    parentCallback={getSelectedISO}\r\n                                                    labelText=\"Select an Isolation Type\"></AutocompleteC></Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Button id=\"dviSearch\" onClick={() => parentCallback2(selectedDF, selectedIso)}\r\n                                disabled={buttonOff}>Search</Button>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n        </div>\r\n\r\n\r\n    );\r\n}","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSCat.jsx",["322","323","324","325","326","327","328","329"],"import React from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport AutocompleteC from \"../AutocompleteC\"\r\nimport {faPlusCircle} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport './Correlations.css'\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport {BsShieldShaded} from \"react-icons/bs\";\r\nimport {SiHubspot, SiMicrogenetics} from \"react-icons/si\";\r\n\r\n// calculates the correlation between one defense system to an ISO Type\r\nexport default function DefVSCat({parentCallback2}) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selectedDF, setSelectedDF] = React.useState([]);\r\n    const [selectedCls, setSelectedCls] = React.useState([]);\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n    const [buttonOff, setButtonOff] = React.useState(true)\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        console.log(selectedDF)\r\n        let arr = selectedDF.concat(selectedCls);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedDF]);\r\n\r\n    React.useEffect(() => {\r\n        console.log(selectedCls)\r\n        let arr = selectedCls.concat(selectedDF);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedCls]);\r\n\r\n\r\n    React.useEffect(() => {\r\n        if (getSelected() === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selected]);\r\n\r\n\r\n    const getSelectedDF = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelectedDF([selectedA]);\r\n        } else {\r\n            setSelectedDF([]);\r\n        }\r\n    }\r\n\r\n    const getSelectedCls = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelectedCls([selectedA]);\r\n        } else {\r\n            setSelectedCls([]);\r\n        }\r\n    }\r\n\r\n    const getSelected = () => {\r\n        return selected.length;\r\n    }\r\n\r\n    const getSelectedLengthIso = () => {\r\n        return selectedCls.length;\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n\r\n            <FadeIn>\r\n                <div className=\"title_s\">\r\n                    <h1>Defense System vs Attribute</h1>\r\n                </div>\r\n                <Form>\r\n\r\n                    <Form.Group as={Row} controlId=\"selectDefSys\">\r\n                        <Container>\r\n\r\n                            <Row >\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><BsShieldShaded/></ListItemIcon>\r\n                                </Col>\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><SiHubspot/></ListItemIcon>\r\n                                </Col>\r\n                            </Row>\r\n\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select a defense system</p>\r\n                                </Col>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select an attribute</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col><AutocompleteC apiUrl='http://127.0.0.1:8800/api/v1/defense' multipleChoice={false}\r\n                                                    parentCallback={getSelectedDF} labelText=\"Choose a Defense System\"></AutocompleteC></Col><FontAwesomeIcon\r\n                                icon={faPlusCircle}/>\r\n                                <Col><AutocompleteC apiUrl='http://127.0.0.1:8800/api/v1/isolation/attributes/'\r\n                                                    multipleChoice={false}\r\n                                                    parentCallback={getSelectedCls} labelText=\"Select an attribute\"></AutocompleteC></Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Button id=\"dvcSearch\" onClick={() => parentCallback2(selectedDF, selectedCls)}\r\n                                disabled={buttonOff}>Search</Button>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n        </div>\r\n\r\n\r\n    );\r\n}","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSDef.jsx",["330","331","332","333","334","335","336"],"import React from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport searchlogo from \"../../assets/images/research.png\"\r\nimport {Link} from \"react-router-dom\";\r\nimport AutocompleteC from \"../AutocompleteC\"\r\nimport './Correlations.css'\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport {BsShieldShaded} from \"react-icons/bs\";\r\nimport {SiHubspot} from \"react-icons/si\";\r\n\r\n// calculates the correlation between one defense system to another\r\nexport default function DefVSDef({parentCallback2}) {\r\n    //const [strainVariableName, setStrainVariableName] = React.useState(\"\")\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selectedA, setSelectedA] = React.useState([]);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n    const [buttonOff, setButtonOff] = React.useState(true)\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    },[loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        if (getSelectedLength() === 2){\r\n            setButtonOff(false)\r\n        }\r\n        else{\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedA]);\r\n\r\n\r\n    const getSelected = (selected) => {\r\n        setSelectedA(selected)\r\n\r\n    }\r\n\r\n\r\n    const getSelectedLength = () => {\r\n        return selectedA.length;\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n\r\n\r\n\r\n            <FadeIn>\r\n\r\n                <div className=\"title_s\">\r\n                    <h1>Defense System vs Defense System</h1>\r\n                </div>\r\n\r\n                <Form>\r\n\r\n                    <Row >\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><BsShieldShaded/></ListItemIcon>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Form.Group as={Row} controlId=\"selectDefSys\">\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}>Select two different defense systems</p>\r\n                        </Form.Label>\r\n                        <Col sm=\"4\">\r\n                            <AutocompleteC className=\"textBox\" apiUrl='http://127.0.0.1:8800/api/v1/defense' multipleChoice={true} limit_length={2}\r\n                                           parentCallback={getSelected} parentCallbackLegnth={getSelectedLength} labelText=\"Choose Defense Systems\" ></AutocompleteC>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Button id=\"dvdSearch\" onClick={() => parentCallback2(selectedA)} disabled={buttonOff}>Search</Button>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n        </div>\r\n\r\n\r\n    );\r\n}","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\ClusterVSIsoType.jsx",["337","338","339","340","341","342","343","344","345","346","347"],"import React from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport searchlogo from \"../../assets/images/research.png\"\r\nimport {Link} from \"react-router-dom\";\r\nimport AutocompleteC from \"../AutocompleteC\"\r\nimport {faPlusCircle, faAngleDoubleDown} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport {BsShieldShaded} from \"react-icons/bs\";\r\nimport {GiDrippingTube} from \"react-icons/gi\";\r\nimport './Correlations.css'\r\nimport {SiMicrogenetics} from \"react-icons/si\";\r\n\r\n// calculates the correlation between one cluster to an ISO Type\r\nexport default function ClusterVSIsoType({parentCallback2}) {\r\n    //const [strainVariableName, setStrainVariableName] = React.useState(\"\")\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selectedIso, setSelectedIso] = React.useState([]);\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n    const [buttonOff, setButtonOff] = React.useState(true);\r\n    const [selected_strain, setSelected_strain] = React.useState([]);\r\n    const [selected_gene, setSelected_gene] = React.useState([]);\r\n    const [strains, setStrains] = React.useState([\r\n        {\r\n            name: \"PAO1\",\r\n            id: \"GCF_000006765.1\"\r\n        },\r\n        {\r\n            name: \"PA14\",\r\n            id: \"GCF_000014625.1\"\r\n        }\r\n    ])\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        // let arr = selectedDF.concat(selectedIso);\r\n        // setSelected(arr)\r\n        console.log(selectedIso)\r\n        let arr = selectedIso.concat(selected_gene);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedIso]);\r\n\r\n    React.useEffect(() => {\r\n        // let arr = selectedDF.concat(selectedIso);\r\n        // setSelected(arr)\r\n        console.log(selected_gene)\r\n        let arr = selected_gene.concat(selectedIso);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selected_gene]);\r\n\r\n\r\n    const getSelectedIso = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelectedIso([selectedA]);\r\n        } else {\r\n            setSelectedIso([]);\r\n        }\r\n    }\r\n\r\n    const getSelectedGene = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelected_gene([selectedA]);\r\n        } else {\r\n            setSelected_gene([]);\r\n        }\r\n    }\r\n\r\n\r\n    const choice_strain = (selected) => {\r\n        if (selected != null)\r\n            setSelected_strain(selected)\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n\r\n            <FadeIn>\r\n\r\n                <div className=\"title_s\">\r\n                    <h1>Cluster vs Isolation Type</h1>\r\n                </div>\r\n                <Form>\r\n\r\n                    <Form.Group as={Row} controlId=\"selectDefSys\">\r\n                        <Container>\r\n                            <Row >\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><SiMicrogenetics/></ListItemIcon>\r\n                                </Col>\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><GiDrippingTube/></ListItemIcon>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select a strain and a gene</p>\r\n                                </Col>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select an isolation type</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Autocomplete\r\n                                        id=\"strains-combo-box\"\r\n                                        options={strains}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        //style={{width: 300}}\r\n                                        onChange={(event, value) => choice_strain(value)}\r\n                                        renderInput={(params) => <TextField {...params} size=\"small\"\r\n                                                                            label=\"Choose Strain\"\r\n                                                                            variant=\"outlined\"/>}\r\n                                    />\r\n                                    <div style={{textAlign: 'center', paddingTop: '7px', paddingBottom: '7px'}}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faAngleDoubleDown}/>\r\n                                    </div>\r\n                                    <AutocompleteC multipleChoice={false}\r\n                                                   parentCallback={getSelectedGene}\r\n                                                   apiUrl={\"http://127.0.0.1:8800/api/v1/cluster/get_gene_strain_id/\" + selected_strain.id}\r\n                                                   labelText=\"Choose Gene\"\r\n                                                   disabled={selected_strain == \"\"}\r\n                                    />\r\n\r\n                                </Col><FontAwesomeIcon\r\n                                icon={faPlusCircle}/>\r\n                                <Col><AutocompleteC apiUrl='http://127.0.0.1:8800/api/v1/isolation/' multipleChoice={false}\r\n                                                    parentCallback={getSelectedIso} labelText=\"Select an Isolation Type\"></AutocompleteC></Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Button id=\"clviSearch\" onClick={() => parentCallback2(selectedIso, selected_strain, selected_gene)}\r\n                                disabled={buttonOff}>Search</Button>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n        </div>\r\n    );\r\n}","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DrawerCorrelation.jsx",["348"],"import React from \"react\";\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport clsx from 'clsx';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport List from '@material-ui/core/List';\r\nimport {BsShieldShaded} from 'react-icons/bs';\r\nimport {SiMicrogenetics, SiHubspot} from 'react-icons/si';\r\nimport {GiDrippingTube} from 'react-icons/gi';\r\nimport {faPlusCircle} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\n\r\nconst drawerWidth = 400;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        whiteSpace: 'nowrap',\r\n\r\n    },\r\n    drawerOpen: {\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerClose: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        overflowX: 'hidden',\r\n        width: theme.spacing(7) + 1,\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(7) + 1,\r\n        },\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        // justifyContent: 'flex-end',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nexport default function DrawerCorrelation({generatingTypeHandler}) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleDrawerOpen = () => {\r\n        if (open == true) {\r\n            setOpen(false)\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Drawer\r\n                PaperProps={{style: {position: 'absolute', height: '83.5%', marginTop: '4.5%'}, width: '70%'}}\r\n                BackdropProps={{style: {position: 'absolute'}}}\r\n                ModalProps={{\r\n                    container: document.getElementById('drawer'),\r\n                    style: {position: 'absolute'}\r\n                }}\r\n                anchor='right'\r\n                variant=\"permanent\"\r\n                className={clsx(classes.drawer, {\r\n                    [classes.drawerOpen]: open,\r\n                    [classes.drawerClose]: !open,\r\n                })}\r\n                classes={{\r\n                    paper: clsx({\r\n                        [classes.drawerOpen]: open,\r\n                        [classes.drawerClose]: !open,\r\n                    }),\r\n                }}\r\n            >\r\n                <div className={classes.toolbar}>\r\n                    <IconButton onClick={handleDrawerOpen}>\r\n                        {theme.direction === 'rtl' ? <ChevronRightIcon/> : <ChevronLeftIcon/>}\r\n                    </IconButton>\r\n                    Choose Display:\r\n                </div>\r\n                <Divider/>\r\n                <List>\r\n\r\n                    <ListItem  button key=\"dvd\" id=\"dvd\" onClick={() => generatingTypeHandler(\"dvd\")}>\r\n                        {/*<OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Tooltip!</Tooltip>}>*/}\r\n                            <ListItemIcon>\r\n                                <BsShieldShaded/><BsShieldShaded/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Defense system vs Defense system\"/>\r\n\r\n                    </ListItem>\r\n                    <ListItem button key=\"dvc\" id=\"dvc\" onClick={() => generatingTypeHandler(\"dvc\")}>\r\n                        <ListItemIcon><BsShieldShaded/><SiHubspot/></ListItemIcon>\r\n                        <ListItemText primary=\"Defense system vs Attribute\"/>\r\n                    </ListItem>\r\n                    <ListItem button key=\"dvi\" id=\"dvi\" onClick={() => generatingTypeHandler(\"dvi\")}>\r\n                        <ListItemIcon><BsShieldShaded/><GiDrippingTube/></ListItemIcon>\r\n                        <ListItemText primary=\"Defense system vs Isolation Type\"/>\r\n                    </ListItem>\r\n                    <ListItem button key=\"dvcl\" id=\"dvcl\" onClick={() => generatingTypeHandler(\"dvcl\")}>\r\n                        <ListItemIcon><BsShieldShaded/><SiMicrogenetics/></ListItemIcon>\r\n                        <ListItemText primary=\"Defense system vs Cluster\"/>\r\n                    </ListItem>\r\n                    <ListItem button key=\"clvi\" id=\"clvi\" onClick={() => generatingTypeHandler(\"clvi\")}>\r\n                        <ListItemIcon><SiMicrogenetics/><GiDrippingTube/></ListItemIcon>\r\n                        <ListItemText primary=\"Cluster vs Isolation Type\"/>\r\n                    </ListItem>\r\n                </List>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n}","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSCluster.jsx",["349","350","351","352","353","354","355","356"],"import React from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport searchlogo from \"../../assets/images/research.png\"\r\nimport {Link} from \"react-router-dom\";\r\nimport AutocompleteC from \"../AutocompleteC\"\r\nimport {faPlusCircle, faAngleDoubleDown} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './Correlations.css'\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport {BsShieldShaded} from \"react-icons/bs\";\r\nimport {GiDrippingTube} from \"react-icons/gi\";\r\nimport {SiMicrogenetics} from \"react-icons/si\";\r\n\r\n// calculates the correlation between one defense system to a cluster Type\r\nexport default function DefVSCluster({parentCallback2}) {\r\n    //const [strainVariableName, setStrainVariableName] = React.useState(\"\")\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selectedDF, setSelectedDF] = React.useState([]);\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n    const [buttonOff, setButtonOff] = React.useState(true);\r\n    const [selected_strain, setSelected_strain] = React.useState([]);\r\n    const [selected_gene, setSelected_gene] = React.useState([]);\r\n    const [strains, setStrains] = React.useState([\r\n        {\r\n            name: \"PAO1\",\r\n            id: \"GCF_000006765.1\"\r\n        },\r\n        {\r\n            name: \"PA14\",\r\n            id: \"GCF_000014625.1\"\r\n        }\r\n    ])\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        // let arr = selectedDF.concat(selectedIso);\r\n        // setSelected(arr)\r\n        console.log(selectedDF)\r\n        let arr = selectedDF.concat(selected_gene);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedDF]);\r\n\r\n    React.useEffect(() => {\r\n        // let arr = selectedDF.concat(selectedIso);\r\n        // setSelected(arr)\r\n        console.log(selected_gene)\r\n        let arr = selected_gene.concat(selectedDF);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selected_gene]);\r\n\r\n\r\n    const getSelectedDF = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelectedDF([selectedA]);\r\n        } else {\r\n            setSelectedDF([]);\r\n        }\r\n    }\r\n\r\n    const getSelectedGene = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelected_gene([selectedA]);\r\n        } else {\r\n            setSelected_gene([]);\r\n        }\r\n    }\r\n\r\n\r\n    const choice_strain = (selected) => {\r\n        if (selected != null)\r\n            setSelected_strain(selected)\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n\r\n\r\n\r\n            <FadeIn>\r\n\r\n                <div className=\"title_s\">\r\n                    <h1>Defense System vs Cluster</h1>\r\n                </div>\r\n\r\n                <Form>\r\n\r\n\r\n                    {/*<Form.Group as={Row} controlId=\"selectDefSys\">*/}\r\n                    {/*    <Form.Label className=\"wrapper\" column sm=\"4\">*/}\r\n                    {/*        <p style={{textAlign: \"right\"}}>Select two different defense systems</p>*/}\r\n                    {/*    </Form.Label>*/}\r\n                    {/*    <Row>*/}\r\n                    {/*        <Col sm=\"2\">*/}\r\n                    {/*            <AutocompleteC apiUrl='http://127.0.0.1:8800/api/v1/defense' multipleChoice={false}*/}\r\n                    {/*                           parentCallback={getSelected}></AutocompleteC>*/}\r\n                    {/*        </Col>*/}\r\n                    {/*        &*/}\r\n                    {/*        <Col sm=\"2\">*/}\r\n                    {/*            <AutocompleteC apiUrl='http://127.0.0.1:8800/api/v1/defense' multipleChoice={false}*/}\r\n                    {/*                           parentCallback={getSelected}></AutocompleteC>*/}\r\n                    {/*        </Col>*/}\r\n                    {/*    </Row>*/}\r\n                    {/*    <Row>*/}\r\n                    {/*        <Col sm=\"2\">*/}\r\n                    {/*            <p style={{textAlign: \"right\"}}>Select two different defense systems</p>*/}\r\n                    {/*        </Col>*/}\r\n                    {/*        <Col sm=\"2\">*/}\r\n                    {/*            <p style={{textAlign: \"right\"}}>Select two different defense systems</p>*/}\r\n                    {/*        </Col>*/}\r\n                    {/*    </Row>*/}\r\n                    {/*</Form.Group>*/}\r\n\r\n                    <Form.Group as={Row} controlId=\"selectDefSys\">\r\n                        <Container>\r\n\r\n                            <Row >\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><BsShieldShaded/></ListItemIcon>\r\n                                </Col>\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><SiMicrogenetics/></ListItemIcon>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select a defense system</p>\r\n                                </Col>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select a strain and a gene</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col><AutocompleteC apiUrl='http://127.0.0.1:8800/api/v1/defense' multipleChoice={false}\r\n                                                    parentCallback={getSelectedDF}></AutocompleteC></Col><FontAwesomeIcon\r\n                                icon={faPlusCircle}/>\r\n                                <Col>\r\n                                    <Autocomplete\r\n                                        id=\"strains-combo-box\"\r\n                                        labelText=\"Choose a Defense System\"\r\n                                        options={strains}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        //style={{width: 300}}\r\n                                        onChange={(event, value) => choice_strain(value)}\r\n                                        renderInput={(params) => <TextField {...params} size=\"small\"\r\n                                                                            label=\"Choose Strain\"\r\n                                                                            variant=\"outlined\"/>}\r\n                                    />\r\n                                    <div style={{textAlign: 'center', paddingTop: '7px', paddingBottom: '7px'}}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faAngleDoubleDown}/>\r\n                                    </div>\r\n                                    <AutocompleteC multipleChoice={false}\r\n                                                   parentCallback={getSelectedGene}\r\n                                                   apiUrl={\"http://127.0.0.1:8800/api/v1/cluster/get_gene_strain_id/\" + selected_strain.id}\r\n                                                   labelText=\"Choose Gene\"\r\n                                                   disabled={selected_strain == \"\"}\r\n                                    />\r\n\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Button id=\"dvclSearch\" onClick={() => parentCallback2(selectedDF, selected_strain, selected_gene)}\r\n                                disabled={buttonOff}>Search</Button>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n        </div>\r\n\r\n\r\n    );\r\n}","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationBoxPlot.jsx",[],"C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\ErrorModalC.jsx",["357","358","359","360","361","362"],"import React, { Component } from \"react\";\r\nimport '../styles/StrainForm.css';\r\nimport axios from \"axios\";\r\nimport {Form, Col, Row, Button, Modal} from \"react-bootstrap\";\r\nimport AutocompleteC from \"../components/AutocompleteC\";\r\nimport TextOrFileUpload from \"./TextOrFileUpload\";\r\n\r\nclass ErrorModalC extends Component {\r\n    state = {open: this.props.open};\r\n\r\n    handleClose = () => {\r\n        this.setState({ open: false});\r\n    }\r\n\r\n    handleOpen = () => {\r\n        this.setState({ open: true});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <Modal show={this.state.open} onHide={this.handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Server Error</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>There is a problem with the server request. Sorry for the inconvenience.</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={()=>{this.setState({open:false})}}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            </div>\r\n        );\r\n    }\r\n} export default ErrorModalC;","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\CSVorFastaC.jsx",["363","364","365"],"import React, {Component} from \"react\";\r\nimport '../styles/SearchPage.css';\r\nimport {Form, Col, Row, Button} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport ErrorModalC from \"./ErrorModalC\";\r\n\r\n\r\nclass CSVorFastaC extends Component {\r\n\r\n    // const [csv, setCsv] = React.useState(true);\r\n    // const [prot, setProt] = React.useState(true);\r\n\r\n    state = {\r\n        csv: true,\r\n        prot: true\r\n    };\r\n\r\n    changeOptionFileType = () => {\r\n        // setCsv(!csv)\r\n        this.setState({csv: !this.state.csv})\r\n    }\r\n\r\n    changeOptionFastaType = () => {\r\n        // setProt(!prot)\r\n        this.setState({prot: !this.state.prot})\r\n    }\r\n\r\n\r\n    getCsv(){\r\n        return this.state.csv;\r\n    }\r\n\r\n    getProt(){\r\n        return this.state.prot;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-form\">\r\n                <Form>\r\n                    <fieldset>\r\n                        <Form.Group as={Row}>\r\n                            <Col sm={5}>\r\n                                <Form.Check\r\n                                    type=\"radio\"\r\n                                    label=\"CSV File\"\r\n                                    name=\"downloadoption\"\r\n                                    id=\"csvfile\"\r\n                                    defaultChecked={true}\r\n                                    onChange={this.changeOptionFileType}\r\n                                />\r\n                                <Form.Check\r\n                                    type=\"radio\"\r\n                                    label=\"Fasta file\"\r\n                                    name=\"downloadoption\"\r\n                                    id=\"fastafile\"\r\n                                    onChange={this.changeOptionFileType}\r\n                                />\r\n                                <fieldset>\r\n                                    <Form.Group style={{paddingLeft: '50px'}} as={Row}>\r\n                                            <Form.Check\r\n                                                type=\"radio\"\r\n                                                label=\"Fasta of Protein\"\r\n                                                name=\"fastoption\"\r\n                                                id=\"prot\"\r\n                                                disabled={this.state.csv}\r\n                                                defaultChecked={this.state.csv}\r\n                                                onChange={this.changeOptionFastaType}\r\n                                            />\r\n                                            <Form.Check\r\n                                                type=\"radio\"\r\n                                                label=\"Fasta of DNA\"\r\n                                                name=\"fastoption\"\r\n                                                id=\"dna\"\r\n                                                disabled={this.state.csv}\r\n                                                onChange={this.changeOptionFastaType}\r\n                                            />\r\n                                    </Form.Group>\r\n                                </fieldset>\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </fieldset>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default CSVorFastaC;","C:\\Users\\yinon\\IdeaProjects\\pasite-frontend\\src\\components\\WarningModalC.jsx",[],{"ruleId":"366","replacedBy":"367"},{"ruleId":"368","replacedBy":"369"},{"ruleId":"370","severity":1,"message":"371","line":11,"column":17,"nodeType":"372","endLine":11,"endColumn":53},{"ruleId":"373","severity":1,"message":"374","line":1,"column":16,"nodeType":"375","messageId":"376","endLine":1,"endColumn":24},{"ruleId":"373","severity":1,"message":"374","line":1,"column":27,"nodeType":"375","messageId":"376","endLine":1,"endColumn":35},{"ruleId":"373","severity":1,"message":"377","line":1,"column":37,"nodeType":"375","messageId":"376","endLine":1,"endColumn":43},{"ruleId":"373","severity":1,"message":"374","line":1,"column":16,"nodeType":"375","messageId":"376","endLine":1,"endColumn":24},{"ruleId":"373","severity":1,"message":"378","line":2,"column":33,"nodeType":"375","messageId":"376","endLine":2,"endColumn":47},{"ruleId":"373","severity":1,"message":"379","line":2,"column":49,"nodeType":"375","messageId":"376","endLine":2,"endColumn":56},{"ruleId":"380","severity":1,"message":"381","line":52,"column":7,"nodeType":"382","endLine":52,"endColumn":16,"suggestions":"383"},{"ruleId":"370","severity":1,"message":"371","line":70,"column":33,"nodeType":"372","endLine":70,"endColumn":107},{"ruleId":"373","severity":1,"message":"384","line":8,"column":27,"nodeType":"375","messageId":"376","endLine":8,"endColumn":40},{"ruleId":"373","severity":1,"message":"385","line":27,"column":15,"nodeType":"375","messageId":"376","endLine":27,"endColumn":21},{"ruleId":"386","severity":1,"message":"387","line":144,"column":18,"nodeType":"388","messageId":"389","endLine":144,"endColumn":20},{"ruleId":"386","severity":1,"message":"387","line":146,"column":23,"nodeType":"388","messageId":"389","endLine":146,"endColumn":25},{"ruleId":"386","severity":1,"message":"387","line":148,"column":25,"nodeType":"388","messageId":"389","endLine":148,"endColumn":27},{"ruleId":"373","severity":1,"message":"374","line":1,"column":16,"nodeType":"375","messageId":"376","endLine":1,"endColumn":24},{"ruleId":"373","severity":1,"message":"378","line":3,"column":33,"nodeType":"375","messageId":"376","endLine":3,"endColumn":47},{"ruleId":"373","severity":1,"message":"379","line":3,"column":49,"nodeType":"375","messageId":"376","endLine":3,"endColumn":56},{"ruleId":"373","severity":1,"message":"390","line":11,"column":18,"nodeType":"375","messageId":"376","endLine":11,"endColumn":25},{"ruleId":"373","severity":1,"message":"391","line":12,"column":12,"nodeType":"375","messageId":"376","endLine":12,"endColumn":19},{"ruleId":"380","severity":1,"message":"392","line":29,"column":8,"nodeType":"382","endLine":29,"endColumn":19,"suggestions":"393"},{"ruleId":"370","severity":1,"message":"371","line":49,"column":33,"nodeType":"372","endLine":49,"endColumn":107},{"ruleId":"373","severity":1,"message":"374","line":1,"column":27,"nodeType":"375","messageId":"376","endLine":1,"endColumn":35},{"ruleId":"373","severity":1,"message":"377","line":1,"column":37,"nodeType":"375","messageId":"376","endLine":1,"endColumn":43},{"ruleId":"373","severity":1,"message":"394","line":3,"column":8,"nodeType":"375","messageId":"376","endLine":3,"endColumn":16},{"ruleId":"373","severity":1,"message":"395","line":4,"column":8,"nodeType":"375","messageId":"376","endLine":4,"endColumn":20},{"ruleId":"373","severity":1,"message":"396","line":1,"column":27,"nodeType":"375","messageId":"376","endLine":1,"endColumn":36},{"ruleId":"373","severity":1,"message":"377","line":1,"column":38,"nodeType":"375","messageId":"376","endLine":1,"endColumn":44},{"ruleId":"373","severity":1,"message":"374","line":1,"column":46,"nodeType":"375","messageId":"376","endLine":1,"endColumn":54},{"ruleId":"373","severity":1,"message":"397","line":89,"column":13,"nodeType":"375","messageId":"376","endLine":89,"endColumn":20},{"ruleId":"386","severity":1,"message":"387","line":98,"column":57,"nodeType":"388","messageId":"389","endLine":98,"endColumn":59},{"ruleId":"386","severity":1,"message":"398","line":185,"column":26,"nodeType":"388","messageId":"389","endLine":185,"endColumn":28},{"ruleId":"370","severity":1,"message":"371","line":400,"column":45,"nodeType":"372","endLine":404,"endColumn":75},{"ruleId":"373","severity":1,"message":"399","line":2,"column":9,"nodeType":"375","messageId":"376","endLine":2,"endColumn":13},{"ruleId":"373","severity":1,"message":"400","line":2,"column":15,"nodeType":"375","messageId":"376","endLine":2,"endColumn":19},{"ruleId":"373","severity":1,"message":"401","line":2,"column":21,"nodeType":"375","messageId":"376","endLine":2,"endColumn":30},{"ruleId":"373","severity":1,"message":"402","line":2,"column":32,"nodeType":"375","messageId":"376","endLine":2,"endColumn":35},{"ruleId":"373","severity":1,"message":"403","line":2,"column":37,"nodeType":"375","messageId":"376","endLine":2,"endColumn":40},{"ruleId":"373","severity":1,"message":"404","line":3,"column":9,"nodeType":"375","messageId":"376","endLine":3,"endColumn":13},{"ruleId":"373","severity":1,"message":"405","line":3,"column":15,"nodeType":"375","messageId":"376","endLine":3,"endColumn":19},{"ruleId":"373","severity":1,"message":"406","line":4,"column":8,"nodeType":"375","messageId":"376","endLine":4,"endColumn":14},{"ruleId":"373","severity":1,"message":"407","line":6,"column":8,"nodeType":"375","messageId":"376","endLine":6,"endColumn":14},{"ruleId":"373","severity":1,"message":"408","line":7,"column":8,"nodeType":"375","messageId":"376","endLine":7,"endColumn":14},{"ruleId":"373","severity":1,"message":"409","line":8,"column":8,"nodeType":"375","messageId":"376","endLine":8,"endColumn":14},{"ruleId":"373","severity":1,"message":"410","line":12,"column":9,"nodeType":"375","messageId":"376","endLine":12,"endColumn":14},{"ruleId":"373","severity":1,"message":"411","line":12,"column":16,"nodeType":"375","messageId":"376","endLine":12,"endColumn":22},{"ruleId":"373","severity":1,"message":"412","line":13,"column":9,"nodeType":"375","messageId":"376","endLine":13,"endColumn":24},{"ruleId":"373","severity":1,"message":"413","line":14,"column":8,"nodeType":"375","messageId":"376","endLine":14,"endColumn":21},{"ruleId":"373","severity":1,"message":"414","line":16,"column":8,"nodeType":"375","messageId":"376","endLine":16,"endColumn":18},{"ruleId":"373","severity":1,"message":"415","line":17,"column":8,"nodeType":"375","messageId":"376","endLine":17,"endColumn":23},{"ruleId":"373","severity":1,"message":"416","line":18,"column":8,"nodeType":"375","messageId":"376","endLine":18,"endColumn":13},{"ruleId":"373","severity":1,"message":"417","line":19,"column":8,"nodeType":"375","messageId":"376","endLine":19,"endColumn":27},{"ruleId":"373","severity":1,"message":"418","line":20,"column":8,"nodeType":"375","messageId":"376","endLine":20,"endColumn":23},{"ruleId":"373","severity":1,"message":"419","line":21,"column":8,"nodeType":"375","messageId":"376","endLine":21,"endColumn":24},{"ruleId":"373","severity":1,"message":"420","line":22,"column":8,"nodeType":"375","messageId":"376","endLine":22,"endColumn":24},{"ruleId":"373","severity":1,"message":"421","line":23,"column":8,"nodeType":"375","messageId":"376","endLine":23,"endColumn":30},{"ruleId":"373","severity":1,"message":"422","line":2,"column":8,"nodeType":"375","messageId":"376","endLine":2,"endColumn":14},{"ruleId":"373","severity":1,"message":"423","line":3,"column":9,"nodeType":"375","messageId":"376","endLine":3,"endColumn":15},{"ruleId":"373","severity":1,"message":"403","line":3,"column":17,"nodeType":"375","messageId":"376","endLine":3,"endColumn":20},{"ruleId":"373","severity":1,"message":"424","line":3,"column":22,"nodeType":"375","messageId":"376","endLine":3,"endColumn":26},{"ruleId":"373","severity":1,"message":"425","line":3,"column":28,"nodeType":"375","messageId":"376","endLine":3,"endColumn":31},{"ruleId":"373","severity":1,"message":"402","line":3,"column":33,"nodeType":"375","messageId":"376","endLine":3,"endColumn":36},{"ruleId":"373","severity":1,"message":"426","line":3,"column":38,"nodeType":"375","messageId":"376","endLine":3,"endColumn":41},{"ruleId":"373","severity":1,"message":"427","line":4,"column":8,"nodeType":"375","messageId":"376","endLine":4,"endColumn":18},{"ruleId":"373","severity":1,"message":"428","line":5,"column":9,"nodeType":"375","messageId":"376","endLine":5,"endColumn":13},{"ruleId":"373","severity":1,"message":"429","line":8,"column":8,"nodeType":"375","messageId":"376","endLine":8,"endColumn":18},{"ruleId":"373","severity":1,"message":"418","line":9,"column":8,"nodeType":"375","messageId":"376","endLine":9,"endColumn":23},{"ruleId":"373","severity":1,"message":"430","line":11,"column":8,"nodeType":"375","messageId":"376","endLine":11,"endColumn":18},{"ruleId":"386","severity":1,"message":"387","line":51,"column":19,"nodeType":"388","messageId":"389","endLine":51,"endColumn":21},{"ruleId":"386","severity":1,"message":"387","line":53,"column":26,"nodeType":"388","messageId":"389","endLine":53,"endColumn":28},{"ruleId":"386","severity":1,"message":"387","line":55,"column":26,"nodeType":"388","messageId":"389","endLine":55,"endColumn":28},{"ruleId":"386","severity":1,"message":"387","line":57,"column":26,"nodeType":"388","messageId":"389","endLine":57,"endColumn":28},{"ruleId":"386","severity":1,"message":"387","line":83,"column":36,"nodeType":"388","messageId":"389","endLine":83,"endColumn":38},{"ruleId":"386","severity":1,"message":"387","line":85,"column":33,"nodeType":"388","messageId":"389","endLine":85,"endColumn":35},{"ruleId":"386","severity":1,"message":"387","line":87,"column":40,"nodeType":"388","messageId":"389","endLine":87,"endColumn":42},{"ruleId":"386","severity":1,"message":"387","line":89,"column":40,"nodeType":"388","messageId":"389","endLine":89,"endColumn":42},{"ruleId":"386","severity":1,"message":"387","line":91,"column":40,"nodeType":"388","messageId":"389","endLine":91,"endColumn":42},{"ruleId":"386","severity":1,"message":"387","line":93,"column":40,"nodeType":"388","messageId":"389","endLine":93,"endColumn":42},{"ruleId":"366","replacedBy":"431"},{"ruleId":"368","replacedBy":"432"},{"ruleId":"433","severity":1,"message":"434","line":13,"column":13,"nodeType":"372","endLine":13,"endColumn":151},{"ruleId":"373","severity":1,"message":"435","line":8,"column":21,"nodeType":"375","messageId":"376","endLine":8,"endColumn":31},{"ruleId":"373","severity":1,"message":"436","line":6,"column":8,"nodeType":"375","messageId":"376","endLine":6,"endColumn":17},{"ruleId":"373","severity":1,"message":"437","line":7,"column":8,"nodeType":"375","messageId":"376","endLine":7,"endColumn":16},{"ruleId":"386","severity":1,"message":"387","line":91,"column":18,"nodeType":"388","messageId":"389","endLine":91,"endColumn":20},{"ruleId":"373","severity":1,"message":"416","line":4,"column":8,"nodeType":"375","messageId":"376","endLine":4,"endColumn":13},{"ruleId":"373","severity":1,"message":"424","line":5,"column":9,"nodeType":"375","messageId":"376","endLine":5,"endColumn":13},{"ruleId":"373","severity":1,"message":"403","line":5,"column":15,"nodeType":"375","messageId":"376","endLine":5,"endColumn":18},{"ruleId":"373","severity":1,"message":"402","line":5,"column":20,"nodeType":"375","messageId":"376","endLine":5,"endColumn":23},{"ruleId":"373","severity":1,"message":"423","line":5,"column":25,"nodeType":"375","messageId":"376","endLine":5,"endColumn":31},{"ruleId":"373","severity":1,"message":"438","line":5,"column":33,"nodeType":"375","messageId":"376","endLine":5,"endColumn":38},{"ruleId":"373","severity":1,"message":"439","line":6,"column":8,"nodeType":"375","messageId":"376","endLine":6,"endColumn":17},{"ruleId":"373","severity":1,"message":"440","line":7,"column":8,"nodeType":"375","messageId":"376","endLine":7,"endColumn":20},{"ruleId":"373","severity":1,"message":"418","line":8,"column":8,"nodeType":"375","messageId":"376","endLine":8,"endColumn":23},{"ruleId":"373","severity":1,"message":"441","line":9,"column":9,"nodeType":"375","messageId":"376","endLine":9,"endColumn":18},{"ruleId":"373","severity":1,"message":"442","line":10,"column":8,"nodeType":"375","messageId":"376","endLine":10,"endColumn":31},{"ruleId":"373","severity":1,"message":"403","line":3,"column":15,"nodeType":"375","messageId":"376","endLine":3,"endColumn":18},{"ruleId":"373","severity":1,"message":"402","line":3,"column":20,"nodeType":"375","messageId":"376","endLine":3,"endColumn":23},{"ruleId":"373","severity":1,"message":"423","line":6,"column":8,"nodeType":"375","messageId":"376","endLine":6,"endColumn":14},{"ruleId":"386","severity":1,"message":"387","line":22,"column":21,"nodeType":"388","messageId":"389","endLine":22,"endColumn":23},{"ruleId":"443","severity":1,"message":"444","line":24,"column":97,"nodeType":"445","endLine":24,"endColumn":128},{"ruleId":"386","severity":1,"message":"387","line":37,"column":21,"nodeType":"388","messageId":"389","endLine":37,"endColumn":23},{"ruleId":"380","severity":1,"message":"446","line":55,"column":7,"nodeType":"382","endLine":55,"endColumn":16,"suggestions":"447"},{"ruleId":"373","severity":1,"message":"424","line":3,"column":9,"nodeType":"375","messageId":"376","endLine":3,"endColumn":13},{"ruleId":"373","severity":1,"message":"403","line":3,"column":15,"nodeType":"375","messageId":"376","endLine":3,"endColumn":18},{"ruleId":"373","severity":1,"message":"402","line":3,"column":20,"nodeType":"375","messageId":"376","endLine":3,"endColumn":23},{"ruleId":"373","severity":1,"message":"448","line":1,"column":16,"nodeType":"375","messageId":"376","endLine":1,"endColumn":25},{"ruleId":"373","severity":1,"message":"390","line":14,"column":18,"nodeType":"375","messageId":"376","endLine":14,"endColumn":25},{"ruleId":"373","severity":1,"message":"449","line":15,"column":21,"nodeType":"375","messageId":"376","endLine":15,"endColumn":31},{"ruleId":"373","severity":1,"message":"450","line":16,"column":11,"nodeType":"375","messageId":"376","endLine":16,"endColumn":18},{"ruleId":"386","severity":1,"message":"387","line":93,"column":30,"nodeType":"388","messageId":"389","endLine":93,"endColumn":32},{"ruleId":"386","severity":1,"message":"387","line":106,"column":30,"nodeType":"388","messageId":"389","endLine":106,"endColumn":32},{"ruleId":"386","severity":1,"message":"387","line":131,"column":49,"nodeType":"388","messageId":"389","endLine":131,"endColumn":51},{"ruleId":"373","severity":1,"message":"448","line":1,"column":17,"nodeType":"375","messageId":"376","endLine":1,"endColumn":26},{"ruleId":"373","severity":1,"message":"451","line":6,"column":8,"nodeType":"375","messageId":"376","endLine":6,"endColumn":21},{"ruleId":"373","severity":1,"message":"452","line":9,"column":10,"nodeType":"375","messageId":"376","endLine":9,"endColumn":15},{"ruleId":"373","severity":1,"message":"390","line":16,"column":18,"nodeType":"375","messageId":"376","endLine":16,"endColumn":25},{"ruleId":"373","severity":1,"message":"449","line":17,"column":21,"nodeType":"375","messageId":"376","endLine":17,"endColumn":31},{"ruleId":"373","severity":1,"message":"450","line":18,"column":11,"nodeType":"375","messageId":"376","endLine":18,"endColumn":18},{"ruleId":"386","severity":1,"message":"387","line":95,"column":29,"nodeType":"388","messageId":"389","endLine":95,"endColumn":31},{"ruleId":"386","severity":1,"message":"387","line":108,"column":29,"nodeType":"388","messageId":"389","endLine":108,"endColumn":31},{"ruleId":"373","severity":1,"message":"438","line":3,"column":25,"nodeType":"375","messageId":"376","endLine":3,"endColumn":30},{"ruleId":"373","severity":1,"message":"423","line":3,"column":32,"nodeType":"375","messageId":"376","endLine":3,"endColumn":38},{"ruleId":"373","severity":1,"message":"452","line":10,"column":10,"nodeType":"375","messageId":"376","endLine":10,"endColumn":15},{"ruleId":"380","severity":1,"message":"453","line":64,"column":8,"nodeType":"382","endLine":64,"endColumn":17,"suggestions":"454"},{"ruleId":"386","severity":1,"message":"387","line":136,"column":31,"nodeType":"388","messageId":"389","endLine":136,"endColumn":33},{"ruleId":"386","severity":1,"message":"387","line":176,"column":38,"nodeType":"388","messageId":"389","endLine":176,"endColumn":40},{"ruleId":"386","severity":1,"message":"387","line":222,"column":38,"nodeType":"388","messageId":"389","endLine":222,"endColumn":40},{"ruleId":"386","severity":1,"message":"387","line":265,"column":38,"nodeType":"388","messageId":"389","endLine":265,"endColumn":40},{"ruleId":"386","severity":1,"message":"387","line":308,"column":38,"nodeType":"388","messageId":"389","endLine":308,"endColumn":40},{"ruleId":"386","severity":1,"message":"398","line":372,"column":35,"nodeType":"388","messageId":"389","endLine":372,"endColumn":37},{"ruleId":"386","severity":1,"message":"387","line":390,"column":35,"nodeType":"388","messageId":"389","endLine":390,"endColumn":37},{"ruleId":"386","severity":1,"message":"387","line":412,"column":42,"nodeType":"388","messageId":"389","endLine":412,"endColumn":44},{"ruleId":"386","severity":1,"message":"387","line":434,"column":42,"nodeType":"388","messageId":"389","endLine":434,"endColumn":44},{"ruleId":"386","severity":1,"message":"387","line":456,"column":41,"nodeType":"388","messageId":"389","endLine":456,"endColumn":43},{"ruleId":"386","severity":1,"message":"398","line":504,"column":35,"nodeType":"388","messageId":"389","endLine":504,"endColumn":37},{"ruleId":"386","severity":1,"message":"387","line":95,"column":19,"nodeType":"388","messageId":"389","endLine":95,"endColumn":21},{"ruleId":"386","severity":1,"message":"387","line":107,"column":19,"nodeType":"388","messageId":"389","endLine":107,"endColumn":21},{"ruleId":"386","severity":1,"message":"387","line":117,"column":19,"nodeType":"388","messageId":"389","endLine":117,"endColumn":21},{"ruleId":"373","severity":1,"message":"390","line":14,"column":18,"nodeType":"375","messageId":"376","endLine":14,"endColumn":25},{"ruleId":"373","severity":1,"message":"455","line":17,"column":22,"nodeType":"375","messageId":"376","endLine":17,"endColumn":33},{"ruleId":"373","severity":1,"message":"456","line":30,"column":13,"nodeType":"375","messageId":"376","endLine":30,"endColumn":19},{"ruleId":"380","severity":1,"message":"457","line":48,"column":8,"nodeType":"382","endLine":48,"endColumn":20,"suggestions":"458"},{"ruleId":"380","severity":1,"message":"459","line":58,"column":8,"nodeType":"382","endLine":58,"endColumn":21,"suggestions":"460"},{"ruleId":"380","severity":1,"message":"461","line":67,"column":8,"nodeType":"382","endLine":67,"endColumn":18,"suggestions":"462"},{"ruleId":"373","severity":1,"message":"463","line":90,"column":11,"nodeType":"375","messageId":"376","endLine":90,"endColumn":31},{"ruleId":"373","severity":1,"message":"464","line":10,"column":20,"nodeType":"375","messageId":"376","endLine":10,"endColumn":35},{"ruleId":"373","severity":1,"message":"390","line":14,"column":18,"nodeType":"375","messageId":"376","endLine":14,"endColumn":25},{"ruleId":"373","severity":1,"message":"455","line":17,"column":22,"nodeType":"375","messageId":"376","endLine":17,"endColumn":33},{"ruleId":"373","severity":1,"message":"456","line":30,"column":13,"nodeType":"375","messageId":"376","endLine":30,"endColumn":19},{"ruleId":"380","severity":1,"message":"465","line":48,"column":8,"nodeType":"382","endLine":48,"endColumn":20,"suggestions":"466"},{"ruleId":"380","severity":1,"message":"459","line":60,"column":8,"nodeType":"382","endLine":60,"endColumn":21,"suggestions":"467"},{"ruleId":"380","severity":1,"message":"461","line":69,"column":8,"nodeType":"382","endLine":69,"endColumn":18,"suggestions":"468"},{"ruleId":"373","severity":1,"message":"463","line":92,"column":11,"nodeType":"375","messageId":"376","endLine":92,"endColumn":31},{"ruleId":"373","severity":1,"message":"401","line":3,"column":22,"nodeType":"375","messageId":"376","endLine":3,"endColumn":31},{"ruleId":"373","severity":1,"message":"427","line":4,"column":8,"nodeType":"375","messageId":"376","endLine":4,"endColumn":18},{"ruleId":"373","severity":1,"message":"428","line":5,"column":9,"nodeType":"375","messageId":"376","endLine":5,"endColumn":13},{"ruleId":"373","severity":1,"message":"469","line":10,"column":9,"nodeType":"375","messageId":"376","endLine":10,"endColumn":18},{"ruleId":"373","severity":1,"message":"390","line":15,"column":18,"nodeType":"375","messageId":"376","endLine":15,"endColumn":25},{"ruleId":"373","severity":1,"message":"456","line":29,"column":13,"nodeType":"375","messageId":"376","endLine":29,"endColumn":19},{"ruleId":"380","severity":1,"message":"392","line":46,"column":8,"nodeType":"382","endLine":46,"endColumn":19,"suggestions":"470"},{"ruleId":"373","severity":1,"message":"427","line":4,"column":8,"nodeType":"375","messageId":"376","endLine":4,"endColumn":18},{"ruleId":"373","severity":1,"message":"428","line":5,"column":9,"nodeType":"375","messageId":"376","endLine":5,"endColumn":13},{"ruleId":"373","severity":1,"message":"471","line":12,"column":9,"nodeType":"375","messageId":"376","endLine":12,"endColumn":23},{"ruleId":"373","severity":1,"message":"390","line":20,"column":18,"nodeType":"375","messageId":"376","endLine":20,"endColumn":25},{"ruleId":"373","severity":1,"message":"472","line":22,"column":12,"nodeType":"375","messageId":"376","endLine":22,"endColumn":20},{"ruleId":"373","severity":1,"message":"455","line":22,"column":22,"nodeType":"375","messageId":"376","endLine":22,"endColumn":33},{"ruleId":"373","severity":1,"message":"473","line":28,"column":21,"nodeType":"375","messageId":"376","endLine":28,"endColumn":31},{"ruleId":"373","severity":1,"message":"456","line":47,"column":13,"nodeType":"375","messageId":"376","endLine":47,"endColumn":19},{"ruleId":"380","severity":1,"message":"474","line":67,"column":8,"nodeType":"382","endLine":67,"endColumn":21,"suggestions":"475"},{"ruleId":"380","severity":1,"message":"457","line":79,"column":8,"nodeType":"382","endLine":79,"endColumn":23,"suggestions":"476"},{"ruleId":"386","severity":1,"message":"387","line":152,"column":78,"nodeType":"388","messageId":"389","endLine":152,"endColumn":80},{"ruleId":"386","severity":1,"message":"387","line":87,"column":18,"nodeType":"388","messageId":"389","endLine":87,"endColumn":20},{"ruleId":"373","severity":1,"message":"390","line":16,"column":18,"nodeType":"375","messageId":"376","endLine":16,"endColumn":25},{"ruleId":"373","severity":1,"message":"472","line":18,"column":12,"nodeType":"375","messageId":"376","endLine":18,"endColumn":20},{"ruleId":"373","severity":1,"message":"455","line":18,"column":22,"nodeType":"375","messageId":"376","endLine":18,"endColumn":33},{"ruleId":"373","severity":1,"message":"473","line":24,"column":21,"nodeType":"375","messageId":"376","endLine":24,"endColumn":31},{"ruleId":"373","severity":1,"message":"456","line":43,"column":13,"nodeType":"375","messageId":"376","endLine":43,"endColumn":19},{"ruleId":"380","severity":1,"message":"474","line":61,"column":8,"nodeType":"382","endLine":61,"endColumn":20,"suggestions":"477"},{"ruleId":"380","severity":1,"message":"459","line":71,"column":8,"nodeType":"382","endLine":71,"endColumn":23,"suggestions":"478"},{"ruleId":"386","severity":1,"message":"387","line":151,"column":78,"nodeType":"388","messageId":"389","endLine":151,"endColumn":80},{"ruleId":"373","severity":1,"message":"416","line":3,"column":8,"nodeType":"375","messageId":"376","endLine":3,"endColumn":13},{"ruleId":"373","severity":1,"message":"424","line":4,"column":9,"nodeType":"375","messageId":"376","endLine":4,"endColumn":13},{"ruleId":"373","severity":1,"message":"403","line":4,"column":15,"nodeType":"375","messageId":"376","endLine":4,"endColumn":18},{"ruleId":"373","severity":1,"message":"402","line":4,"column":20,"nodeType":"375","messageId":"376","endLine":4,"endColumn":23},{"ruleId":"373","severity":1,"message":"451","line":5,"column":8,"nodeType":"375","messageId":"376","endLine":5,"endColumn":21},{"ruleId":"373","severity":1,"message":"479","line":6,"column":8,"nodeType":"375","messageId":"376","endLine":6,"endColumn":24},{"ruleId":"373","severity":1,"message":"423","line":3,"column":25,"nodeType":"375","messageId":"376","endLine":3,"endColumn":31},{"ruleId":"373","severity":1,"message":"416","line":4,"column":8,"nodeType":"375","messageId":"376","endLine":4,"endColumn":13},{"ruleId":"373","severity":1,"message":"480","line":5,"column":8,"nodeType":"375","messageId":"376","endLine":5,"endColumn":19},"no-native-reassign",["481"],"no-negated-in-lhs",["482"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'OverlayTrigger' is defined but never used.","'Tooltip' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'childErr'. Either include it or remove the dependency array.","ArrayExpression",["483"],"'faShieldVirus' is defined but never used.","'params' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setOpen' is assigned a value but never used.","'options' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'getSelectedLength'. Either include it or remove the dependency array.",["484"],"'DefVSDef' is defined but never used.","'DefVSIsoType' is defined but never used.","'useEffect' is defined but never used.","'systems' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Card' is defined but never used.","'Fade' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Bell' is defined but never used.","'Book' is defined but never used.","'styles' is defined but never used.","'slide1' is defined but never used.","'slide2' is defined but never used.","'slide3' is defined but never used.","'faDna' is defined but never used.","'faAtom' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'AwesomeSlider' is defined but never used.","'CoreStyles' is defined but never used.","'AnimationStyles' is defined but never used.","'axios' is defined but never used.","'AwesomeSliderStyles' is defined but never used.","'GenesByClusterC' is defined but never used.","'DropdownCheckbox' is defined but never used.","'CorrelationGraph' is defined but never used.","'CorrelationResultsPage' is defined but never used.","'FadeIn' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'Nav' is defined but never used.","'Tab' is defined but never used.","'searchlogo' is defined but never used.","'Link' is defined but never used.","'StrainForm' is defined but never used.","'MiniDrawer' is defined but never used.",["481"],["482"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'faQuestion' is defined but never used.","'InboxIcon' is defined but never used.","'MailIcon' is defined but never used.","'Modal' is defined but never used.","'TextField' is defined but never used.","'Autocomplete' is defined but never used.","'serialize' is defined but never used.","'StrainCircosResultsPage' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook React.useEffect has a missing dependency: 'updateTextbox'. Either include it or remove the dependency array. If 'updateTextbox' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["485"],"'Component' is defined but never used.","'setOptions' is assigned a value but never used.","'loading' is assigned a value but never used.","'AutocompleteC' is defined but never used.","'sleep' is defined but never used.","React Hook React.useEffect has missing dependencies: 'apiUrl' and 'childErr'. Either include them or remove the dependency array.",["486"],"'setSelected' is assigned a value but never used.","'active' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'selectedIso'. Either include it or remove the dependency array.",["487"],"React Hook React.useEffect has a missing dependency: 'selectedDF'. Either include it or remove the dependency array.",["488"],"React Hook React.useEffect has a missing dependency: 'getSelected'. Either include it or remove the dependency array.",["489"],"'getSelectedLengthIso' is assigned a value but never used.","'SiMicrogenetics' is defined but never used.","React Hook React.useEffect has a missing dependency: 'selectedCls'. Either include it or remove the dependency array.",["490"],["491"],["492"],"'SiHubspot' is defined but never used.",["493"],"'BsShieldShaded' is defined but never used.","'selected' is assigned a value but never used.","'setStrains' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'selected_gene'. Either include it or remove the dependency array.",["494"],["495"],["496"],["497"],"'TextOrFileUpload' is defined but never used.","'ErrorModalC' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"506","fix":"508"},{"desc":"509","fix":"510"},{"desc":"511","fix":"512"},{"desc":"511","fix":"513"},{"desc":"509","fix":"514"},{"desc":"500","fix":"515"},{"desc":"516","fix":"517"},{"desc":"516","fix":"518"},{"desc":"519","fix":"520"},{"desc":"519","fix":"521"},"Update the dependencies array to be: [childErr, loading]",{"range":"522","text":"523"},"Update the dependencies array to be: [getSelectedLength, selectedA]",{"range":"524","text":"525"},"Update the dependencies array to be: [textbox, updateTextbox]",{"range":"526","text":"527"},"Update the dependencies array to be: [apiUrl, childErr, loading]",{"range":"528","text":"529"},"Update the dependencies array to be: [selectedDF, selectedIso]",{"range":"530","text":"531"},{"range":"532","text":"531"},"Update the dependencies array to be: [getSelected, selected]",{"range":"533","text":"534"},"Update the dependencies array to be: [selectedCls, selectedDF]",{"range":"535","text":"536"},{"range":"537","text":"536"},{"range":"538","text":"534"},{"range":"539","text":"525"},"Update the dependencies array to be: [selectedIso, selected_gene]",{"range":"540","text":"541"},{"range":"542","text":"541"},"Update the dependencies array to be: [selectedDF, selected_gene]",{"range":"543","text":"544"},{"range":"545","text":"544"},[1755,1764],"[childErr, loading]",[956,967],"[getSelectedLength, selectedA]",[2613,2622],"[textbox, updateTextbox]",[2580,2589],"[apiUrl, childErr, loading]",[1601,1613],"[selectedDF, selectedIso]",[1867,1880],[2054,2064],"[getSelected, selected]",[1609,1621],"[selectedCls, selectedDF]",[1958,1971],[2145,2155],[1444,1455],[2350,2363],"[selectedIso, selected_gene]",[2705,2720],[2055,2067],"[selectedDF, selected_gene]",[2325,2340]]