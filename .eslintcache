[{"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\index.js":"1","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\reportWebVitals.js":"2","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\App.js":"3","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\NavBarC.jsx":"4","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\MainPage.jsx":"5","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\ResultsPage.jsx":"6","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\SearchPage.jsx":"7","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\BrowsePage.jsx":"8","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\DownloadPage.jsx":"9","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\StrainForm.jsx":"10","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\AutocompleteC.jsx":"11","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\StrainCircosResultsPage.jsx":"12","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\StrainCircosPage.jsx":"13","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CircosStrain.jsx":"14","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\GenesByDefenseForm.jsx":"15","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\utilities\\colors.js":"16","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\DefenseSystemStrain.jsx":"17","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\Drawer.jsx":"18","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\Cluster.jsx":"19","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\CorrelationResultsPage.jsx":"20","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\CorrelationSearchPage.jsx":"21","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\IsolationType.jsx":"22","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\ErrorModalC.jsx":"23","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\GenesByClusterC.jsx":"24","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\TextOrFileUpload.jsx":"25","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationGraph.jsx":"26","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSIsoType.jsx":"27","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSDef.jsx":"28","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\ClusterVSIsoType.jsx":"29","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSCat.jsx":"30","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSCluster.jsx":"31","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DrawerCorrelation.jsx":"32","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationBoxPlot.jsx":"33","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CSVorFastaC.jsx":"34","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\WarningModalC.jsx":"35"},{"size":731,"mtime":1620905138430,"results":"36","hashOfConfig":"37"},{"size":362,"mtime":499162500000,"results":"38","hashOfConfig":"37"},{"size":649,"mtime":1620905138429,"results":"39","hashOfConfig":"37"},{"size":3745,"mtime":1622038564526,"results":"40","hashOfConfig":"37"},{"size":3607,"mtime":1621973330468,"results":"41","hashOfConfig":"37"},{"size":6887,"mtime":1621970711889,"results":"42","hashOfConfig":"37"},{"size":3829,"mtime":1621970711890,"results":"43","hashOfConfig":"37"},{"size":18983,"mtime":1622903930171,"results":"44","hashOfConfig":"37"},{"size":1693,"mtime":1621970755358,"results":"45","hashOfConfig":"37"},{"size":12616,"mtime":1621970711910,"results":"46","hashOfConfig":"37"},{"size":10163,"mtime":1622491010104,"results":"47","hashOfConfig":"37"},{"size":636,"mtime":1621944203290,"results":"48","hashOfConfig":"37"},{"size":5495,"mtime":1621970711890,"results":"49","hashOfConfig":"37"},{"size":489,"mtime":1621944203269,"results":"50","hashOfConfig":"37"},{"size":11432,"mtime":1621970791253,"results":"51","hashOfConfig":"37"},{"size":3280,"mtime":1621622700123,"results":"52","hashOfConfig":"53"},{"size":4578,"mtime":1621970711881,"results":"54","hashOfConfig":"37"},{"size":6286,"mtime":1622726157196,"results":"55","hashOfConfig":"37"},{"size":10936,"mtime":1622473808224,"results":"56","hashOfConfig":"37"},{"size":763,"mtime":1621970711887,"results":"57","hashOfConfig":"37"},{"size":3540,"mtime":1621970711888,"results":"58","hashOfConfig":"37"},{"size":863,"mtime":1622730705680,"results":"59","hashOfConfig":"37"},{"size":1125,"mtime":1621970711883,"results":"60","hashOfConfig":"37"},{"size":1656,"mtime":1621970711884,"results":"61","hashOfConfig":"37"},{"size":6356,"mtime":1622474263947,"results":"62","hashOfConfig":"37"},{"size":21712,"mtime":1621970711880,"results":"63","hashOfConfig":"37"},{"size":4453,"mtime":1621970711879,"results":"64","hashOfConfig":"37"},{"size":2649,"mtime":1622473910393,"results":"65","hashOfConfig":"37"},{"size":6252,"mtime":1621970711877,"results":"66","hashOfConfig":"37"},{"size":4352,"mtime":1621970711877,"results":"67","hashOfConfig":"37"},{"size":6231,"mtime":1621970711878,"results":"68","hashOfConfig":"37"},{"size":5947,"mtime":1621970711880,"results":"69","hashOfConfig":"37"},{"size":891,"mtime":1621970711876,"results":"70","hashOfConfig":"37"},{"size":3251,"mtime":1621970711874,"results":"71","hashOfConfig":"37"},{"size":1953,"mtime":1621970711886,"results":"72","hashOfConfig":"37"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"ph0ruk",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"75"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"75"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"75"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"75"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"75"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"75"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"75"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"75"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"75"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"75"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"75"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qrmka8",{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"75"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"75"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"75"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"75"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"75"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"75"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"75"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"75"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"75"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"75"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"75"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"75"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\index.js",[],["168","169"],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\App.js",["170"],"import NavBarC from \"./components/NavBarC\";\r\nimport './App.css';\r\nimport title from './assets/images/title.png';\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport 'react-minimal-side-navigation/lib/ReactMinimalSideNavigation.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <img className=\"title\" src={title}/>\r\n                <div className=\"mainDiv\">\r\n                    <Router>\r\n                        <NavBarC />\r\n                    </Router>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\nexport default App;\r\n","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\NavBarC.jsx",["171"],"import React, { Component } from \"react\";\r\nimport {Card, Carousel} from \"react-bootstrap\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport '../styles/NavBarC.css';\r\nimport SearchPage from \"../pages/SearchPage\";\r\nimport ResultsPage from \"../pages/ResultsPage\";\r\nimport BrowsePage from \"../pages/BrowsePage\";\r\nimport DownloadPage from \"../pages/DownloadPage\";\r\nimport CorrelationResultsPage from \"../pages/CorrelationResultsPage\";\r\nimport CorrelationSearchPage from \"../pages/CorrelationSearchPage\"\r\nimport MainPage from \"../pages/MainPage\";\r\nimport StrainCircosResultsPage from \"../pages/StrainCircosResultsPage\"\r\nimport StrainCircosPage from \"../pages/StrainCircosPage\";\r\nimport { BrowserRouter as Switch } from \"react-router-dom\";\r\nimport { Route } from \"react-router\";\r\n\r\n/**\r\n * the navigation bar component\r\n */\r\nclass NavBarC extends Component{\r\n    state = {\r\n        currPath: \"/\"\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let url = window.location.href.split(\"/\")\r\n        this.state = {\r\n            allProjects: url[url.length-1]\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n            <Card className=\"card_m\"  >\r\n                <Card.Header style={{marginBottom: \"2%\"}}>\r\n                    <Nav variant={\"tabs\"} fill activeKey={this.state.allProjects}>\r\n                        <Nav.Item>\r\n                            <Nav.Link eventKey = \"\" href=\"/\">Home</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item >\r\n                            <Nav.Link eventKey=\"search\" href=\"/search\">Search</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link eventKey=\"CircosStrain\" href=\"/CircosStrain\">Circos Strain View</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link eventKey=\"browse\" href=\"/browse\">Browse</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link eventKey=\"download\" href=\"/download\">Download</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item >\r\n                            <Nav.Link eventKey=\"CorrelationSearchPage\" href=\"/CorrelationSearchPage\">Correlation</Nav.Link>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                </Card.Header>\r\n                <Card.Body className=\"body_c\" style={{ minHeight:'600px', padding: '0px', marginBottom: \"2%\"}} >\r\n                    <span className=\"cb\">\r\n                    <Card.Text>\r\n                        <Switch>\r\n                            <Route path=\"/search\" component={SearchPage}/>\r\n\r\n                            <Route path=\"/results\" component={ResultsPage}/>\r\n\r\n                            <Route path=\"/browse\" component={BrowsePage}/>\r\n\r\n                            <Route path=\"/download\" component={DownloadPage}/>\r\n\r\n                            <Route path=\"/CircosStrain\" component={StrainCircosPage}/>\r\n\r\n                            <Route path=\"/resultsCircosStrain\" component={StrainCircosResultsPage}/>\r\n\r\n                            <Route path=\"/CorrelationSearchPage\" component={CorrelationSearchPage}/>\r\n\r\n                            <Route path=\"/resultsCorrelationPage\" component={CorrelationResultsPage}/>\r\n\r\n                            <Route exact path=\"/\">\r\n                                <MainPage component={MainPage} />\r\n                            </Route>\r\n                        </Switch>\r\n                    </Card.Text>\r\n                        </span>\r\n                </Card.Body>\r\n            </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBarC;","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\MainPage.jsx",[],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\ResultsPage.jsx",["172","173","174","175","176"],"import React, {Component} from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport axios from \"axios\";\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport '../styles/ResultsPage.css';\r\nimport {Button, Accordion, Card} from \"react-bootstrap\";\r\nimport {faDna, faDisease, faShieldVirus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport ErrorModalC from \"../components/ErrorModalC\";\r\n\r\n/**\r\n * Results Page after a search\r\n */\r\nclass ResultsPage extends Component {\r\n    state = {\r\n        result_table: []\r\n    };\r\n    constructor() {\r\n        super();\r\n        this.childErr = React.createRef();\r\n    }\r\n    componentDidMount() {\r\n        axios\r\n            .get(\"http://127.0.0.1:8800/api/v1/genes\")\r\n            .then((res) => {\r\n                this.setState({result_table: res.data});\r\n                console.log(this.state.result_table)\r\n            }).catch((err) => {\r\n            this.setState({loaded: true})\r\n            console.log(err);\r\n            if (this.childErr.current) {\r\n                this.childErr.current.handleOpen();\r\n            }});\r\n    }\r\n\r\n    render() {\r\n        const params = this.props.history.location.state.myArrayVariableName; // get the selected items from the search page (sent from the SearchPage component)\r\n        const rowsPerPages = this.props.history.location.state.rpp; // get the selected number of results each page from previous component\r\n\r\n        const columns = [\r\n            {dataField: \"locus_tag\", text: \"locus_tag\", sort: true},\r\n            {dataField: \"genomic_accession\", text: \"genomic accession\", sort: true},\r\n            {dataField: \"start\", text: \"start\", sort: true},\r\n            {dataField: \"end\", text: \"end\", sort: true},\r\n            {dataField: \"strand\", text: \"strand\", sort: true},\r\n            {dataField: \"name\", text: \"name\", sort: true},\r\n            {dataField: \"symbol\", text: \"symbol\", sort: true},\r\n        ]\r\n\r\n        const dna_char_to_color = {\r\n            'A': '#DC185D',\r\n            'E': '#B8144E',\r\n            'G': '#93103E',\r\n            'T': '#bc6383',\r\n            'F': '#DC185D',\r\n            'W': '#d01a5a',\r\n            'S': '#8A0512',\r\n            'M': '#9D0615',\r\n            'K': '#B10618',\r\n            'R': '#C5071A',\r\n            'Y': '#D9081D',\r\n            'B': '#EC091F',\r\n            'D': '#F6132A',\r\n            'I': '#F6132A',\r\n            'C': '#bc6383',\r\n            'H': '#F7263B',\r\n            'V': '#F83A4D',\r\n            'N': '#F83A4D',\r\n            'L': '#F94E5F',\r\n            'Q': '#FA7582',\r\n            'P': '#d01a5a',\r\n            'Z': '#370617'\r\n\r\n        }\r\n\r\n        const options = {\r\n            pageStartIndex: 1, // first page will be 0, default is 1\r\n            paginationSize: 10,  // the pagination bar size, default is 5\r\n            sizePerPage: rowsPerPages,\r\n            showTotal: true, // display pagination information\r\n            firstPageText: '<<', // the text of first page button\r\n            prePageText: 'Prev', // the text of previous page button\r\n            nextPageText: 'Next', // the text of next page button\r\n            lastPageText: '>>', // the text of last page button\r\n            nextPageTitle: 'Go to next', // the title of next page button\r\n            prePageTitle: 'Go to previous', // the title of previous page button\r\n            firstPageTitle: 'Go to first', // the title of first page button\r\n            lastPageTitle: 'Go to last', // the title of last page button\r\n            hideSizePerPage: false, // hide the size per page dropdown\r\n            hidePageListOnlyOnePage: true, // hide pagination bar when only one page, default is false\r\n\r\n        }\r\n\r\n        const expandRow = {\r\n            renderer: (row, rowIndex) => {return (\r\n                <div>\r\n\r\n                    <Accordion defaultActiveKey={\"0\"}>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Accordion.Toggle className=\"acrd\" as={Button} variant=\"link\" eventKey=\"0\">\r\n                                    <FontAwesomeIcon icon={faDna}/> DNA Sequence\r\n                                </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey=\"0\">\r\n                                <Card.Body id=\"d-seq\">\r\n                                    {row['dna_sequence'].split(\"\").map(char => {\r\n                                        return <span className={\"seq_c\"}\r\n                                                     style={{color: this.colorCharProtein(char)}}>{`${char}`}</span>;\r\n                                    })}\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                    <FontAwesomeIcon icon={faDisease}/> Protein Sequence\r\n                                </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey=\"1\">\r\n                                <Card.Body id=\"p-seq\">\r\n                                    {row['protein_sequence'].split(\"\").map(char => {\r\n                                        return <span className={\"seq_c\"}\r\n                                                     style={{color: dna_char_to_color[char]}}>{`${char}`}</span>;\r\n                                    })}\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n\r\n                </div>\r\n            )}, onlyOneExpanding: true\r\n        };\r\n\r\n\r\n        return (\r\n            <div>\r\n                <FadeIn>\r\n                    <div style={{height: \"100%\", width: \"90%\",marginLeft:\"5%\"}}>\r\n                        <BootstrapTable\r\n                            keyField=\"locus_tag\"\r\n                            data={this.state.result_table}\r\n                            columns={columns} //which columns from the data to show as columns\r\n                            pagination={ paginationFactory(options) }\r\n                            expandRow={expandRow}\r\n                        />\r\n                    </div>\r\n                </FadeIn>\r\n                <ErrorModalC open={false} ref={this.childErr}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    colorCharProtein(char) {\r\n        if (char == 'A')\r\n            return 'red'\r\n        else if (char == 'T') {\r\n            return 'green'\r\n        } else if (char == 'G') {\r\n            return 'brown'\r\n        }\r\n        return 'blue'\r\n    }\r\n}\r\n\r\nexport default ResultsPage;","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\SearchPage.jsx",["177","178","179","180","181","182","183"],"import React, {useState} from \"react\";\r\nimport '../styles/SearchPage.css';\r\nimport {Form, Col, Row, Button, OverlayTrigger, Tooltip} from \"react-bootstrap\";\r\nimport searchlogo from '../assets/images/research.png'\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Link} from 'react-router-dom';\r\nimport AutocompleteC from \"../components/AutocompleteC\";\r\n\r\n/**\r\n * The search Page\r\n */\r\nexport default function SearchPage() {\r\n    const [rpp, setRpp] = React.useState(10);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const [selectedA, setSelectedA] = React.useState(false);\r\n    const [buttonOff, setButtonOff] = React.useState(true)\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        if (getSelectedLength() > 0){\r\n            setButtonOff(false)\r\n        }\r\n        else{\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedA]);\r\n\r\n    const getSelectedLength = () => {\r\n        return selectedA.length;\r\n    }\r\n\r\n    const getSelected = (selected) => {\r\n        setSelectedA(selected)\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n            <FadeIn>\r\n                <Form>\r\n                    <Form.Group as={Row}>\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}></p>\r\n                        </Form.Label>\r\n                        <Col sm=\"4\">\r\n                            <div className=\"imgr_wr\">\r\n                                <img style={{display: \"inline-block\"}} className=\"imgr\" src={searchlogo}/>\r\n                            </div>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"selectStrain\">\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}>{\"Select single/multiple strain/s:\"}</p>\r\n                        </Form.Label>\r\n\r\n                        <Col sm=\"4\">\r\n                            <AutocompleteC multipleChoice={true} true parentCallback={getSelected} apiUrl=\"http://127.0.0.1:8800/api/v1/strains\"/>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"numResults\">\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}>Number of results in page:</p>\r\n                        </Form.Label>\r\n                        <Col xs=\"auto\">\r\n                            <Form.Control className=\"mb-1\" as=\"select\" value={rpp}\r\n                                          onChange={e => setRpp(e.target.value)}>\r\n                                <option>10</option>\r\n                                <option>25</option>\r\n                                <option>30</option>\r\n                                <option>50</option>\r\n                                <option>1000</option>\r\n                            </Form.Control>\r\n                        </Col>\r\n\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Link to={{\r\n                            pathname: '/results',\r\n                            state: {\r\n                                myArrayVariableName: selectedA, // send the selected items as a parameter to the result page\r\n                                rpp: rpp //send the number of results per page as a parameter to the result page\r\n                            }\r\n                        }}><Button disabled={buttonOff}>Search</Button></Link>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\BrowsePage.jsx",["184","185","186","187","188","189","190"],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\DownloadPage.jsx",["191"],"import React, {useState} from \"react\";\r\nimport '../styles/DownloadPage.css';\r\nimport {Tab, Nav, Card} from \"react-bootstrap\";\r\nimport StrainForm from \"../components/StrainForm\"\r\nimport GenesByDefenseForm from \"../components/GenesByDefenseForm\";\r\n\r\n\r\n/**\r\n * The Download Page\r\n */\r\nexport default function DownloadPage() {\r\n\r\n    return (\r\n        <div style={{textAlign: \"center\"}}>\r\n            <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n                <Card className=\"card_m_2\">\r\n                    <Card.Header style={{marginBottom: \"2%\", backgroundColor: \"white\", padding: \"0px\"}}>\r\n                        {/*<Nav variant=\"pills\" className=\"flex-column\">*/}\r\n                        <Nav justify variant=\"pills\">\r\n                            <Nav.Item>\r\n                                <Nav.Link eventKey=\"first\">Genes by Strain/s</Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link eventKey=\"second\">Genes by Defense System/s</Nav.Link>\r\n                            </Nav.Item>\r\n                        </Nav>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Tab.Content>\r\n                            <Tab.Pane eventKey=\"first\">\r\n                                <StrainForm/>\r\n                            </Tab.Pane>\r\n                            <Tab.Pane eventKey=\"second\">\r\n                                <GenesByDefenseForm/>\r\n                            </Tab.Pane>\r\n                        </Tab.Content>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Tab.Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\StrainForm.jsx",["192","193","194","195","196","197","198"],"import React, { Component } from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport '../styles/StrainForm.css';\r\nimport axios from \"axios\";\r\nimport {Form, Col, Row, Button, Modal, Container} from \"react-bootstrap\";\r\nimport TextOrFileUpload from \"./TextOrFileUpload\";\r\nimport ErrorModalC from \"./ErrorModalC\";\r\n\r\n\r\n/**\r\n * the component of choosing strains\r\n */\r\nexport default function StrainForm() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n    const [checkedAll, setCheckedAll] = React.useState(false);\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    const [selectedA, setSelectedA] = React.useState(false);\r\n    const [checked, setChecked] = React.useState({\r\n        genomic_accession: true,\r\n        start: true,\r\n        end: true,\r\n        strand: true,\r\n        attributes_x: true,\r\n        product_accession: true,\r\n        nonredundant_refseq: true,\r\n        name: true\r\n    });\r\n    const childErr = React.createRef();\r\n\r\n    /* ################################################ */\r\n    /* #### TOGGLES checK STATE BASED ON inputName #### */\r\n    /* ################################################ */\r\n\r\n    const toggleCheck = (inputName) => {\r\n        setChecked((prevState) => {\r\n            const newState = { ...prevState };\r\n            newState[inputName] = !prevState[inputName];\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    /* ###################################################### */\r\n    /* #### CHECKS OR UNCHECKS ALL FROM SELECT ALL CLICK #### */\r\n    /* ###################################################### */\r\n\r\n    const selectAll = (value) => {\r\n        setCheckedAll(value);\r\n        setChecked((prevState) => {\r\n            const newState = { ...prevState };\r\n            for (const inputName in newState) {\r\n                newState[inputName] = value;\r\n            }\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    /* ############################################# */\r\n    /* #### EFFECT TO CONTROL CHECKED_ALL STATE #### */\r\n    /* ############################################# */\r\n\r\n    // IF YOU CHECK BOTH INDIVIDUALLY. IT WILL ACTIVATE THE checkedAll STATE\r\n    // IF YOU UNCHECK ANY INDIVIDUALLY. IT WILL DE-ACTIVATE THE checkAll STATE\r\n\r\n    React.useEffect(() => {\r\n        let allChecked = true;\r\n        for (const inputName in checked) {\r\n            if (checked[inputName] === false) {\r\n                allChecked = false;\r\n            }\r\n        }\r\n        if (allChecked) {\r\n            setCheckedAll(true);\r\n        } else {\r\n            setCheckedAll(false);\r\n        }\r\n    }, [checked]);\r\n\r\n    /* ########################## */\r\n    /* #### RETURN STATEMENT #### */\r\n    /* ########################## */\r\n\r\n\r\n\r\n\r\n    function getData() {\r\n\r\n        let selectedC = [];\r\n\r\n        for (let key in checked) {\r\n            // check if the property/key is defined in the object itself, not in parent\r\n            if(checked[key] == true)\r\n                selectedC.push(key)\r\n        }\r\n\r\n        let selectedAS=[];\r\n        if(Array.isArray(selectedA) && selectedA.length > 0) {\r\n            for (let key in selectedA) {\r\n                selectedAS.push(selectedA[key]['key'])\r\n            }\r\n        }else{\r\n            selectedAS.push(selectedA['key']);\r\n        }\r\n\r\n        if(selectedC.length == 0){\r\n            setModalShow(true)\r\n            return;\r\n        }\r\n\r\n\r\n        console.log(selectedAS)\r\n        // console.log(selectedC)\r\n\r\n\r\n        const FileDownload = require('js-file-download');\r\n\r\n        const Qs = require('qs')\r\n\r\n        let params = { selectedC: selectedC, selectedAS: selectedAS }\r\n\r\n        let myAxios = axios.create({\r\n            paramsSerializer: params => Qs.stringify(params, {arrayFormat: 'repeat'})\r\n        })\r\n            myAxios.get('http://127.0.0.1:8800/api/v1/genes/download_genes', {params})\r\n                .then((res) => {\r\n                    FileDownload(res.data, 'report.csv');\r\n                }).catch(function (error) {\r\n                    if (error['response']) {\r\n                        if (error['response']['status'] == 400) {\r\n                            childErr.current.handleOpen(\"One or more of the parameters is invalid.\")\r\n                            return\r\n                        }\r\n                    }\r\n                        childErr.current.handleOpen(\"There is a problem with the server request. We apologize for the inconvenience.\")\r\n                });\r\n    }\r\n\r\n\r\n    function MyVerticallyCenteredModal(props) {\r\n        return (\r\n            <Modal\r\n                {...props}\r\n                size=\"sm\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Missing Information\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Select a field</h4>\r\n                    <p>\r\n                        Please select at least one of the fields from the list.\r\n                    </p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide}>Ok</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    const getSelected = (selected) => {\r\n        setSelectedA(selected)\r\n    }\r\n\r\n    /*\r\nhandle file upload and load each line to array of\r\nintegers (aka strain indexes for subtree) for subtree generating\r\nusing selectedFile state.\r\n*/\r\n    const onFileChange = (e) => {\r\n\r\n        // Update the state\r\n        if (e.target.files.length > 0) {\r\n            e.preventDefault()\r\n            const reader = new FileReader()\r\n            console.log(e)\r\n            reader.onload = async (e) => {\r\n                const text = (e.target.result);\r\n                let ts = text.split(/\\r?\\n/);\r\n                let selectedAS=[];\r\n                let id = 0;\r\n                for (let key in ts) {\r\n                    selectedAS.push({'key':ts[key], 'id': id});\r\n                    id++;\r\n                }\r\n\r\n\r\n                setSelectedA(selectedAS)\r\n                e.target.value = null;\r\n            };\r\n            reader.readAsText(e.target.files[0])\r\n        }\r\n    };\r\n\r\n    return (\r\n            <div >\r\n                <FadeIn>\r\n                        <MyVerticallyCenteredModal\r\n                            show={modalShow}\r\n                            onHide={() => setModalShow(false)}\r\n                        />\r\n                    <Form>\r\n                        <br/>\r\n                        <Form.Group as={Row}>\r\n                            <Form.Label  className=\"wrapper\" column sm=\"4\">\r\n                                <p style={{textAlign: \"right\"}}></p>\r\n                            </Form.Label>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Row} controlId=\"selectStrain\">\r\n                            <Form.Label style={{display: \"flex\", alignItems:\"center\", justifyContent:\"flex\"}} className=\"wrapper\" column sm=\"4\">\r\n                                <p style={{textAlign: \"right\"}}>{\"Select single/multiple strain/s:\"}</p>\r\n                            </Form.Label>\r\n\r\n                            <Col style={{textAlign:\"center\"}} sm=\"4\">\r\n                                {/*<AutocompleteC multipleChoice={true} true parentCallback={getSelected} apiUrl=\"http://127.0.0.1:8800/api/v1/strains\"/>*/}\r\n                                <TextOrFileUpload className=\"txtbox\" apiUrl=\"http://127.0.0.1:8800/api/v1/strains\" multipleChoice={true} parentFileChangeCallback={onFileChange} parentHandleTextBox={getSelected} label=\"Please upload a file that contains a list of strain's assembly code\r\n                            separated by new lines (/n)\" />\r\n                                <h6 className=\"note\"><i>Note: Not selecting a strain will return <b>all the genes in the database.</b></i></h6>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <div className=\"chkbxs\">\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                        <div>\r\n                            <br/>\r\n                            <input\r\n                                id=\"all\"\r\n                                type=\"checkbox\"\r\n                                onChange={(event) => selectAll(event.target.checked)}\r\n                                checked={checkedAll}\r\n                            />\r\n                            <label for=\"all\" className=\"lbl\">All</label>\r\n                        </div>\r\n                            </Col>\r\n                            </Row>\r\n                                <Row>\r\n                                <Col sm>\r\n                            <input id='2' type=\"checkbox\" name=\"genomic_accession\"\r\n                                   onChange={() => toggleCheck(\"genomic_accession\")}\r\n                                   checked={checked[\"genomic_accession\"]}/>\r\n                            <label htmlFor='2' className=\"lbl\">genomic_accession</label>\r\n                                </Col>\r\n                                    <Col sm>\r\n                            <input id='3' type=\"checkbox\" name=\"start\" onChange={() => toggleCheck(\"start\")}\r\n                                   checked={checked[\"start\"]}/>\r\n                            <label htmlFor='3' className=\"lbl\">start</label>\r\n                                    </Col>\r\n                                    <Col sm>\r\n                            <input id='4' type=\"checkbox\" name=\"end\" onChange={() => toggleCheck(\"end\")}\r\n                                   checked={checked[\"end\"]}/>\r\n                            <label htmlFor='4' className=\"lbl\">end</label>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col sm>\r\n                            <input id='5' type=\"checkbox\" name=\"strand\" onChange={() => toggleCheck(\"strand\")}\r\n                                   checked={checked[\"strand\"]}/>\r\n                            <label htmlFor='5' className=\"lbl\">strand</label>\r\n                                    </Col>\r\n                                    <Col sm>\r\n                            <input id='6' type=\"checkbox\" name=\"attributes_x\"\r\n                                   onChange={() => toggleCheck(\"attributes_x\")} checked={checked[\"attributes_x\"]}/>\r\n                            <label htmlFor='6' className=\"lbl\">attributes_x</label>\r\n                                    </Col>\r\n                                    <Col>\r\n                            <input id='7' type=\"checkbox\" name=\"product_accession\"\r\n                                   onChange={() => toggleCheck(\"product_accession\")}\r\n                                   checked={checked[\"product_accession\"]}/>\r\n                            <label htmlFor='7' className=\"lbl\">product_accession</label>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col sm>\r\n                            <input id='8' type=\"checkbox\" name=\"nonredundant_refseq\"\r\n                                   onChange={() => toggleCheck(\"nonredundant_refseq\")}\r\n                                   checked={checked[\"nonredundant_refseq\"]}/>\r\n                            <label htmlFor='8' className=\"lbl\">nonredundant_refseq</label>\r\n                                    </Col>\r\n                                    <Col sm>\r\n                            <input id='9' type=\"checkbox\" name=\"name\" onChange={() => toggleCheck(\"name\")}\r\n                                   checked={checked[\"name\"]}/>\r\n                            <label htmlFor='9' className=\"lbl\">name</label>\r\n                                    </Col>\r\n                                    <Col sm/>\r\n                                </Row>\r\n                            </Container>\r\n\r\n                        </div>\r\n                        <br/>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <Button onClick={getData}>Download</Button>\r\n                        </div>\r\n                    </Form>\r\n                </FadeIn>\r\n                <ErrorModalC open={false} ref={childErr}/>\r\n            </div>\r\n        )\r\n    }","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\AutocompleteC.jsx",["199","200"],"import React, {Component} from \"react\";\r\nimport '../styles/SearchPage.css';\r\nimport {Form, Col, Row} from \"react-bootstrap\";\r\nimport ErrorModalC from \"./ErrorModalC\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport BrowsePage from \"../pages/BrowsePage\";\r\nimport Switch from \"react-switch\";\r\n\r\n\r\n/**\r\n * the component of the searching module\r\n * apiUrl - the url of the requested HTML call to the backend (i.e: http://127.0.0.1:8800/api/v1/strains). The backend need to return list of dictionaries in the format: [{name: \"a\", key: \"0\"},...]\r\n * parentCallback - the callback that will be called in the parent which holds this component. The parent will receive the current selected objects for each change on this component.  See DownloadPage for example or ask Alon.\r\n * multipleChoice - determines the multiselect option, 'true' means multiselect enabled, 'false' otherwise.\r\n * labelText - The text which will appear in the label of the component (i.e: \"Select single/multiple strain/s:\").\r\n * disabled - Disables the autocomplete\r\n */\r\n// export default function AutocompleteC({\r\n//                                           apiUrl,\r\n//                                           parentCallback,\r\n//                                           multipleChoice,\r\n//                                           limit_length = 0,\r\n//                                           parentCallbackLegnth = null,\r\n//                                           labelText =\"\",\r\n//                                           disabled=false\r\n//                                       }) {\r\n//     const [open, setOpen] = React.useState(false);\r\n//     const [options, setOptions] = React.useState([]);\r\n//     const loading = open && options.length === 0;\r\n//\r\n//     const childErr = React.createRef();\r\n//\r\n//     React.useEffect(() => {\r\n//         let active = true;\r\n//         if (!loading) {\r\n//             return undefined;\r\n//         }\r\n//\r\n//\r\n//         (async () => {\r\n//             try {\r\n//                 const response = await fetch(apiUrl);\r\n//\r\n//                 const countries = await response.json();\r\n//                 if (active) {\r\n//                     setOptions(countries.filter(x => x.name != null))\r\n//                 }\r\n//             } catch (e) {\r\n//                 if(childErr.current) {\r\n//                     childErr.current.handleOpen(\"There is a problem with the server request. We apologize for the inconvenience.\");\r\n//                 }\r\n//             }\r\n//\r\n//         })();\r\n//\r\n//         return () => {\r\n//             active = false;\r\n//         };\r\n//     }, [loading]);\r\n//\r\n//     React.useEffect(() => {\r\n//         if (!open) {\r\n//             setOptions([]);\r\n//         }\r\n//     }, [open]);\r\n//\r\n//     const clearInput = () => {\r\n//         const elem = document.getElementsByClassName(\r\n//             \"MuiAutocomplete-clearIndicator\"\r\n//         )[0];\r\n//         if (typeof elem.onclick == \"function\") {\r\n//             elem.onclick.apply(elem);\r\n//         }\r\n//     }\r\n//\r\n//     return (\r\n//         <div className=\"search-form\">\r\n//             <Form.Group as={Row} controlId=\"selectStrain\">\r\n//                 <Col>\r\n//                     <Autocomplete\r\n//                         disableCloseOnSelect = {true}\r\n//                         disabled={disabled}\r\n//                         id=\"asynchronous-demo\"\r\n//                         multiple={multipleChoice}\r\n//                         open={open}\r\n//                         onOpen={() => {\r\n//                             setOpen(true);\r\n//                         }}\r\n//                         onClose={() => {\r\n//                             setOpen(false);\r\n//                         }}\r\n//                         onChange={(event, value) => parentCallback(value)}\r\n//                         getOptionSelected={(option, value) => option.name === value.name}\r\n//                         getOptionLabel={(option) => option.name}\r\n//                         options={options}\r\n//                         getOptionDisabled={(() => {\r\n//                             if (parentCallbackLegnth) {\r\n//                                 return parentCallbackLegnth() >= limit_length\r\n//                             }\r\n//                             return false\r\n//                         })\r\n//                         }\r\n//                         loading={loading}\r\n//                         renderInput={(params) => (\r\n//                             <TextField\r\n//                                 {...params}\r\n//                                 label = {labelText}\r\n//                                 variant=\"outlined\"\r\n//                                 size=\"small\"\r\n//                                 InputProps={{\r\n//                                     ...params.InputProps,\r\n//                                     endAdornment: (\r\n//                                         <React.Fragment>\r\n//                                             {loading ? <CircularProgress color=\"inherit\" size={20}/> : null}\r\n//                                             {params.InputProps.endAdornment}\r\n//                                         </React.Fragment>\r\n//                                     ),\r\n//                                 }}\r\n//                             />\r\n//                         )}\r\n//                     />\r\n//                 </Col>\r\n//             </Form.Group>\r\n//             <ErrorModalC open={false} ref={childErr}/>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\nclass AutocompleteC extends Component{\r\n\r\n\r\n    //     const [open, setOpen] = React.useState(false);\r\n//     const [options, setOptions] = React.useState([]);\r\n//     const loading = open && options.length === 0;\r\n//\r\n//     const childErr = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.childErr = React.createRef()\r\n        this.state = {\r\n            open: false,\r\n            options: [],\r\n            loading: false,\r\n            acKey: true\r\n        }\r\n        // this.loading = ;\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot: SS) {\r\n        let isLoaded = this.state.open && this.state.options.length === 0;\r\n        let active = true;\r\n        if (!isLoaded) {\r\n            return undefined;\r\n        }\r\n        // this.setState({loading: true})\r\n\r\n\r\n        (async () => {\r\n            try {\r\n\r\n                const response = await fetch(this.props.apiUrl);\r\n\r\n                const countries = await response.json();\r\n                if (active) {\r\n                    // setOptions(countries.filter(x => x.name != null))\r\n                    this.setState({options: countries.filter(x => x.name != null)})\r\n                    this.setState({loading: false})\r\n\r\n                }\r\n\r\n            } catch (e) {\r\n                if(this.childErr.current) {\r\n                    this.childErr.current.handleOpen(\"There is a problem with the server request. We apologize for the inconvenience.\");\r\n                }\r\n            }\r\n            active = false;\r\n        })();\r\n\r\n    }\r\n\r\n    clearInput = () => {\r\n            this.setState({acKey: !this.state.acKey}) // changing the key value resets the input value\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return(\r\n        <div className=\"search-form\">\r\n            <Form.Group as={Row} controlId=\"selectStrain\">\r\n                <Col>\r\n                    <Autocomplete\r\n                        key={this.state.acKey}\r\n                        disableCloseOnSelect = {this.props.disableCloseOnSelect}\r\n                        disabled={this.props.disabled}\r\n                        id=\"asynchronous-demo\"\r\n                        multiple={this.props.multipleChoice}\r\n                        open={this.state.open}\r\n                        noOptionsText={'Loading...'}\r\n                        onOpen={() => {\r\n                            // setOpen(true);\r\n                            this.setState({open: true})\r\n                        }}\r\n                        onClose={() => {\r\n                            this.setState({open: false})\r\n                            this.setState({loading: false})\r\n                            this.setState({options: []})\r\n                        }}\r\n                        onChange={(event, value) => this.props.parentCallback(value)}\r\n                        getOptionSelected={(option, value) => option.name === value.name}\r\n                        getOptionLabel={(option) => option.name}\r\n                        options={this.state.options}\r\n                        getOptionDisabled={(() => {\r\n                            if (this.props.parentCallbackLegnth) {\r\n                                return this.props.parentCallbackLegnth() >= this.props.limit_length\r\n                            }\r\n                            return false\r\n                        })\r\n                        }\r\n                        loading={this.state.loading}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                label = {this.props.labelText}\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                InputProps={{\r\n                                    ...params.InputProps,\r\n                                    endAdornment: (\r\n                                        <React.Fragment>\r\n                                            {this.state.loading ? <CircularProgress color=\"inherit\" size={20}/> : null}\r\n                                            {params.InputProps.endAdornment}\r\n                                        </React.Fragment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        )}\r\n                    />\r\n                </Col>\r\n            </Form.Group>\r\n            <ErrorModalC open={false} ref={this.childErr}/>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default AutocompleteC;\r\n","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\StrainCircosResultsPage.jsx",["201","202"],"import React, {Component, useState, useRef} from \"react\";\r\nimport CircosStrain from \"../components/CircosStrain\";\r\nimport DefenseSystemStrain from \"../components/DefenseSystemStrain\"\r\n\r\n/**\r\n * The results page of circos strain search page\r\n */\r\nclass StrainCircosResultsPage extends Component {\r\n\r\n    state = {source: null};\r\n\r\n    render() {\r\n        const svn = this.props.history.location.state.strainVariableName;\r\n        return(\r\n            <div>\r\n                <CircosStrain svnn={svn} />\r\n                <DefenseSystemStrain svnn={svn}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StrainCircosResultsPage;","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\StrainCircosPage.jsx",["203","204","205","206","207"],"import React, {useState} from \"react\";\r\nimport {Form, Col, Row, Button, OverlayTrigger, Tooltip} from \"react-bootstrap\";\r\nimport searchlogo from '../assets/images/research.png'\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Link} from 'react-router-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ErrorModalC from \"../components/ErrorModalC\";\r\n\r\n\r\n/**\r\n * The Strain Circos search page\r\n */\r\nexport default function StrainCircosPage() {\r\n    const [strainVariableName, setStrainVariableName] = React.useState(\"\")\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n    const childErr = React.createRef();\r\n\r\n    React.useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n\r\n\r\n\r\n        (async () => {\r\n            const response = await fetch('http://127.0.0.1:8800/api/v1/strains');\r\n            const strains = await response.json();\r\n            if (!response.ok) {\r\n                // get error message from body or default to response status\r\n                const error = (strains && strains.message) || response.status;\r\n                return Promise.reject(error);\r\n            }\r\n            if (active) {\r\n                setOptions(strains.filter(x=> x.name != null))\r\n            }\r\n\r\n        })().catch((err) => {\r\n            console.log(err);\r\n            if (childErr.current) {\r\n                childErr.current.handleOpen();\r\n                }});\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    },[loading]);\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n            <FadeIn>\r\n                <Form>\r\n                    <Form.Group as={Row}>\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}></p>\r\n                        </Form.Label>\r\n                        <Col sm=\"4\">\r\n                            <div className=\"imgr_wr\">\r\n                                <img style={{display: \"inline-block\"}} className=\"imgr\" src={searchlogo}/>\r\n                            </div>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"selectStrain\">\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}>Select a strain</p>\r\n                        </Form.Label>\r\n\r\n                        <Col sm=\"4\">\r\n                            <Autocomplete className=\"textBox\"\r\n                                id=\"asynchronous-demo\"\r\n                                multiple={false}\r\n                                style={{ width: 800 }}\r\n                                open={open}\r\n                                onOpen={() => {\r\n                                    setOpen(true);\r\n                                }}\r\n                                onClose={() => {\r\n                                    setOpen(false);\r\n                                }}\r\n                                getOptionSelected={(option, value) => option.name === value.name}\r\n                                getOptionLabel={(option) => option.name}\r\n                                options={options}\r\n                                loading={loading}\r\n                                onInputChange={(event,newInputEvent) =>\r\n                                {\r\n                                    setStrainVariableName(newInputEvent);\r\n                                }}\r\n                                renderInput={(params) => (\r\n                                    <TextField\r\n                                        {...params}\r\n                                        label=\"Choose a strain...\"\r\n                                        variant=\"outlined\"\r\n                                        InputProps={{\r\n                                            ...params.InputProps,\r\n                                            endAdornment: (\r\n                                                <React.Fragment>\r\n                                                    {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                                                    {params.InputProps.endAdornment}\r\n                                                </React.Fragment>\r\n                                            ),\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Link to={{\r\n                            pathname: '/resultsCircosStrain',\r\n                            state: {\r\n                                strainVariableName: strainVariableName, // send the selected strain to the result display page\r\n                            }\r\n                        }}><Button>Display</Button></Link>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n            <ErrorModalC open={false} ref={childErr}/>\r\n        </div>\r\n    );\r\n}","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CircosStrain.jsx",["208"],"import React, {Component} from \"react\";\r\nimport '../styles/CircosStrain.css';\r\n\r\n/**\r\n * the circos component (the genome html file)\r\n */\r\nclass CircosStrain extends Component {\r\n    state = {\r\n        file: null,\r\n        loaded: false\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <iframe className=\"circosFrame\" src={\"http://127.0.0.1:8800/api/v1/strains/strainCircos/\" + this.props.svnn} width=\"1000\" height=\"1000\" />\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CircosStrain;","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\GenesByDefenseForm.jsx",["209","210","211","212","213","214","215"],"import React, {Component} from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport '../styles/StrainForm.css';\r\nimport axios from \"axios\";\r\nimport {Form, Col, Row, Button, Modal, Container} from \"react-bootstrap\";\r\nimport TextOrFileUpload from \"../components/TextOrFileUpload\";\r\nimport ErrorModalC from \"./ErrorModalC\";\r\n\r\n/**\r\n * the component of getting genes by the defense systems\r\n */\r\nexport default function GenesByDefenseForm() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const loading = open && options.length === 0;\r\n    const [checkedAll, setCheckedAll] = React.useState(false);\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    const [selectedA, setSelectedA] = React.useState(false);\r\n    const [checked, setChecked] = React.useState({\r\n        // locus_tag: true,\r\n        genomic_accession: true,\r\n        start: true,\r\n        end: true,\r\n        strand: true,\r\n        attributes_x: true,\r\n        product_accession: true,\r\n        nonredundant_refseq: true,\r\n        name: true\r\n    });\r\n    const childErr = React.createRef();\r\n\r\n    /* ################################################ */\r\n    /* #### TOGGLES checK STATE BASED ON inputName #### */\r\n    /* ################################################ */\r\n\r\n    const toggleCheck = (inputName) => {\r\n        setChecked((prevState) => {\r\n            const newState = {...prevState};\r\n            newState[inputName] = !prevState[inputName];\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    /* ###################################################### */\r\n    /* #### CHECKS OR UNCHECKS ALL FROM SELECT ALL CLICK #### */\r\n    /* ###################################################### */\r\n\r\n    const selectAll = (value) => {\r\n        setCheckedAll(value);\r\n        setChecked((prevState) => {\r\n            const newState = {...prevState};\r\n            for (const inputName in newState) {\r\n                newState[inputName] = value;\r\n            }\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    /* ############################################# */\r\n    /* #### EFFECT TO CONTROL CHECKED_ALL STATE #### */\r\n    /* ############################################# */\r\n\r\n    // IF YOU CHECK BOTH INDIVIDUALLY. IT WILL ACTIVATE THE checkedAll STATE\r\n    // IF YOU UNCHECK ANY INDIVIDUALLY. IT WILL DE-ACTIVATE THE checkAll STATE\r\n\r\n    React.useEffect(() => {\r\n        let allChecked = true;\r\n        for (const inputName in checked) {\r\n            if (checked[inputName] === false) {\r\n                allChecked = false;\r\n            }\r\n        }\r\n        if (allChecked) {\r\n            setCheckedAll(true);\r\n        } else {\r\n            setCheckedAll(false);\r\n        }\r\n    }, [checked]);\r\n\r\n    /* ########################## */\r\n    /* #### RETURN STATEMENT #### */\r\n\r\n    /* ########################## */\r\n\r\n\r\n    function getData() {\r\n\r\n        let selectedC = [];\r\n\r\n        for (let key in checked) {\r\n            // check if the property/key is defined in the object itself, not in parent\r\n            if (checked[key] == true)\r\n                selectedC.push(key)\r\n        }\r\n\r\n        let selectedAS = [];\r\n        if (Array.isArray(selectedA) && selectedA.length > 0) {\r\n            for (let key in selectedA) {\r\n                selectedAS.push(selectedA[key]['name'])\r\n            }\r\n        } else {\r\n            selectedAS.push(selectedA['name']);\r\n        }\r\n\r\n        if (selectedC.length == 0) {\r\n            setModalShow(true)\r\n            return;\r\n        }\r\n\r\n\r\n        console.log(selectedAS)\r\n        // console.log(selectedC)\r\n\r\n\r\n        const FileDownload = require('js-file-download');\r\n\r\n        const Qs = require('qs')\r\n\r\n        let params = {selectedC: selectedC, selectedAS: selectedAS}\r\n\r\n        let myAxios = axios.create({\r\n            paramsSerializer: params => Qs.stringify(params, {arrayFormat: 'repeat'})\r\n        })\r\n\r\n        myAxios.get('http://127.0.0.1:8800/api/v1/genes/genes_by_defense', {params})\r\n            .then((res) => {\r\n                FileDownload(res.data, 'genes_by_defense.csv');\r\n            }).catch(function (error) {\r\n            if (error['response']) {\r\n                if (error['response']['status'] == 400) {\r\n                    childErr.current.handleOpen(\"One or more of the parameters is invalid.\")\r\n                    return\r\n                }\r\n            }\r\n            childErr.current.handleOpen(\"There is a problem with the server request. We apologize for the inconvenience.\")\r\n        });\r\n\r\n    }\r\n\r\n\r\n    function MyVerticallyCenteredModal(props) {\r\n        return (\r\n            <Modal\r\n                {...props}\r\n                size=\"sm\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Missing Information\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Select a field</h4>\r\n                    <p>\r\n                        Please select at least one of the fields from the list.\r\n                    </p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide}>Ok</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    const getSelected = (selected) => {\r\n        setSelectedA(selected)\r\n    }\r\n\r\n\r\n    /*\r\nhandle file upload and load each line to array of\r\n integers (aka strain indexes for subtree) for subtree generating\r\n using selectedFile state.\r\n */\r\n    const onFileChange = (e) => {\r\n\r\n        // Update the state\r\n        if (e.target.files.length > 0) {\r\n            e.preventDefault()\r\n            const reader = new FileReader()\r\n            console.log(e)\r\n            reader.onload = async (e) => {\r\n                const text = (e.target.result);\r\n                let ts = text.split(/\\r?\\n/);\r\n                let selectedAS = [];\r\n                let id = 0;\r\n                for (let key in ts) {\r\n                    selectedAS.push({'name': ts[key], 'id': id});\r\n                    id++;\r\n                }\r\n\r\n\r\n                setSelectedA(selectedAS)\r\n                e.target.value = null;\r\n            };\r\n            reader.readAsText(e.target.files[0])\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <FadeIn>\r\n            <MyVerticallyCenteredModal\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n            />\r\n            <Form>\r\n                <br/>\r\n                <Form.Group as={Row} controlId=\"selectStrain\">\r\n                    <Form.Label style={{display: \"flex\", alignItems:\"center\", justifyContent:\"flex\"}} className=\"wrapper\" column sm=\"4\">\r\n                        <p style={{textAlign: \"right\"}}>{\"Select single/multiple defense system/s:\"}</p>\r\n                    </Form.Label>\r\n\r\n                    <Col style={{textAlign:\"center\"}} sm=\"4\">\r\n                        <TextOrFileUpload apiUrl=\"http://127.0.0.1:8800/api/v1/defense/\"\r\n                                          multipleChoice={true} parentFileChangeCallback={onFileChange}\r\n                                          parentHandleTextBox={getSelected} label=\"Please upload a file that contains a list of defense systems separated by new lines (/n)\"\r\n                        /><h6 className=\"note\"><i>Note: Not selecting a defense system will return <b>all the genes in the database.</b></i></h6>\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n\r\n\r\n                <div className=\"chkbxs\">\r\n                    <Container>\r\n                    <Row>\r\n                        <Col>\r\n                    <div>\r\n                        <br/>\r\n                        <input\r\n                            id=\"all2\"\r\n                            type=\"checkbox\"\r\n                            onChange={(event) => selectAll(event.target.checked)}\r\n                            checked={checkedAll}\r\n                        />\r\n                        <label for=\"all2\" className=\"lbl\">All</label>\r\n                    </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col sm>\r\n                    <input id='22' type=\"checkbox\" name=\"genomic_accession\"\r\n                           onChange={() => toggleCheck(\"genomic_accession\")} checked={checked[\"genomic_accession\"]}/>\r\n                    <label for='22' className=\"lbl\">genomic_accession</label>\r\n                        </Col>\r\n                        <Col sm>\r\n                    <input id='32' type=\"checkbox\" name=\"start\" onChange={() => toggleCheck(\"start\")}\r\n                           checked={checked[\"start\"]}/>\r\n                    <label for='32' className=\"lbl\">start</label>\r\n                        </Col>\r\n                        <Col sm>\r\n                    <input id='42' type=\"checkbox\" name=\"end\" onChange={() => toggleCheck(\"end\")}\r\n                           checked={checked[\"end\"]}/>\r\n                    <label htmlFor='42' className=\"lbl\">end</label>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col sm>\r\n                    <input id='52' type=\"checkbox\" name=\"strand\" onChange={() => toggleCheck(\"strand\")}\r\n                           checked={checked[\"strand\"]}/>\r\n                    <label htmlFor='52' className=\"lbl\">strand</label>\r\n                        </Col>\r\n                        <Col sm>\r\n                    <input id='62' type=\"checkbox\" name=\"attributes_x\" onChange={() => toggleCheck(\"attributes_x\")}\r\n                           checked={checked[\"attributes_x\"]}/>\r\n                    <label htmlFor='62' className=\"lbl\">attributes_x</label>\r\n                        </Col>\r\n                        <Col sm>\r\n                    <input id='72' type=\"checkbox\" name=\"product_accession\"\r\n                           onChange={() => toggleCheck(\"product_accession\")} checked={checked[\"product_accession\"]}/>\r\n                    <label htmlFor='72' className=\"lbl\">product_accession</label>\r\n                        </Col>\r\n                    </Row>\r\n                        <Row>\r\n                            <Col sm>\r\n                    <input id='82' type=\"checkbox\" name=\"nonredundant_refseq\"\r\n                           onChange={() => toggleCheck(\"nonredundant_refseq\")}\r\n                           checked={checked[\"nonredundant_refseq\"]}/>\r\n                    <label htmlFor='82' className=\"lbl\">nonredundant_refseq</label>\r\n                            </Col>\r\n                            <Col sm>\r\n                    <input id='92' type=\"checkbox\" name=\"name\" onChange={() => toggleCheck(\"name\")}\r\n                           checked={checked[\"name\"]}/>\r\n                    <label htmlFor='92' className=\"lbl\">name</label>\r\n                            </Col>\r\n                            <Col sm></Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n                <br/>\r\n                <div style={{textAlign: \"center\"}}>\r\n                    <Button onClick={getData}>Download</Button>\r\n                </div>\r\n            </Form>\r\n            <ErrorModalC open={false} ref={childErr}/>\r\n            </FadeIn>\r\n        </div>\r\n    )\r\n}","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\utilities\\colors.js",[],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\DefenseSystemStrain.jsx",["216"],"import React, {Component} from \"react\";\r\nimport axios from \"axios\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport '../styles/DefenseSystemStrain.css';\r\nimport ToolkitProvider, { CSVExport } from 'react-bootstrap-table2-toolkit';\r\nimport {faDownload, faQuestion} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport ErrorModalC from \"../components/ErrorModalC\";\r\n\r\n/**\r\n * the defense systems of a specific strain\r\n */\r\nclass DefenseSystemStrain extends Component {\r\n    state = {\r\n        result_table: [],\r\n    };\r\n    constructor() {\r\n        super();\r\n        this.childErr = React.createRef();\r\n    }\r\n    componentDidMount() {\r\n        axios\r\n            .get(\r\n                \"http://127.0.0.1:8800/api/v1/strains/strainGenesDefSystems/\"+this.props.svnn\r\n            )\r\n            .then(response => {\r\n                this.setState({result_table: response.data})\r\n            }).catch((err) => {\r\n            console.log(err);\r\n            if (this.childErr.current) {\r\n                this.childErr.current.handleOpen();\r\n            }});\r\n    }\r\n    render() {\r\n        const { ExportCSVButton } = CSVExport;\r\n        const columns = [\r\n            {dataField: \"locus_tag\", text: \"locus tag\", sort: true},\r\n            {dataField: \"defense_system\", text: \"defense system \", sort: true},\r\n            {dataField: \"anti_crispr\", text: \"anti crispr\", sort: true},\r\n        ]\r\n\r\n        return (\r\n            <div>\r\n                <FadeIn>\r\n                    <div style={{height: \"100%\", width: \"90%\",marginLeft:\"5%\"}}>\r\n\r\n                        <ToolkitProvider\r\n                            keyField=\"id\"\r\n                            data={this.state.result_table}\r\n                            columns={ columns }\r\n                            exportCSV\r\n                        >\r\n                            {\r\n                                props => (\r\n                                    <div>\r\n                                        <BootstrapTable  { ...props.baseProps }\r\n                                                         pagination={paginationFactory({\r\n                                                             sizePerPage: 50,\r\n                                                             pageStartIndex: 1, // first page will be 0, default is 1\r\n                                                             paginationSize: 10,  // the pagination bar size, default is 5\r\n                                                             showTotal: true, // display pagination information\r\n                                                             firstPageText: '<<', // the text of first page button\r\n                                                             prePageText: 'Prev', // the text of previous page button\r\n                                                             nextPageText: 'Next', // the text of next page button\r\n                                                             lastPageText: '>>', // the text of last page button\r\n                                                             nextPageTitle: 'Go to next', // the title of next page button\r\n                                                             prePageTitle: 'Go to previous', // the title of previous page button\r\n                                                             firstPageTitle: 'Go to first', // the title of first page button\r\n                                                             lastPageTitle: 'Go to last', // the title of last page button\r\n                                                             hideSizePerPage: false, // hide the size per page dropdown\r\n                                                             hidePageListOnlyOnePage: true, // hide pagination bar when only one page, default is false\r\n                                                         })}\r\n                                        />\r\n                                        <ExportCSVButton className=\"exportB\" { ...props.csvProps }><FontAwesomeIcon icon={faDownload}/> Download to CSV</ExportCSVButton>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </ToolkitProvider>\r\n                    </div>\r\n                </FadeIn>\r\n                <ErrorModalC open={false} ref={this.childErr}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default DefenseSystemStrain;","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\Drawer.jsx",["217","218"],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\Cluster.jsx",["219","220","221"],"import React, {Component} from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport '../styles/StrainForm.css';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport AutocompleteC from \"./AutocompleteC\";\r\nimport ErrorModalC from \"../components/ErrorModalC\";\r\n\r\nclass Cluster extends Component {\r\n    state = {\r\n        strains: [\r\n            {\r\n                name: \"PAO1\",\r\n                id: \"GCF_000006765.1\"\r\n            },\r\n            {\r\n                name: \"PA14\",\r\n                id: \"GCF_000014625.1\"\r\n            }\r\n        ],\r\n        num_cluster: ['1', '2', '3'],\r\n        selected_strainA: false,\r\n        selected_strainB: false,\r\n        selected_strainC: false,\r\n        selected_geneA: false,\r\n        selected_geneB: false,\r\n        selected_geneC: false,\r\n        showing_one: false,\r\n        showing_two: false,\r\n        showing_three: false,\r\n        downloadable: false,\r\n        ackey: true,\r\n\r\n    }\r\n    constructor() {\r\n        super();\r\n        this.childErr = React.createRef();\r\n        this.childAC1 = React.createRef();\r\n        this.childAC2 = React.createRef();\r\n        this.childAC3 = React.createRef();\r\n    }\r\n    choice_strainA = (selected) => {\r\n        if (selected != null) {\r\n            this.setState({\r\n                selected_strainA: selected\r\n            })\r\n        }\r\n    }\r\n    choice_strainB = (selected) => {\r\n        if (selected != null) {\r\n            this.setState({\r\n                selected_strainB: selected\r\n            })\r\n        }\r\n    }\r\n\r\n    choice_strainC = (selected) => {\r\n        if (selected != null) {\r\n            this.setState({\r\n                selected_strainC: selected\r\n            })\r\n        }\r\n    }\r\n\r\n    choice_geneA = (selected) => {\r\n        if (selected != null) {\r\n            this.setState({\r\n                selected_geneA: selected.name\r\n            })\r\n        }\r\n    }\r\n    choice_geneB = (selected) => {\r\n        if (selected != null) {\r\n            this.setState({\r\n                selected_geneB: selected.name\r\n            })\r\n        }\r\n    }\r\n    choice_geneC = (selected) => {\r\n        if (selected != null) {\r\n            this.setState({\r\n                selected_geneC: selected.name\r\n            })\r\n        }\r\n    }\r\n\r\n    getTree(){\r\n        const arr = []\r\n        if (this.state.showing_one) {\r\n            arr.push(this.state.selected_strainA.name + '-' + this.state.selected_geneA)\r\n        }\r\n        if (this.state.showing_two) {\r\n            arr.push(this.state.selected_strainB.name + '-' + this.state.selected_geneB)\r\n        }\r\n        if (this.state.showing_three) {\r\n            arr.push(this.state.selected_strainC.name + '-' + this.state.selected_geneC)\r\n        }\r\n        this.setState({downloadable: true})\r\n        return [...arr]\r\n    }\r\n\r\n    show_lines = (value) => {\r\n        if (value == '1') {\r\n            this.setState({\r\n                    showing_one: true,\r\n                    showing_two: false,\r\n                    showing_three: false,\r\n                    selected_geneB: \"\",\r\n                    selected_strainB: \"\",\r\n                    selected_geneC: \"\",\r\n                    selected_strainC: \"\",\r\n                }\r\n            )\r\n        }\r\n        if (value == '2') {\r\n            this.setState({\r\n                    showing_one: true,\r\n                    showing_two: true,\r\n                    showing_three: false,\r\n                    selected_geneC: \"\",\r\n                    selected_strainC: \"\",\r\n                }\r\n            )\r\n        }\r\n        if (value == '3') {\r\n            this.setState({\r\n                    showing_one: true,\r\n                    showing_two: true,\r\n                    showing_three: true,\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    clearInput(){\r\n        if(this.childAC1.current) {\r\n            this.childAC1.current.clearInput()\r\n        }\r\n        if(this.childAC2.current) {\r\n            this.childAC2.current.clearInput()\r\n        }\r\n        if(this.childAC3.current) {\r\n            this.childAC3.current.clearInput()\r\n        }\r\n        this.setState({ackey: !this.state.ackey}) // changing the key value resets the input value\r\n        this.setState({selected_strainA: false})\r\n        this.setState({selected_strainB: false})\r\n        this.setState({selected_strainC: false})\r\n        this.setState({selected_geneA: false})\r\n        this.setState({selected_geneB: false})\r\n        this.setState({selected_geneC: false})\r\n        this.setState({showing_one: false})\r\n        this.setState({showing_two: false})\r\n        this.setState({showing_three: false})\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <container>\r\n                <div>\r\n                    <Autocomplete\r\n                        key={this.state.ackey}\r\n                        id=\"Choose_num\"\r\n                        options={this.state.num_cluster}\r\n                        getOptionLabel={(option) => option}\r\n                        onChange={(event, value) => this.show_lines(value)}\r\n                        renderInput={(params) => <TextField {...params} size=\"small\" label=\"Choose num of gene\"\r\n                                                            variant=\"outlined\"/>}\r\n                    />\r\n                    <div>\r\n                        {this.state.showing_one\r\n                            ? <div>\r\n                                <FadeIn>\r\n                                    <p style={{textAlign: \"left\"}}>select first strain and gene</p>\r\n                                    <Autocomplete\r\n                                        key={this.state.ackey}\r\n                                        id=\"strains-combo-box\"\r\n                                        options={this.state.strains}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        onChange={(event, value) => this.choice_strainA(value)}\r\n                                        renderInput={(params) => <TextField {...params} size=\"small\"\r\n                                                                            label=\"Choose Strain\"\r\n                                                                            variant=\"outlined\"/>}\r\n                                    />\r\n                                    <br/>\r\n                                    <AutocompleteC multipleChoice={false} true\r\n                                                   parentCallback={this.choice_geneA}\r\n                                                   apiUrl={\"http://127.0.0.1:8800/api/v1/cluster/get_gene_strain_id/\" + this.state.selected_strainA.id}\r\n                                                   labelText=\"Choose Gene\"\r\n                                                   ref = {this.childAC1}\r\n                                                   disableCloseOnSelect = {false}\r\n                                    />\r\n                                </FadeIn>\r\n                            </div>\r\n                            : null\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        {this.state.showing_two\r\n                            ? <div>\r\n                                <FadeIn>\r\n                                    <p style={{textAlign: \"left\"}}>select second strain and gene</p>\r\n                                    <Autocomplete\r\n                                        key={this.state.ackey}\r\n                                        id=\"strains-combo-box\"\r\n                                        options={this.state.strains}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        onChange={(event, value) => this.choice_strainB(value)}\r\n                                        renderInput={(params) => <TextField {...params} size=\"small\"\r\n                                                                            label=\"Choose Strain\"\r\n                                                                            variant=\"outlined\"/>}\r\n                                    />\r\n                                    <br/>\r\n                                    <AutocompleteC multipleChoice={false} true\r\n                                                   parentCallback={this.choice_geneB}\r\n                                                   apiUrl={\"http://127.0.0.1:8800/api/v1/cluster/get_gene_strain_id/\" + this.state.selected_strainB.id}\r\n                                                   labelText=\"Choose Gene\"\r\n                                                   ref = {this.childAC2}\r\n                                                   disableCloseOnSelect = {false}\r\n                                    />\r\n                                </FadeIn>\r\n                            </div>\r\n                            : null\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        {this.state.showing_three\r\n                            ? <div>\r\n                                <FadeIn>\r\n                                    <p style={{textAlign: \"left\"}}>select third strain and gene</p>\r\n                                    <Autocomplete\r\n                                        key={this.state.ackey}\r\n                                        id=\"strains-combo-box\"\r\n                                        options={this.state.strains}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        onChange={(event, value) => this.choice_strainC(value)}\r\n                                        renderInput={(params) => <TextField {...params} size=\"small\"\r\n                                                                            label=\"Choose Strain\"\r\n                                                                            variant=\"outlined\"/>}\r\n                                    />\r\n                                    <br/>\r\n                                    <AutocompleteC multipleChoice={false} true\r\n                                                   parentCallback={this.choice_geneC}\r\n                                                   apiUrl={\"http://127.0.0.1:8800/api/v1/cluster/get_gene_strain_id/\" + this.state.selected_strainC.id}\r\n                                                   labelText=\"Choose Gene\"\r\n                                                   ref = {this.childAC3}\r\n                                                   disableCloseOnSelect = {false}\r\n                                    />\r\n\r\n                                </FadeIn>\r\n                            </div>\r\n                            : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <ErrorModalC open={false} ref={this.childErr}/>\r\n            </container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cluster;","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\CorrelationResultsPage.jsx",["222","223"],"import React, {Component, useState, useRef} from \"react\";\r\nimport CorrelationGraph from \"../components/CorrelationGraph\";\r\n\r\n/**\r\n * the Correlation Page - The results view\r\n */\r\nclass CorrelationResultsPage extends Component {\r\n\r\n    state = {source: null};\r\n\r\n\r\n    render() {\r\n        const items = this.props.myArrayVariableName; // The items which were selected by the user in the CorrelationSearchPage\r\n        const eventKey = this.props.eventK; //The current eventkey which were selected by the user in the CorrelationSearchPage\r\n\r\n        console.log(items)\r\n        return(\r\n            <div>\r\n                <CorrelationGraph eventK={eventKey} itemsSelected={items}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CorrelationResultsPage;","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\pages\\CorrelationSearchPage.jsx",["224","225","226","227","228","229","230","231","232","233"],"import React from \"react\";\r\nimport DefVSDef from \"../components/CorrelationComponents/DefVSDef\";\r\nimport DefVSIsoType from \"../components/CorrelationComponents/DefVSIsoType\";\r\nimport CorrelationResultsPage from \"./CorrelationResultsPage\";\r\nimport '../styles/CorrelationSearchPage.css'\r\nimport DrawerCorrelation from \"../components/CorrelationComponents/DrawerCorrelation\";\r\nimport DefVSCluster from \"../components/CorrelationComponents/DefVSCluster\";\r\nimport ClusterVSIsoType from \"../components/CorrelationComponents/ClusterVSIsoType\";\r\nimport DefVSCat from \"../components/CorrelationComponents/DefVSCat\";\r\n\r\n/**\r\n * the Correlation Page - the search view\r\n */\r\nclass CorrelationSearchPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            results: false, //flag to show if the result is shown or not\r\n            params: [], //holds the params for the calculations in the result window\r\n            generateType: 'dvd' //holds the current eventKey of the tabs (which tab was selected last)\r\n        };\r\n    };\r\n\r\n    getParams = (params) => {\r\n        this.setState({params: params})\r\n        this.setState({results: true})\r\n    }\r\n\r\n    getTwoParams = (param1, param2) => {\r\n        this.setState({params: [param1[0], param2[0]]})\r\n        this.setState({results: true})\r\n    }\r\n\r\n    getThreeParams = (param1, param2, param3) => {\r\n        this.setState({params: [param1[0], param2, param3[0]]})\r\n        this.setState({results: true})\r\n    }\r\n\r\n    changeResults = () => {\r\n        this.setState({results: false})\r\n    }\r\n\r\n    generatingTypeHandler = Gtype => {\r\n        this.changeResults()\r\n        if (Gtype == \"dvd\") {\r\n            this.setState({generateType: \"dvd\"})\r\n        } else if (Gtype == \"dvc\") {\r\n            this.setState({generateType: \"dvc\"})\r\n        } else if (Gtype == \"dvi\") {\r\n            this.setState({generateType: \"dvi\"})\r\n        } else if (Gtype == \"dvcl\") {\r\n            this.setState({generateType: \"dvcl\"})\r\n        } else {\r\n            this.setState({generateType: \"clvi\"})\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const currWindow = () => {\r\n            if (this.state.results == false) {\r\n                let currEvenKey = this.state.generateType  //holds the current eventKey of the tabs (which tab was selected last)\r\n                if (currEvenKey == 'dvd') {\r\n                    return (<DefVSDef parentCallback2={this.getParams}/>)\r\n                } else if (currEvenKey == 'dvc') {\r\n                    return (<DefVSCat parentCallback2={this.getTwoParams}/>)\r\n                } else if (currEvenKey == 'dvi') {\r\n                    return (<DefVSIsoType parentCallback2={this.getTwoParams}/>)\r\n                } else if (currEvenKey == 'dvcl') {\r\n                    return (<DefVSCluster parentCallback2={this.getThreeParams}/>)\r\n                } else if (currEvenKey == 'clvi') {\r\n                    return (<ClusterVSIsoType parentCallback2={this.getThreeParams}/>)\r\n                }\r\n\r\n            } else {\r\n                return (\r\n                    <CorrelationResultsPage eventK={this.state.generateType} myArrayVariableName={this.state.params}/>)\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <div>\r\n                {currWindow()}\r\n\r\n                <div className=\"sidebar\" id=\"drawer\">\r\n                    <DrawerCorrelation generatingTypeHandler={this.generatingTypeHandler}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CorrelationSearchPage;","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\IsolationType.jsx",["234"],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\ErrorModalC.jsx",[],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\GenesByClusterC.jsx",[],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\TextOrFileUpload.jsx",["235","236","237","238","239","240"],"import React, {Component} from \"react\";\r\nimport '../styles/SearchPage.css';\r\nimport {Form, Col, Row} from \"react-bootstrap\";\r\nimport AutocompleteC from \"./AutocompleteC\";\r\nimport Switch from \"react-switch\";\r\nimport BrowsePage from \"../pages/BrowsePage\";\r\n\r\n//apiUrl - For the autocomplete: the url of the requested HTML call to the backend (i.e: http://127.0.0.1:8801/api/v1/strains). The backend need to return list of dictionaries in the format: [{name: \"a\", key: \"0\"},...]\r\n//multipleChoice - For the autocomplete: determines the multiselect option, 'true' means multiselect enabled, 'false' otherwise.\r\n//parentHandleTextBox - For the autocomplete: the callback that will be called in the parent which holds this component when the user chooses an option from the autocomplete component.\r\n//parentFileChangeCallback -  the callback that will be called in the parent which holds this component when the user chooses a file. The file should contain the options with \\n separating between them.\r\n//label - the description of the component for the user\r\n\r\n// export default function TextOrFileUpload({ apiUrl, parentFileChangeCallback, parentHandleTextBox,updateTextbox=null, multipleChoice, label, limit_length=0, parentCallbackLegnth=null}) {\r\n//\r\n//     const [textbox, setTextbox] = React.useState(true);\r\n//     const [textOrFile, setTextOrFile] = React.useState('Text Box' );\r\n//     const [autoCompleteC, clearAutoCompleteC] = React.useState(0);\r\n//\r\n//\r\n//     const renderTextBox = () => {\r\n//         if (textbox == true) {\r\n//             return <AutocompleteC ref={autoCompleteC} multipleChoice={true} apiUrl={apiUrl}\r\n//                                    parentCallback={(selected) => parentHandleTextBox(selected)} multipleChoice={multipleChoice} parentCallbackLegnth={parentCallbackLegnth} limit_length={limit_length}/>\r\n//         } else {\r\n//             return <Form.Group>\r\n//                 <Form.File onChange={(e) => parentFileChangeCallback(e)} id=\"exampleFormControlFile1\"\r\n//                            label={label}/>\r\n//             </Form.Group>;\r\n//         }\r\n//     }\r\n//\r\n//     function clearAutoComplete() {\r\n//         clearAutoCompleteC();\r\n//     }\r\n//\r\n//\r\n//         React.useEffect(() => {\r\n//             TextOrFileUpload.exposedFunction = ()=>{\r\n//                 clearAutoComplete()\r\n//             }\r\n//             // or expose in the window object\r\n//             // window.MyReactComponent = MyReactComponent\r\n//         }, [])\r\n//\r\n//\r\n//     /*\r\n// update the state of the file upload/strain selection on change\r\n//  */\r\n//     const setSwitchTextBox = () => {\r\n//         if (textbox == true) {\r\n//             // this.setState({textbox: false}\r\n//             setTextbox(false)\r\n//             // this.setState({textOrFile: 'File Upload'});\r\n//             setTextOrFile('File Upload')\r\n//\r\n//         } else {\r\n//             // this.setState({textbox: true});\r\n//             setTextbox(true)\r\n//             // this.setState({textOrFile: 'Text Box'});\r\n//             setTextOrFile('Text Box')\r\n//         }\r\n//     }\r\n//\r\n//     React.useEffect(() =>{\r\n//         if (updateTextbox !=null) {\r\n//             updateTextbox(textbox)\r\n//         }\r\n//     },[textbox])\r\n//\r\n//\r\n//\r\n//     return (\r\n//\r\n//         <div className=\"search-form\">\r\n//             <div className=\"textBox\">\r\n//                 <div className='rowC'>\r\n//                     <Switch onChange={setSwitchTextBox} checked={textbox}/> <span\r\n//                     className=\"switch\">{textOrFile}</span>\r\n//                 </div>\r\n//                 <Form>\r\n//                     {renderTextBox()}\r\n//                 </Form>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n//\r\n\r\nclass TextOrFileUpload extends Component{\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.autoCompleteC = React.createRef()\r\n        this.state = {\r\n            textbox: true,\r\n            textOrFile: \"Text Box\",\r\n            ffKey: true\r\n        }\r\n\r\n        this.parentCallback = this.props.parentHandleTextBox.bind(this)\r\n        this.parentCallbackLegnth = this.props.parentFileChangeCallback.bind(this);\r\n\r\n\r\n\r\n    }\r\n\r\n    clearAutoComplete() {\r\n        if(this.autoCompleteC.current) {\r\n            this.autoCompleteC.current.clearInput();\r\n        }\r\n        this.setState({ffKey: !this.state.ffKey})\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const renderTextBox = () => {\r\n        if (this.state.textbox == true) {\r\n            return <AutocompleteC disableCloseOnSelect = {true} ref={this.autoCompleteC} multipleChoice={true} apiUrl={this.props.apiUrl}\r\n                                   parentCallback={(selected) => this.props.parentHandleTextBox(selected)} multipleChoice={this.props.multipleChoice} parentCallbackLegnth={this.props.parentCallbackLegnth} limit_length={this.props.limit_length}/>\r\n        } else {\r\n            return <Form.Group>\r\n                <Form.File key={this.state.ffKey}onChange={this.props.parentFileChangeCallback} id=\"exampleFormControlFile1\"\r\n                           label={this.props.label}/>\r\n            </Form.Group>;\r\n        }\r\n    }\r\n\r\n\r\n            const setSwitchTextBox = () => {\r\n        if (this.state.textbox == true) {\r\n            // this.setState({textbox: false}\r\n            // setTextbox(false)\r\n            this.setState({textbox: false})\r\n            // this.setState({textOrFile: 'File Upload'});\r\n            // setTextOrFile('File Upload')\r\n            this.setState({textOrFile: false})\r\n\r\n        } else {\r\n            // this.setState({textbox: true});\r\n            this.setState({textbox: true})\r\n            // this.setState({textOrFile: 'Text Box'});\r\n            this.setState({textOrFile: 'Text Box'})\r\n        }\r\n    }\r\n\r\n\r\n        return (<div className=\"search-form\">\r\n                         <div className=\"textBox\">\r\n                             <div className='rowC'>\r\n                                <Switch onChange={setSwitchTextBox} checked={this.state.textbox}/> <span\r\n                                className=\"switch\">{this.state.textOrFile}</span>\r\n                            </div>\r\n                            <Form>\r\n                                {renderTextBox()}\r\n                            </Form>\r\n                        </div>\r\n                    </div>)\r\n    }\r\n}\r\nexport default TextOrFileUpload;\r\n\r\n\r\n","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationGraph.jsx",["241","242","243","244","245","246","247","248","249","250","251"],"import React, {Component} from \"react\";\r\nimport axios from \"axios\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4plugins_venn from \"@amcharts/amcharts4/plugins/venn\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport '../styles/CorrelationGraph.css';\r\nimport '../styles/Correlations.css'\r\nimport ErrorModalC from \"./ErrorModalC\";\r\nimport CorrelationBoxPlot from \"./CorrelationBoxPlot\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport {BsShieldShaded, BsFillCaretRightFill} from \"react-icons/bs\";\r\nimport {SiHubspot, SiMicrogenetics} from \"react-icons/si\";\r\nimport {GiDrippingTube} from \"react-icons/gi\";\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\n/**\r\n * the Vann correlation component\r\n */\r\nclass CorrelationGraph extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.childErr = React.createRef();\r\n        this.state = {\r\n            title: \"\",\r\n            results: [],\r\n            itemNames: [],\r\n            withd_y: [],\r\n            without_y: []\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.eventK == 'dvd') {\r\n            this.setState({itemNames: this.props.itemsSelected.map((option) => option.name)}, function () {\r\n                const Qs = require('qs')\r\n                axios.get('http://127.0.0.1:8800/api/v1/statistics/correlationBetweenDefenseSystems', {\r\n                    params: {\r\n                        systems: this.props.itemsSelected.map((option) => option.name),\r\n                    },\r\n                    paramsSerializer: params => {\r\n                        return Qs.stringify(params, {arrayFormat: 'repeat'})\r\n                    },\r\n                })\r\n                    .then(response => {\r\n                        this.setState({results: response.data}, function () {\r\n                            // Create chart\r\n                            let chart = am4core.create(\"chartdiv\", am4plugins_venn.VennDiagram);\r\n                            // Create and configure series\r\n                            let series = chart.series.push(new am4plugins_venn.VennSeries())\r\n                            series.dataFields.category = \"name\";\r\n                            series.dataFields.value = \"value\";\r\n                            series.dataFields.intersections = \"sets\";\r\n                            series.data = [\r\n                                {name: this.state.itemNames[0], value: this.state.results[0]['K']},\r\n                                {name: this.state.itemNames[1], value: this.state.results[0]['n']},\r\n                                {\r\n                                    name: this.state.itemNames[0] + \"\\n&\\n\" + this.state.itemNames[1],\r\n                                    value: this.state.results[0]['k'],\r\n                                    sets: [this.state.itemNames[0], this.state.itemNames[1]]\r\n                                }\r\n                            ];\r\n                            console.log(series.data);\r\n                        })\r\n\r\n                    }).catch((err) => {\r\n                    if (this.childErr.current) {\r\n                        this.childErr.current.handleOpen(\"There is a problem with the server request. We apologize for the inconvenience.\")\r\n                    }\r\n                });\r\n            })\r\n        } else if (this.props.eventK == 'dvc') {\r\n            const items = [this.props.itemsSelected[0].name, this.props.itemsSelected[1].name]\r\n            this.setState({itemNames: items}, function () {\r\n                const Qs = require('qs')\r\n                axios.get('http://127.0.0.1:8800/api/v1/statistics/correlationBetweenDefenseSystemAndAttribute', {\r\n                    params: {\r\n                        system: this.props.itemsSelected[0].name, category: this.props.itemsSelected[1].name\r\n                    },\r\n                    paramsSerializer: params => {\r\n                        return Qs.stringify(params, {arrayFormat: 'repeat'})\r\n                    },\r\n                })\r\n                    .then(response => {\r\n                        this.setState({withd_y: response.data[1]}, function () {\r\n                            this.setState({without_y: response.data[2]}, function () {\r\n                                this.setState({results: response.data[0]}, function () {\r\n                                    // Create chart\r\n                                    let chart = am4core.create(\"chartdiv\", am4plugins_venn.VennDiagram);\r\n\r\n                                    // Create and configure series\r\n                                    let series = chart.series.push(new am4plugins_venn.VennSeries())\r\n                                    series.dataFields.category = \"name\";\r\n                                    series.dataFields.value = \"value\";\r\n                                    series.dataFields.intersections = \"sets\";\r\n                                    series.data = [\r\n                                        {name: this.state.itemNames[0], value: this.state.results['K']},\r\n                                        {name: this.state.itemNames[1], value: this.state.results['n']},\r\n                                        {\r\n                                            name: this.state.itemNames[0] + \"\\n&\\n\" + this.state.itemNames[1],\r\n                                            value: this.state.results['k'],\r\n                                            sets: [this.state.itemNames[0], this.state.itemNames[1]]\r\n                                        }\r\n\r\n                                    ];\r\n                                    console.log(series.data);\r\n                                })\r\n                            })\r\n                        })\r\n                    }).catch((err) => {\r\n                    if (this.childErr.current) {\r\n                        this.childErr.current.handleOpen(\"There is a problem with the server request. We apologize for the inconvenience.\")\r\n                    }\r\n                });\r\n            })\r\n        } else if (this.props.eventK == 'dvi') {\r\n            const items = [this.props.itemsSelected[0].name, this.props.itemsSelected[1].name]\r\n            this.setState({itemNames: items}, function () {\r\n                const Qs = require('qs')\r\n                axios.get('http://127.0.0.1:8800/api/v1/statistics/correlationBetweenDefenseSystemAndIsolationType', {\r\n                    params: {\r\n                        system: this.props.itemsSelected[0].name, isoType: this.props.itemsSelected[1].name\r\n                    },\r\n                    paramsSerializer: params => {\r\n                        return Qs.stringify(params, {arrayFormat: 'repeat'})\r\n                    },\r\n                })\r\n                    .then(response => {\r\n                        this.setState({results: response.data}, function () {\r\n                            // Create chart\r\n                            let chart = am4core.create(\"chartdiv\", am4plugins_venn.VennDiagram);\r\n\r\n                            // Create and configure series\r\n                            let series = chart.series.push(new am4plugins_venn.VennSeries())\r\n                            series.dataFields.category = \"name\";\r\n                            series.dataFields.value = \"value\";\r\n                            series.dataFields.intersections = \"sets\";\r\n                            series.data = [\r\n                                {name: this.state.itemNames[0], value: this.state.results[0]['K']},\r\n                                {name: this.state.itemNames[1], value: this.state.results[0]['n']},\r\n                                {\r\n                                    name: this.state.itemNames[0] + \"\\n&\\n\" + this.state.itemNames[1],\r\n                                    value: this.state.results[0]['k'],\r\n                                    sets: [this.state.itemNames[0], this.state.itemNames[1]]\r\n                                }\r\n\r\n                            ];\r\n                            console.log(series.data);\r\n                        })\r\n\r\n                    }).catch((err) => {\r\n                    if (this.childErr.current) {\r\n                        this.childErr.current.handleOpen(\"There is a problem with the server request. We apologize for the inconvenience.\")\r\n                    }\r\n                });\r\n            })\r\n        } else if (this.props.eventK == 'dvcl') {\r\n            const items = [this.props.itemsSelected[0].name, this.props.itemsSelected[1].name, this.props.itemsSelected[2].name]\r\n            this.setState({itemNames: items}, function () {\r\n                const Qs = require('qs')\r\n                axios.get('http://127.0.0.1:8800/api/v1/statistics/correlationBetweenDefenseSystemAndCluster', {\r\n                    params: {\r\n                        system: items[0], strain: items[1], gene: items[2]\r\n                    },\r\n                    paramsSerializer: params => {\r\n                        return Qs.stringify(params, {arrayFormat: 'repeat'})\r\n                    },\r\n                })\r\n                    .then(response => {\r\n                        this.setState({results: response.data}, function () {\r\n                            // Create chart\r\n                            let chart = am4core.create(\"chartdiv\", am4plugins_venn.VennDiagram);\r\n\r\n                            // Create and configure series\r\n                            let series = chart.series.push(new am4plugins_venn.VennSeries())\r\n                            series.dataFields.category = \"name\";\r\n                            series.dataFields.value = \"value\";\r\n                            series.dataFields.intersections = \"sets\";\r\n                            series.data = [\r\n                                {name: this.state.itemNames[0], value: this.state.results[0]['K']},\r\n                                {name: this.state.itemNames[1], value: this.state.results[0]['n']},\r\n                                {\r\n                                    name: this.state.itemNames[0] + \"\\n&\\n\" + this.state.itemNames[1],\r\n                                    value: this.state.results[0]['k'],\r\n                                    sets: [this.state.itemNames[0], this.state.itemNames[1]]\r\n                                }\r\n\r\n                            ];\r\n                            console.log(series.data);\r\n                        })\r\n\r\n                    }).catch((err) => {\r\n                    if (this.childErr.current) {\r\n                        this.childErr.current.handleOpen(\"There is a problem with the server request. We apologize for the inconvenience.\")\r\n                    }\r\n                });\r\n            })\r\n        } else if (this.props.eventK == 'clvi') {\r\n            const items = [this.props.itemsSelected[0].name, this.props.itemsSelected[1].name, this.props.itemsSelected[2].name]\r\n            this.setState({itemNames: items}, function () {\r\n                const Qs = require('qs')\r\n                axios.get('http://127.0.0.1:8800/api/v1/statistics/correlationBetweenClusterAndIsolationType', {\r\n                    params: {\r\n                        isoType: items[0], strain: items[1], gene: items[2]\r\n                    },\r\n                    paramsSerializer: params => {\r\n                        return Qs.stringify(params, {arrayFormat: 'repeat'})\r\n                    },\r\n                })\r\n                    .then(response => {\r\n                        this.setState({results: response.data}, function () {\r\n                            // Create chart\r\n                            let chart = am4core.create(\"chartdiv\", am4plugins_venn.VennDiagram);\r\n\r\n                            // Create and configure series\r\n                            let series = chart.series.push(new am4plugins_venn.VennSeries())\r\n                            series.dataFields.category = \"name\";\r\n                            series.dataFields.value = \"value\";\r\n                            series.dataFields.intersections = \"sets\";\r\n                            series.data = [\r\n                                {name: this.state.itemNames[0], value: this.state.results[0]['K']},\r\n                                {name: this.state.itemNames[1], value: this.state.results[0]['n']},\r\n                                {\r\n                                    name: this.state.itemNames[0] + \"\\n&\\n\" + this.state.itemNames[1],\r\n                                    value: this.state.results[0]['k'],\r\n                                    sets: [this.state.itemNames[0], this.state.itemNames[1]]\r\n                                }\r\n\r\n                            ];\r\n                            console.log(series.data);\r\n                        })\r\n\r\n                    }).catch((err) => {\r\n                    if (this.childErr.current) {\r\n                        this.childErr.current.handleOpen(\"There is a problem with the server request. We apologize for the inconvenience.\")\r\n                    }\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const columns = [\r\n            {dataField: \"N\", text: \"Number of strains (N)\", sort: false},\r\n            {dataField: \"K\", text: \"Defense System A (K)\", sort: false},\r\n            {dataField: \"n\", text: \"Defense System B (n)\", sort: false},\r\n            {dataField: \"k\", text: \"Intersection (k)\", sort: false},\r\n            {dataField: \"pvalue\", text: \"P-Value\", sort: false}\r\n        ]\r\n\r\n        let getGraph = () => {\r\n            if (this.props.eventK != 'dvc') {\r\n                return (\r\n                    <div>\r\n                        <div id=\"chartdiv\" style={{width: \"100%\", height: \"450px\"}}></div>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div id=\"boxplotdiv\">\r\n                        <CorrelationBoxPlot  withd_y={this.state.withd_y} withoutd_y={this.state.without_y}/>\r\n                        <br/>\r\n                        <br/>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n\r\n        const corrText = () => {\r\n            if (this.props.eventK == 'dvd') {\r\n                return (\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                Defense system:\r\n                            </Col>\r\n                            <Col>\r\n                                Defense system:\r\n                            </Col>\r\n                        </Row> <Row>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><BsShieldShaded className=\"icon_s\"/>{this.props.itemsSelected[0].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><BsShieldShaded className=\"icon_s\"/>{this.props.itemsSelected[1].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                    </Row>\r\n                    </Container>\r\n                )\r\n            } else if (this.props.eventK == 'dvc') {\r\n                return (\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                Defense system:\r\n                            </Col>\r\n                            <Col>\r\n                                Attribute:\r\n                            </Col>\r\n                        </Row> <Row>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><BsShieldShaded className=\"icon_s\"/>{this.props.itemsSelected[0].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><SiHubspot className=\"icon_s\"/>{this.props.itemsSelected[1].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                    </Row>\r\n                    </Container>\r\n                )\r\n            } else if (this.props.eventK == 'dvi') {\r\n                return (\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                Defense system:\r\n                            </Col>\r\n                            <Col>\r\n                                Isolation Type:\r\n                            </Col>\r\n                        </Row> <Row>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><BsShieldShaded className=\"icon_s\"/>{this.props.itemsSelected[0].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><GiDrippingTube className=\"icon_s\"/>{this.props.itemsSelected[1].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                    </Row>\r\n                    </Container>\r\n                )\r\n            }else if (this.props.eventK == 'dvcl') {\r\n                return (\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                Defense system:\r\n                            </Col>\r\n                            <Col>\r\n                                Cluster:\r\n                            </Col>\r\n                        </Row> <Row>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><BsShieldShaded className=\"icon_s\"/>{this.props.itemsSelected[0].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><SiMicrogenetics className=\"icon_s\"/>{this.props.itemsSelected[1].name} <BsFillCaretRightFill/> {this.props.itemsSelected[2].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                    </Row>\r\n                    </Container>\r\n                )\r\n            } else{\r\n                return (\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                Isolation Type:\r\n                            </Col>\r\n                            <Col>\r\n                                Cluster:\r\n                            </Col>\r\n                        </Row> <Row>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><SiMicrogenetics className=\"icon_s\"/>{this.props.itemsSelected[0].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><GiDrippingTube className=\"icon_s\"/>{this.props.itemsSelected[1].name} <BsFillCaretRightFill/> {this.props.itemsSelected[2].name}\r\n                            </ListItemIcon>\r\n                        </Col>\r\n                    </Row>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n\r\n        const noticeText = () => {\r\n            if (this.props.eventK != 'dvc') {\r\n                return (\r\n                    <h6>Notice: The P-Value is based on the Hypergeometric test.</h6>\r\n                )\r\n            } else{\r\n                return (\r\n                <h6>Notice: The P-Value is based on the Mann-Whitney test.</h6>\r\n                )\r\n            }\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <FadeIn>\r\n\r\n                    <div className=\"title_s\">\r\n                        <h1>Correlation Between:</h1>\r\n                        <br/>\r\n                        {corrText()}\r\n                    </div>\r\n                    {\r\n                        getGraph()\r\n                    }\r\n\r\n                    <div style={{height: \"100%\", width: \"90%\", marginLeft: \"5%\", fontSize: \"14px\"}}>\r\n\r\n                        <ToolkitProvider\r\n                            keyField=\"id\"\r\n                            data={this.state.results}\r\n                            columns={columns}\r\n                        >\r\n                            {\r\n                                props => (\r\n                                    <div>\r\n                                        <BootstrapTable  {...props.baseProps}\r\n                                                         pagination={paginationFactory({\r\n                                                             paginationSize: 1,  // the pagination bar size, default is 5\r\n                                                             //lastPageText: '>>', // the text of last page button\r\n                                                             hideSizePerPage: true, // hide the size per page dropdown\r\n                                                             hidePageListOnlyOnePage: true, // hide pagination bar when only one page, default is false\r\n                                                         })}\r\n                                        />\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </ToolkitProvider>\r\n\r\n\r\n                    </div>\r\n                    {noticeText()}\r\n                </FadeIn>\r\n                <ErrorModalC open={false} ref={this.childErr}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CorrelationGraph;","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSIsoType.jsx",["252","253","254","255","256","257"],"import React from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport AutocompleteC from \"../AutocompleteC\"\r\nimport {faPlusCircle} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {BsShieldShaded} from \"react-icons/bs\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport '../../styles/Correlations.css'\r\nimport {GiDrippingTube} from \"react-icons/gi\";\r\n\r\n/**\r\n * calculates the correlation between one defense system to an ISO Type\r\n */\r\nexport default function DefVSIsoType({parentCallback2}) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selectedDF, setSelectedDF] = React.useState([]);\r\n    const [selectedIso, setSelectedIso] = React.useState([]);\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [options, setOptions] = React.useState([]);\r\n    const [buttonOff, setButtonOff] = React.useState(true)\r\n\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        console.log(selectedDF)\r\n        let arr = selectedDF.concat(selectedIso);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedDF]);\r\n\r\n    React.useEffect(() => {\r\n        console.log(selectedIso)\r\n        let arr = selectedIso.concat(selectedDF);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedIso]);\r\n\r\n\r\n    const getSelectedDF = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelectedDF([selectedA]);\r\n        } else {\r\n            setSelectedDF([]);\r\n        }\r\n    }\r\n\r\n    const getSelectedISO = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelectedIso([selectedA]);\r\n        } else {\r\n            setSelectedIso([]);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n            <FadeIn>\r\n                <div className=\"title_s\">\r\n                    <h1>Defense System vs Isolation Type</h1>\r\n                </div>\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"selectDefSys\">\r\n                        <Container>\r\n                            <Row>\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><BsShieldShaded/></ListItemIcon>\r\n                                </Col>\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><GiDrippingTube/></ListItemIcon>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select a defense system</p>\r\n                                </Col>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select an isolation type</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col><AutocompleteC apiUrl='http://127.0.0.1:8800/api/v1/defense' multipleChoice={false}\r\n                                                    parentCallback={getSelectedDF}\r\n                                                    labelText=\"Choose a Defense System\"></AutocompleteC></Col><FontAwesomeIcon\r\n                                icon={faPlusCircle}/>\r\n                                <Col><AutocompleteC apiUrl='http://127.0.0.1:8800/api/v1/isolation/'\r\n                                                    multipleChoice={false}\r\n                                                    parentCallback={getSelectedISO}\r\n                                                    labelText=\"Select an Isolation Type\"></AutocompleteC></Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Button id=\"dviSearch\" onClick={() => parentCallback2(selectedDF, selectedIso)}\r\n                                disabled={buttonOff}>Search</Button>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n        </div>\r\n\r\n\r\n    );\r\n}","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSDef.jsx",["258","259","260","261"],"import React from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport AutocompleteC from \"../AutocompleteC\"\r\nimport '../../styles/Correlations.css'\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport {BsShieldShaded} from \"react-icons/bs\";\r\n\r\n/**\r\n * calculates the correlation between one defense system to another\r\n */\r\nexport default function DefVSDef({parentCallback2}) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selectedA, setSelectedA] = React.useState([]);\r\n    const [options, setOptions] = React.useState([]);\r\n    const [buttonOff, setButtonOff] = React.useState(true)\r\n\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        if (getSelectedLength() === 2){\r\n            setButtonOff(false)\r\n        }\r\n        else{\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedA]);\r\n\r\n\r\n    const getSelected = (selected) => {\r\n        setSelectedA(selected)\r\n\r\n    }\r\n\r\n\r\n    const getSelectedLength = () => {\r\n        return selectedA.length;\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n\r\n\r\n\r\n            <FadeIn>\r\n\r\n                <div className=\"title_s\">\r\n                    <h1>Defense System vs Defense System</h1>\r\n                </div>\r\n\r\n                <Form>\r\n\r\n                    <Row >\r\n                        <Col className=\"col_s\">\r\n                            <ListItemIcon><BsShieldShaded/></ListItemIcon>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Form.Group as={Row} controlId=\"selectDefSys\">\r\n                        <Form.Label className=\"wrapper\" column sm=\"4\">\r\n                            <p style={{textAlign: \"right\"}}>Select two different defense systems</p>\r\n                        </Form.Label>\r\n                        <Col sm=\"4\">\r\n                            <AutocompleteC disableCloseOnSelect = {true} className=\"textBox\" apiUrl='http://127.0.0.1:8800/api/v1/defense' multipleChoice={true} limit_length={2}\r\n                                           parentCallback={getSelected} parentCallbackLegnth={getSelectedLength} labelText=\"Choose Defense Systems\" ></AutocompleteC>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Button id=\"dvdSearch\" onClick={() => parentCallback2(selectedA)} disabled={buttonOff}>Search</Button>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n        </div>\r\n\r\n\r\n    );\r\n}","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\ClusterVSIsoType.jsx",["262","263","264","265","266","267","268","269"],"import React from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport AutocompleteC from \"../AutocompleteC\"\r\nimport {faPlusCircle, faAngleDoubleDown} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport {GiDrippingTube} from \"react-icons/gi\";\r\nimport '../../styles/Correlations.css'\r\nimport {SiMicrogenetics} from \"react-icons/si\";\r\n\r\n/**\r\n * calculates the correlation between one cluster to an ISO Type\r\n */\r\nexport default function ClusterVSIsoType({parentCallback2}) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selectedIso, setSelectedIso] = React.useState([]);\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [options, setOptions] = React.useState([]);\r\n    const [buttonOff, setButtonOff] = React.useState(true);\r\n    const [selected_strain, setSelected_strain] = React.useState([]);\r\n    const [selected_gene, setSelected_gene] = React.useState([]);\r\n    const [strains, setStrains] = React.useState([\r\n        {\r\n            name: \"PAO1\",\r\n            id: \"GCF_000006765.1\"\r\n        },\r\n        {\r\n            name: \"PA14\",\r\n            id: \"GCF_000014625.1\"\r\n        }\r\n    ])\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        console.log(selectedIso)\r\n        let arr = selectedIso.concat(selected_gene);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedIso]);\r\n\r\n    React.useEffect(() => {\r\n        console.log(selected_gene)\r\n        let arr = selected_gene.concat(selectedIso);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selected_gene]);\r\n\r\n\r\n    const getSelectedIso = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelectedIso([selectedA]);\r\n        } else {\r\n            setSelectedIso([]);\r\n        }\r\n    }\r\n\r\n    const getSelectedGene = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelected_gene([selectedA]);\r\n        } else {\r\n            setSelected_gene([]);\r\n        }\r\n    }\r\n\r\n\r\n    const choice_strain = (selected) => {\r\n        if (selected != null)\r\n            setSelected_strain(selected)\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n\r\n            <FadeIn>\r\n\r\n                <div className=\"title_s\">\r\n                    <h1>Cluster vs Isolation Type</h1>\r\n                </div>\r\n                <Form>\r\n\r\n                    <Form.Group as={Row} controlId=\"selectDefSys\">\r\n                        <Container>\r\n                            <Row >\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><SiMicrogenetics/></ListItemIcon>\r\n                                </Col>\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><GiDrippingTube/></ListItemIcon>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select a strain and a gene</p>\r\n                                </Col>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select an isolation type</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Autocomplete\r\n                                        id=\"strains-combo-box\"\r\n                                        options={strains}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        //style={{width: 300}}\r\n                                        onChange={(event, value) => choice_strain(value)}\r\n                                        renderInput={(params) => <TextField {...params} size=\"small\"\r\n                                                                            label=\"Choose Strain\"\r\n                                                                            variant=\"outlined\"/>}\r\n                                    />\r\n                                    <div style={{textAlign: 'center', paddingTop: '7px', paddingBottom: '7px'}}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faAngleDoubleDown}/>\r\n                                    </div>\r\n                                    <AutocompleteC multipleChoice={false}\r\n                                                   parentCallback={getSelectedGene}\r\n                                                   apiUrl={\"http://127.0.0.1:8800/api/v1/cluster/get_gene_strain_id/\" + selected_strain.id}\r\n                                                   labelText=\"Choose Gene\"\r\n                                                   disabled={selected_strain == \"\"}\r\n                                    />\r\n\r\n                                </Col><FontAwesomeIcon\r\n                                icon={faPlusCircle}/>\r\n                                <Col><AutocompleteC apiUrl='http://127.0.0.1:8800/api/v1/isolation/' multipleChoice={false}\r\n                                                    parentCallback={getSelectedIso} labelText=\"Select an Isolation Type\"></AutocompleteC></Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Button id=\"clviSearch\" onClick={() => parentCallback2(selectedIso, selected_strain, selected_gene)}\r\n                                disabled={buttonOff}>Search</Button>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n        </div>\r\n    );\r\n}","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSCat.jsx",["270","271","272","273","274","275","276"],"import React from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport AutocompleteC from \"../AutocompleteC\"\r\nimport {faPlusCircle} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport '../../styles/Correlations.css'\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport {BsShieldShaded} from \"react-icons/bs\";\r\nimport {SiHubspot, SiMicrogenetics} from \"react-icons/si\";\r\n\r\n/**\r\n * calculates the correlation between one defense system and attribute\r\n */\r\nexport default function DefVSCat({parentCallback2}) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selectedDF, setSelectedDF] = React.useState([]);\r\n    const [selectedCls, setSelectedCls] = React.useState([]);\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [options, setOptions] = React.useState([]);\r\n    const [buttonOff, setButtonOff] = React.useState(true)\r\n\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        console.log(selectedDF)\r\n        let arr = selectedDF.concat(selectedCls);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedDF]);\r\n\r\n    React.useEffect(() => {\r\n        console.log(selectedCls)\r\n        let arr = selectedCls.concat(selectedDF);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedCls]);\r\n\r\n    const getSelectedDF = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelectedDF([selectedA]);\r\n        } else {\r\n            setSelectedDF([]);\r\n        }\r\n    }\r\n\r\n    const getSelectedCls = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelectedCls([selectedA]);\r\n        } else {\r\n            setSelectedCls([]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n\r\n            <FadeIn>\r\n                <div className=\"title_s\">\r\n                    <h1>Defense System vs Attribute</h1>\r\n                </div>\r\n                <Form>\r\n\r\n                    <Form.Group as={Row} controlId=\"selectDefSys\">\r\n                        <Container>\r\n\r\n                            <Row >\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><BsShieldShaded/></ListItemIcon>\r\n                                </Col>\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><SiHubspot/></ListItemIcon>\r\n                                </Col>\r\n                            </Row>\r\n\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select a defense system</p>\r\n                                </Col>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select an attribute</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col><AutocompleteC apiUrl='http://127.0.0.1:8800/api/v1/defense' multipleChoice={false}\r\n                                                    parentCallback={getSelectedDF} labelText=\"Choose a Defense System\"></AutocompleteC></Col><FontAwesomeIcon\r\n                                icon={faPlusCircle}/>\r\n                                <Col><AutocompleteC apiUrl='http://127.0.0.1:8800/api/v1/isolation/attributes/'\r\n                                                    multipleChoice={false}\r\n                                                    parentCallback={getSelectedCls} labelText=\"Select an attribute\"></AutocompleteC></Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Button id=\"dvcSearch\" onClick={() => parentCallback2(selectedDF, selectedCls)}\r\n                                disabled={buttonOff}>Search</Button>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n        </div>\r\n\r\n\r\n    );\r\n}","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DefVSCluster.jsx",["277","278","279","280","281","282","283","284"],"import React from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport AutocompleteC from \"../AutocompleteC\"\r\nimport {faPlusCircle, faAngleDoubleDown} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport '../../styles/Correlations.css'\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport {BsShieldShaded} from \"react-icons/bs\";\r\nimport {SiMicrogenetics} from \"react-icons/si\";\r\n\r\n/**\r\n * calculates the correlation between one defense system to a cluster Type\r\n */\r\nexport default function DefVSCluster({parentCallback2}) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [selectedDF, setSelectedDF] = React.useState([]);\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [options, setOptions] = React.useState([]);\r\n    const [buttonOff, setButtonOff] = React.useState(true);\r\n    const [selected_strain, setSelected_strain] = React.useState([]);\r\n    const [selected_gene, setSelected_gene] = React.useState([]);\r\n    const [strains, setStrains] = React.useState([\r\n        {\r\n            name: \"PAO1\",\r\n            id: \"GCF_000006765.1\"\r\n        },\r\n        {\r\n            name: \"PA14\",\r\n            id: \"GCF_000014625.1\"\r\n        }\r\n    ])\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        console.log(selectedDF)\r\n        let arr = selectedDF.concat(selected_gene);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selectedDF]);\r\n\r\n    React.useEffect(() => {\r\n        console.log(selected_gene)\r\n        let arr = selected_gene.concat(selectedDF);\r\n        if (arr.length === 2) {\r\n            setButtonOff(false)\r\n        } else {\r\n            setButtonOff(true)\r\n        }\r\n    }, [selected_gene]);\r\n\r\n\r\n    const getSelectedDF = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelectedDF([selectedA]);\r\n        } else {\r\n            setSelectedDF([]);\r\n        }\r\n    }\r\n\r\n    const getSelectedGene = (selectedA) => {\r\n        if (selectedA) {\r\n            setSelected_gene([selectedA]);\r\n        } else {\r\n            setSelected_gene([]);\r\n        }\r\n    }\r\n\r\n\r\n    const choice_strain = (selected) => {\r\n        if (selected != null)\r\n            setSelected_strain(selected)\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-form\">\r\n\r\n\r\n\r\n            <FadeIn>\r\n\r\n                <div className=\"title_s\">\r\n                    <h1>Defense System vs Cluster</h1>\r\n                </div>\r\n\r\n                <Form>\r\n                    <Form.Group as={Row} controlId=\"selectDefSys\">\r\n                        <Container>\r\n\r\n                            <Row >\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><BsShieldShaded/></ListItemIcon>\r\n                                </Col>\r\n                                <Col className=\"col_s\">\r\n                                    <ListItemIcon><SiMicrogenetics/></ListItemIcon>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select a defense system</p>\r\n                                </Col>\r\n                                <Col>\r\n                                    <p style={{textAlign: \"center\"}}>Select a strain and a gene</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col><AutocompleteC apiUrl='http://127.0.0.1:8800/api/v1/defense' multipleChoice={false}\r\n                                                    parentCallback={getSelectedDF}></AutocompleteC></Col><FontAwesomeIcon\r\n                                icon={faPlusCircle}/>\r\n                                <Col>\r\n                                    <Autocomplete\r\n                                        id=\"strains-combo-box\"\r\n                                        labelText=\"Choose a Defense System\"\r\n                                        options={strains}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        onChange={(event, value) => choice_strain(value)}\r\n                                        renderInput={(params) => <TextField {...params} size=\"small\"\r\n                                                                            label=\"Choose Strain\"\r\n                                                                            variant=\"outlined\"/>}\r\n                                    />\r\n                                    <div style={{textAlign: 'center', paddingTop: '7px', paddingBottom: '7px'}}>\r\n                                        <FontAwesomeIcon\r\n                                            icon={faAngleDoubleDown}/>\r\n                                    </div>\r\n                                    <AutocompleteC multipleChoice={false}\r\n                                                   parentCallback={getSelectedGene}\r\n                                                   apiUrl={\"http://127.0.0.1:8800/api/v1/cluster/get_gene_strain_id/\" + selected_strain.id}\r\n                                                   labelText=\"Choose Gene\"\r\n                                                   disabled={selected_strain == \"\"}\r\n                                    />\r\n\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Form.Group>\r\n\r\n                    <div style={{textAlign: \"center\"}}>\r\n                        <Button id=\"dvclSearch\" onClick={() => parentCallback2(selectedDF, selected_strain, selected_gene)}\r\n                                disabled={buttonOff}>Search</Button>\r\n                    </div>\r\n                </Form>\r\n            </FadeIn>\r\n        </div>\r\n\r\n\r\n    );\r\n}","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationComponents\\DrawerCorrelation.jsx",["285"],"import React from \"react\";\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport clsx from 'clsx';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport List from '@material-ui/core/List';\r\nimport {BsShieldShaded} from 'react-icons/bs';\r\nimport {SiMicrogenetics, SiHubspot} from 'react-icons/si';\r\nimport {GiDrippingTube} from 'react-icons/gi';\r\n\r\nconst drawerWidth = 400;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        whiteSpace: 'nowrap',\r\n\r\n    },\r\n    drawerOpen: {\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerClose: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        overflowX: 'hidden',\r\n        width: theme.spacing(7) + 1,\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(7) + 1,\r\n        },\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n}));\r\n\r\n/**\r\n * the menu of the different correlations\r\n */\r\nexport default function DrawerCorrelation({generatingTypeHandler}) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleDrawerOpen = () => {\r\n        if (open == true) {\r\n            setOpen(false)\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Drawer\r\n                PaperProps={{style: {position: 'absolute', height: '83.5%', marginTop: '4.5%'}, width: '70%'}}\r\n                BackdropProps={{style: {position: 'absolute'}}}\r\n                ModalProps={{\r\n                    container: document.getElementById('drawer'),\r\n                    style: {position: 'absolute'}\r\n                }}\r\n                anchor='right'\r\n                variant=\"permanent\"\r\n                className={clsx(classes.drawer, {\r\n                    [classes.drawerOpen]: open,\r\n                    [classes.drawerClose]: !open,\r\n                })}\r\n                classes={{\r\n                    paper: clsx({\r\n                        [classes.drawerOpen]: open,\r\n                        [classes.drawerClose]: !open,\r\n                    }),\r\n                }}\r\n            >\r\n                <div className={classes.toolbar}>\r\n                    <IconButton id=\"drawerBut\" onClick={handleDrawerOpen}>\r\n                        {theme.direction === 'rtl' ? <ChevronRightIcon/> : <ChevronLeftIcon/>}\r\n                    </IconButton>\r\n                    Choose Display:\r\n                </div>\r\n                <Divider/>\r\n                <List>\r\n\r\n                    <ListItem  button key=\"dvd\" id=\"dvd\" onClick={() => generatingTypeHandler(\"dvd\")}>\r\n                            <ListItemIcon>\r\n                                <BsShieldShaded/><BsShieldShaded/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Defense system vs Defense system\"/>\r\n\r\n                    </ListItem>\r\n                    <ListItem button key=\"dvc\" id=\"dvc\" onClick={() => generatingTypeHandler(\"dvc\")}>\r\n                        <ListItemIcon><BsShieldShaded/><SiHubspot/></ListItemIcon>\r\n                        <ListItemText primary=\"Defense system vs Attribute\"/>\r\n                    </ListItem>\r\n                    <ListItem button key=\"dvi\" id=\"dvi\" onClick={() => generatingTypeHandler(\"dvi\")}>\r\n                        <ListItemIcon><BsShieldShaded/><GiDrippingTube/></ListItemIcon>\r\n                        <ListItemText primary=\"Defense system vs Isolation Type\"/>\r\n                    </ListItem>\r\n                    <ListItem button key=\"dvcl\" id=\"dvcl\" onClick={() => generatingTypeHandler(\"dvcl\")}>\r\n                        <ListItemIcon><BsShieldShaded/><SiMicrogenetics/></ListItemIcon>\r\n                        <ListItemText primary=\"Defense system vs Cluster\"/>\r\n                    </ListItem>\r\n                    <ListItem button key=\"clvi\" id=\"clvi\" onClick={() => generatingTypeHandler(\"clvi\")}>\r\n                        <ListItemIcon><SiMicrogenetics/><GiDrippingTube/></ListItemIcon>\r\n                        <ListItemText primary=\"Cluster vs Isolation Type\"/>\r\n                    </ListItem>\r\n                </List>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n}","C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CorrelationBoxPlot.jsx",[],["286","287"],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\CSVorFastaC.jsx",[],"C:\\Users\\along\\IdeaProjects\\pasite-frontend\\src\\components\\WarningModalC.jsx",[],{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","severity":1,"message":"293","line":11,"column":17,"nodeType":"294","endLine":11,"endColumn":53},{"ruleId":"295","severity":1,"message":"296","line":2,"column":15,"nodeType":"297","messageId":"298","endLine":2,"endColumn":23},{"ruleId":"295","severity":1,"message":"299","line":8,"column":27,"nodeType":"297","messageId":"298","endLine":8,"endColumn":40},{"ruleId":"295","severity":1,"message":"300","line":38,"column":15,"nodeType":"297","messageId":"298","endLine":38,"endColumn":21},{"ruleId":"301","severity":1,"message":"302","line":156,"column":18,"nodeType":"303","messageId":"304","endLine":156,"endColumn":20},{"ruleId":"301","severity":1,"message":"302","line":158,"column":23,"nodeType":"303","messageId":"304","endLine":158,"endColumn":25},{"ruleId":"301","severity":1,"message":"302","line":160,"column":25,"nodeType":"303","messageId":"304","endLine":160,"endColumn":27},{"ruleId":"295","severity":1,"message":"305","line":1,"column":16,"nodeType":"297","messageId":"298","endLine":1,"endColumn":24},{"ruleId":"295","severity":1,"message":"306","line":3,"column":33,"nodeType":"297","messageId":"298","endLine":3,"endColumn":47},{"ruleId":"295","severity":1,"message":"307","line":3,"column":49,"nodeType":"297","messageId":"298","endLine":3,"endColumn":56},{"ruleId":"295","severity":1,"message":"308","line":14,"column":18,"nodeType":"297","messageId":"298","endLine":14,"endColumn":25},{"ruleId":"295","severity":1,"message":"309","line":15,"column":12,"nodeType":"297","messageId":"298","endLine":15,"endColumn":19},{"ruleId":"310","severity":1,"message":"311","line":32,"column":8,"nodeType":"312","endLine":32,"endColumn":19,"suggestions":"313"},{"ruleId":"292","severity":1,"message":"293","line":52,"column":33,"nodeType":"294","endLine":52,"endColumn":107},{"ruleId":"295","severity":1,"message":"314","line":1,"column":27,"nodeType":"297","messageId":"298","endLine":1,"endColumn":36},{"ruleId":"295","severity":1,"message":"315","line":1,"column":38,"nodeType":"297","messageId":"298","endLine":1,"endColumn":44},{"ruleId":"295","severity":1,"message":"305","line":1,"column":46,"nodeType":"297","messageId":"298","endLine":1,"endColumn":54},{"ruleId":"295","severity":1,"message":"316","line":100,"column":13,"nodeType":"297","messageId":"298","endLine":100,"endColumn":20},{"ruleId":"301","severity":1,"message":"302","line":109,"column":57,"nodeType":"303","messageId":"304","endLine":109,"endColumn":59},{"ruleId":"301","severity":1,"message":"317","line":196,"column":26,"nodeType":"303","messageId":"304","endLine":196,"endColumn":28},{"ruleId":"292","severity":1,"message":"293","line":416,"column":45,"nodeType":"294","endLine":420,"endColumn":75},{"ruleId":"295","severity":1,"message":"305","line":1,"column":16,"nodeType":"297","messageId":"298","endLine":1,"endColumn":24},{"ruleId":"295","severity":1,"message":"318","line":1,"column":17,"nodeType":"297","messageId":"298","endLine":1,"endColumn":26},{"ruleId":"295","severity":1,"message":"308","line":14,"column":18,"nodeType":"297","messageId":"298","endLine":14,"endColumn":25},{"ruleId":"295","severity":1,"message":"319","line":15,"column":21,"nodeType":"297","messageId":"298","endLine":15,"endColumn":31},{"ruleId":"295","severity":1,"message":"320","line":16,"column":11,"nodeType":"297","messageId":"298","endLine":16,"endColumn":18},{"ruleId":"301","severity":1,"message":"302","line":93,"column":29,"nodeType":"303","messageId":"304","endLine":93,"endColumn":31},{"ruleId":"301","severity":1,"message":"302","line":106,"column":29,"nodeType":"303","messageId":"304","endLine":106,"endColumn":31},{"ruleId":"301","severity":1,"message":"302","line":130,"column":57,"nodeType":"303","messageId":"304","endLine":130,"endColumn":59},{"ruleId":"295","severity":1,"message":"321","line":9,"column":8,"nodeType":"297","messageId":"298","endLine":9,"endColumn":18},{"ruleId":"295","severity":1,"message":"322","line":10,"column":8,"nodeType":"297","messageId":"298","endLine":10,"endColumn":14},{"ruleId":"295","severity":1,"message":"305","line":1,"column":27,"nodeType":"297","messageId":"298","endLine":1,"endColumn":35},{"ruleId":"295","severity":1,"message":"315","line":1,"column":37,"nodeType":"297","messageId":"298","endLine":1,"endColumn":43},{"ruleId":"295","severity":1,"message":"305","line":1,"column":16,"nodeType":"297","messageId":"298","endLine":1,"endColumn":24},{"ruleId":"295","severity":1,"message":"306","line":2,"column":33,"nodeType":"297","messageId":"298","endLine":2,"endColumn":47},{"ruleId":"295","severity":1,"message":"307","line":2,"column":49,"nodeType":"297","messageId":"298","endLine":2,"endColumn":56},{"ruleId":"310","severity":1,"message":"323","line":52,"column":7,"nodeType":"312","endLine":52,"endColumn":16,"suggestions":"324"},{"ruleId":"292","severity":1,"message":"293","line":70,"column":33,"nodeType":"294","endLine":70,"endColumn":107},{"ruleId":"325","severity":1,"message":"326","line":16,"column":13,"nodeType":"294","endLine":16,"endColumn":151},{"ruleId":"295","severity":1,"message":"318","line":1,"column":16,"nodeType":"297","messageId":"298","endLine":1,"endColumn":25},{"ruleId":"295","severity":1,"message":"308","line":13,"column":18,"nodeType":"297","messageId":"298","endLine":13,"endColumn":25},{"ruleId":"295","severity":1,"message":"319","line":14,"column":21,"nodeType":"297","messageId":"298","endLine":14,"endColumn":31},{"ruleId":"295","severity":1,"message":"320","line":15,"column":11,"nodeType":"297","messageId":"298","endLine":15,"endColumn":18},{"ruleId":"301","severity":1,"message":"302","line":92,"column":30,"nodeType":"303","messageId":"304","endLine":92,"endColumn":32},{"ruleId":"301","severity":1,"message":"302","line":105,"column":30,"nodeType":"303","messageId":"304","endLine":105,"endColumn":32},{"ruleId":"301","severity":1,"message":"302","line":130,"column":49,"nodeType":"303","messageId":"304","endLine":130,"endColumn":51},{"ruleId":"295","severity":1,"message":"327","line":8,"column":21,"nodeType":"297","messageId":"298","endLine":8,"endColumn":31},{"ruleId":"301","severity":1,"message":"302","line":93,"column":18,"nodeType":"303","messageId":"304","endLine":93,"endColumn":20},{"ruleId":"301","severity":1,"message":"317","line":103,"column":26,"nodeType":"303","messageId":"304","endLine":103,"endColumn":28},{"ruleId":"301","severity":1,"message":"302","line":103,"column":19,"nodeType":"303","messageId":"304","endLine":103,"endColumn":21},{"ruleId":"301","severity":1,"message":"302","line":115,"column":19,"nodeType":"303","messageId":"304","endLine":115,"endColumn":21},{"ruleId":"301","severity":1,"message":"302","line":125,"column":19,"nodeType":"303","messageId":"304","endLine":125,"endColumn":21},{"ruleId":"295","severity":1,"message":"305","line":1,"column":27,"nodeType":"297","messageId":"298","endLine":1,"endColumn":35},{"ruleId":"295","severity":1,"message":"315","line":1,"column":37,"nodeType":"297","messageId":"298","endLine":1,"endColumn":43},{"ruleId":"301","severity":1,"message":"302","line":46,"column":19,"nodeType":"303","messageId":"304","endLine":46,"endColumn":21},{"ruleId":"301","severity":1,"message":"302","line":48,"column":26,"nodeType":"303","messageId":"304","endLine":48,"endColumn":28},{"ruleId":"301","severity":1,"message":"302","line":50,"column":26,"nodeType":"303","messageId":"304","endLine":50,"endColumn":28},{"ruleId":"301","severity":1,"message":"302","line":52,"column":26,"nodeType":"303","messageId":"304","endLine":52,"endColumn":28},{"ruleId":"301","severity":1,"message":"302","line":63,"column":36,"nodeType":"303","messageId":"304","endLine":63,"endColumn":38},{"ruleId":"301","severity":1,"message":"302","line":65,"column":33,"nodeType":"303","messageId":"304","endLine":65,"endColumn":35},{"ruleId":"301","severity":1,"message":"302","line":67,"column":40,"nodeType":"303","messageId":"304","endLine":67,"endColumn":42},{"ruleId":"301","severity":1,"message":"302","line":69,"column":40,"nodeType":"303","messageId":"304","endLine":69,"endColumn":42},{"ruleId":"301","severity":1,"message":"302","line":71,"column":40,"nodeType":"303","messageId":"304","endLine":71,"endColumn":42},{"ruleId":"301","severity":1,"message":"302","line":73,"column":40,"nodeType":"303","messageId":"304","endLine":73,"endColumn":42},{"ruleId":"295","severity":1,"message":"328","line":2,"column":8,"nodeType":"297","messageId":"298","endLine":2,"endColumn":14},{"ruleId":"295","severity":1,"message":"329","line":3,"column":15,"nodeType":"297","messageId":"298","endLine":3,"endColumn":18},{"ruleId":"295","severity":1,"message":"330","line":3,"column":20,"nodeType":"297","messageId":"298","endLine":3,"endColumn":23},{"ruleId":"295","severity":1,"message":"321","line":6,"column":8,"nodeType":"297","messageId":"298","endLine":6,"endColumn":18},{"ruleId":"301","severity":1,"message":"302","line":122,"column":32,"nodeType":"303","messageId":"304","endLine":122,"endColumn":34},{"ruleId":"331","severity":1,"message":"332","line":124,"column":108,"nodeType":"333","endLine":124,"endColumn":150},{"ruleId":"301","severity":1,"message":"302","line":135,"column":32,"nodeType":"303","messageId":"304","endLine":135,"endColumn":34},{"ruleId":"301","severity":1,"message":"302","line":41,"column":31,"nodeType":"303","messageId":"304","endLine":41,"endColumn":33},{"ruleId":"301","severity":1,"message":"302","line":79,"column":38,"nodeType":"303","messageId":"304","endLine":79,"endColumn":40},{"ruleId":"301","severity":1,"message":"302","line":123,"column":38,"nodeType":"303","messageId":"304","endLine":123,"endColumn":40},{"ruleId":"301","severity":1,"message":"302","line":164,"column":38,"nodeType":"303","messageId":"304","endLine":164,"endColumn":40},{"ruleId":"301","severity":1,"message":"302","line":205,"column":38,"nodeType":"303","messageId":"304","endLine":205,"endColumn":40},{"ruleId":"301","severity":1,"message":"317","line":260,"column":35,"nodeType":"303","messageId":"304","endLine":260,"endColumn":37},{"ruleId":"301","severity":1,"message":"302","line":278,"column":35,"nodeType":"303","messageId":"304","endLine":278,"endColumn":37},{"ruleId":"301","severity":1,"message":"302","line":300,"column":42,"nodeType":"303","messageId":"304","endLine":300,"endColumn":44},{"ruleId":"301","severity":1,"message":"302","line":322,"column":42,"nodeType":"303","messageId":"304","endLine":322,"endColumn":44},{"ruleId":"301","severity":1,"message":"302","line":344,"column":41,"nodeType":"303","messageId":"304","endLine":344,"endColumn":43},{"ruleId":"301","severity":1,"message":"317","line":392,"column":35,"nodeType":"303","messageId":"304","endLine":392,"endColumn":37},{"ruleId":"295","severity":1,"message":"308","line":16,"column":18,"nodeType":"297","messageId":"298","endLine":16,"endColumn":25},{"ruleId":"295","severity":1,"message":"334","line":19,"column":12,"nodeType":"297","messageId":"298","endLine":19,"endColumn":20},{"ruleId":"295","severity":1,"message":"335","line":19,"column":22,"nodeType":"297","messageId":"298","endLine":19,"endColumn":33},{"ruleId":"295","severity":1,"message":"309","line":20,"column":12,"nodeType":"297","messageId":"298","endLine":20,"endColumn":19},{"ruleId":"310","severity":1,"message":"336","line":38,"column":8,"nodeType":"312","endLine":38,"endColumn":20,"suggestions":"337"},{"ruleId":"310","severity":1,"message":"338","line":48,"column":8,"nodeType":"312","endLine":48,"endColumn":21,"suggestions":"339"},{"ruleId":"295","severity":1,"message":"340","line":3,"column":22,"nodeType":"297","messageId":"298","endLine":3,"endColumn":31},{"ruleId":"295","severity":1,"message":"308","line":13,"column":18,"nodeType":"297","messageId":"298","endLine":13,"endColumn":25},{"ruleId":"295","severity":1,"message":"309","line":15,"column":12,"nodeType":"297","messageId":"298","endLine":15,"endColumn":19},{"ruleId":"310","severity":1,"message":"311","line":32,"column":8,"nodeType":"312","endLine":32,"endColumn":19,"suggestions":"341"},{"ruleId":"295","severity":1,"message":"308","line":18,"column":18,"nodeType":"297","messageId":"298","endLine":18,"endColumn":25},{"ruleId":"295","severity":1,"message":"334","line":20,"column":12,"nodeType":"297","messageId":"298","endLine":20,"endColumn":20},{"ruleId":"295","severity":1,"message":"335","line":20,"column":22,"nodeType":"297","messageId":"298","endLine":20,"endColumn":33},{"ruleId":"295","severity":1,"message":"309","line":21,"column":12,"nodeType":"297","messageId":"298","endLine":21,"endColumn":19},{"ruleId":"295","severity":1,"message":"342","line":25,"column":21,"nodeType":"297","messageId":"298","endLine":25,"endColumn":31},{"ruleId":"310","severity":1,"message":"343","line":50,"column":8,"nodeType":"312","endLine":50,"endColumn":21,"suggestions":"344"},{"ruleId":"310","severity":1,"message":"336","line":60,"column":8,"nodeType":"312","endLine":60,"endColumn":23,"suggestions":"345"},{"ruleId":"301","severity":1,"message":"302","line":133,"column":78,"nodeType":"303","messageId":"304","endLine":133,"endColumn":80},{"ruleId":"295","severity":1,"message":"346","line":10,"column":20,"nodeType":"297","messageId":"298","endLine":10,"endColumn":35},{"ruleId":"295","severity":1,"message":"308","line":16,"column":18,"nodeType":"297","messageId":"298","endLine":16,"endColumn":25},{"ruleId":"295","severity":1,"message":"334","line":19,"column":12,"nodeType":"297","messageId":"298","endLine":19,"endColumn":20},{"ruleId":"295","severity":1,"message":"335","line":19,"column":22,"nodeType":"297","messageId":"298","endLine":19,"endColumn":33},{"ruleId":"295","severity":1,"message":"309","line":20,"column":12,"nodeType":"297","messageId":"298","endLine":20,"endColumn":19},{"ruleId":"310","severity":1,"message":"347","line":38,"column":8,"nodeType":"312","endLine":38,"endColumn":20,"suggestions":"348"},{"ruleId":"310","severity":1,"message":"338","line":48,"column":8,"nodeType":"312","endLine":48,"endColumn":21,"suggestions":"349"},{"ruleId":"295","severity":1,"message":"308","line":18,"column":18,"nodeType":"297","messageId":"298","endLine":18,"endColumn":25},{"ruleId":"295","severity":1,"message":"334","line":20,"column":12,"nodeType":"297","messageId":"298","endLine":20,"endColumn":20},{"ruleId":"295","severity":1,"message":"335","line":20,"column":22,"nodeType":"297","messageId":"298","endLine":20,"endColumn":33},{"ruleId":"295","severity":1,"message":"309","line":21,"column":12,"nodeType":"297","messageId":"298","endLine":21,"endColumn":19},{"ruleId":"295","severity":1,"message":"342","line":25,"column":21,"nodeType":"297","messageId":"298","endLine":25,"endColumn":31},{"ruleId":"310","severity":1,"message":"343","line":50,"column":8,"nodeType":"312","endLine":50,"endColumn":20,"suggestions":"350"},{"ruleId":"310","severity":1,"message":"338","line":60,"column":8,"nodeType":"312","endLine":60,"endColumn":23,"suggestions":"351"},{"ruleId":"301","severity":1,"message":"302","line":140,"column":78,"nodeType":"303","messageId":"304","endLine":140,"endColumn":80},{"ruleId":"301","severity":1,"message":"302","line":90,"column":18,"nodeType":"303","messageId":"304","endLine":90,"endColumn":20},{"ruleId":"288","replacedBy":"352"},{"ruleId":"290","replacedBy":"353"},"no-native-reassign",["354"],"no-negated-in-lhs",["355"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Carousel' is defined but never used.","Identifier","unusedVar","'faShieldVirus' is defined but never used.","'params' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'OverlayTrigger' is defined but never used.","'Tooltip' is defined but never used.","'setOpen' is assigned a value but never used.","'options' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'getSelectedLength'. Either include it or remove the dependency array.","ArrayExpression",["356"],"'useEffect' is defined but never used.","'useRef' is defined but never used.","'systems' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Component' is defined but never used.","'setOptions' is assigned a value but never used.","'loading' is assigned a value but never used.","'BrowsePage' is defined but never used.","'Switch' is defined but never used.","React Hook React.useEffect has a missing dependency: 'childErr'. Either include it or remove the dependency array.",["357"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'faQuestion' is defined but never used.","'FadeIn' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'selected' is assigned a value but never used.","'setSelected' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'selectedIso'. Either include it or remove the dependency array.",["358"],"React Hook React.useEffect has a missing dependency: 'selectedDF'. Either include it or remove the dependency array.",["359"],"'Container' is defined but never used.",["360"],"'setStrains' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'selected_gene'. Either include it or remove the dependency array.",["361"],["362"],"'SiMicrogenetics' is defined but never used.","React Hook React.useEffect has a missing dependency: 'selectedCls'. Either include it or remove the dependency array.",["363"],["364"],["365"],["366"],["354"],["355"],"no-global-assign","no-unsafe-negation",{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"371","fix":"373"},{"desc":"367","fix":"374"},{"desc":"375","fix":"376"},{"desc":"375","fix":"377"},{"desc":"378","fix":"379"},{"desc":"378","fix":"380"},{"desc":"381","fix":"382"},{"desc":"381","fix":"383"},"Update the dependencies array to be: [getSelectedLength, selectedA]",{"range":"384","text":"385"},"Update the dependencies array to be: [childErr, loading]",{"range":"386","text":"387"},"Update the dependencies array to be: [selectedDF, selectedIso]",{"range":"388","text":"389"},{"range":"390","text":"389"},{"range":"391","text":"385"},"Update the dependencies array to be: [selectedIso, selected_gene]",{"range":"392","text":"393"},{"range":"394","text":"393"},"Update the dependencies array to be: [selectedCls, selectedDF]",{"range":"395","text":"396"},{"range":"397","text":"396"},"Update the dependencies array to be: [selectedDF, selected_gene]",{"range":"398","text":"399"},{"range":"400","text":"399"},[986,997],"[getSelectedLength, selectedA]",[1755,1764],"[childErr, loading]",[1358,1370],"[selectedDF, selectedIso]",[1624,1637],[982,993],[1797,1810],"[selectedIso, selected_gene]",[2069,2084],[1365,1377],"[selectedCls, selectedDF]",[1631,1644],[1799,1811],"[selectedDF, selected_gene]",[2069,2084]]